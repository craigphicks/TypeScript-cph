myDebug=true, myDisableInfer=false, myDisable=true, myNoAliasAction=true, myTestFilename=, currentTestFile=_caxnc-prop-0001.ts
  checkSourceElement[in] node: [n30] declare type X = {
    foo: boolean;
};, [0,39], TypeAliasDeclaration
    checkSourceElement[in] node: [n31] {
    foo: boolean;
}, [16,38], TypeLiteral
      checkSourceElement[in] node: [n32] foo: boolean;, [18,36], PropertySignature
        checkVariableLikeDeclaration[in]: node: [n32] foo: boolean;, [18,36], PropertySignature
          checkSourceElement[in] node: [n33] boolean, [27,35], BooleanKeyword
          checkSourceElement[out]: nodeid: 33
        checkVariableLikeDeclaration[out]: node: [n32] foo: boolean;, [18,36], PropertySignature
      checkSourceElement[out]: nodeid: 32
    checkSourceElement[out]: nodeid: 31
  checkSourceElement[out]: nodeid: 30
  checkSourceElement[in] node: [n34] declare const x:X;, [39,58], VariableStatement
    checkSourceElement[in] node: [n35] x:X, [53,57], VariableDeclaration
      checkVariableLikeDeclaration[in]: node: [n35] x:X, [53,57], VariableDeclaration
        checkSourceElement[in] node: [n36] X, [56,57], TypeReference
        checkSourceElement[out]: nodeid: 36
      checkVariableLikeDeclaration[out]: node: [n35] x:X, [53,57], VariableDeclaration
    checkSourceElement[out]: nodeid: 35
  checkSourceElement[out]: nodeid: 34
  checkSourceElement[in] node: [n27] function prop0001(){
    if (x.foo){
        let y = x.foo;
        y;
    }
    else {
        let z = x.foo;
        z;
    }
}, [58,189], FunctionDeclaration
    checkSourceElement[in] node: [n37] {
    if (x.foo){
        let y = x.foo;
        y;
    }
    else {
        let z = x.foo;
        z;
    }
}, [79,189], Block
      checkSourceElement[in] node: [n38] if (x.foo){
        let y = x.foo;
        y;
    }
    else {
        let z = x.foo;
        z;
    }, [80,187], IfStatement
        checkExpression[in] node: [n13] x.foo, [89,94], PropertyAccessExpression
          checkExpression[in] node: [n16] x, [89,90], Identifier
            getFlowTypeOfReference[in]: reference [n16] x, [89,90], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0
              getTypeByMrNarrow[in] expr: [n16] x, [89,90], Identifier
              getTypeByMrNarrowAux[dbg]: reference: [n16] x, [89,90], Identifier, maximalNode: [n13] x.foo, [89,94], PropertyAccessExpression
                updateHeapWithGroupForFlow[in]: group: {groupIdx: 0, maximalNode: [n13] x.foo, [89,94], PropertyAccessExpression}. minGroupIdxToAdd: undefined
                  updateHeapWithGroupForFlow[dbg] heap[1=>0] [n13] x.foo, [89,94], PropertyAccessExpression
                updateHeapWithGroupForFlow[out]: group: {maximalNode: [n13] x.foo, [89,94], PropertyAccessExpression}
                resolveGroupForFlow[in]: [n13] x.foo, [89,94], PropertyAccessExpression, groupIndex:0, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n13] x.foo, [89,94], PropertyAccessExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n13] x.foo, [89,94], PropertyAccessExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.PropertyAccessExpression
                      mrNarrowTypesByPropertyAccessExpression[in]
                        InferRefTypesPreAccess[in] expr: [n13] x.foo, [89,94], PropertyAccessExpression
                          mrNarrowTypes[in] expr:[n16] x, [89,90], Identifier, crit:{kind:notnullundef,negate:false}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: length: 0
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n16] x, [89,90], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                            mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: x },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   isconst: true,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: X
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:19, ename: x }, isconst: true
                            mrNarrowTypesInner[out] expr:[n16] x, [89,90], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: X
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  {
                            mrNarrowTypes[dbg]: failing:    kind: return,
                            mrNarrowTypes[dbg]: failing:    type: never
                            mrNarrowTypes[dbg]: failing:    symtab: [
                            mrNarrowTypes[dbg]: failing:    ]
                            mrNarrowTypes[dbg]: failing:    constraintItem: {
                            mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: failing:       kind: never,
                            mrNarrowTypes[dbg]: failing:      },
                            mrNarrowTypes[dbg]: failing:  }
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: x },
                            mrNarrowTypes[dbg]: unmerged[0]:   isconst: true,
                            mrNarrowTypes[dbg]: unmerged[0]:   type: X
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n16] x, [89,90], Identifier, type: X
                          mrNarrowTypes[out] [n16] x, [89,90], Identifier
                        InferRefTypesPreAccess[dbg] passing: {
                        InferRefTypesPreAccess[dbg] passing:   kind: return,
                        InferRefTypesPreAccess[dbg] passing:   type: X
                        InferRefTypesPreAccess[dbg] passing:   symtab: [
                        InferRefTypesPreAccess[dbg] passing:     {symbol:{ id:19, ename: x },type:X}
                        InferRefTypesPreAccess[dbg] passing:   ]
                        InferRefTypesPreAccess[dbg] passing:   constraintItem: {
                        InferRefTypesPreAccess[dbg] passing:      symbolsInvoled:
                        InferRefTypesPreAccess[dbg] passing:      kind: always,
                        InferRefTypesPreAccess[dbg] passing:     },
                        InferRefTypesPreAccess[dbg] passing: }
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]: {
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:   kind: return,
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symbol: { id:19, ename: x },
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:   isconst: true,
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:   type: X
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symtab: [
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:   ]
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:   constraintItem: {
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:      symbolsInvoled:
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:      kind: always,
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]:     },
                        InferRefTypesPreAccess[dbg] unmergedPassing[0]: }
                        InferRefTypesPreAccess[out]
                      mrNarrowTypesByPropertyAccessExpression[dbg] propSymbol { id:16, ename: foo }, ExportDoesNotSupportDefaultModifier|Property
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0] {
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   kind: return,
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   symbol: { id:16, ename: foo },
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   type: false | true
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   symtab: [
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     {symbol:{ id:16, ename: foo },type:false | true}
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   ]
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   constraintItem: {
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]      symbolsInvoled:
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]      kind: always,
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     },
                      mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0] }
                      mrNarrowTypesByPropertyAccessExpression[out]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: foo },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:false | true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n16] x, [89,90], Identifier, type: X
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n13] x.foo, [89,94], PropertyAccessExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n13] x.foo, [89,94], PropertyAccessExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                    mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:true}
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:      {symbol:{ id:19, ename: x },type:X}
                    mrNarrowTypes[dbg]: failing:      {symbol:{ id:16, ename: foo },type:false}
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: foo },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                    mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:false | true}
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n16] x, [89,90], Identifier, type: X
                  mrNarrowTypes[out] byNode: node: [n13] x.foo, [89,94], PropertyAccessExpression, type: boolean
                  mrNarrowTypes[out] [n13] x.foo, [89,94], PropertyAccessExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n13] x.foo, [89,94], PropertyAccessExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n13] x.foo, [89,94], PropertyAccessExpression, 
              getTypeByMrNarrow[out] expr: [n16] x, [89,90], Identifier -> X
            getFlowTypeOfReference[out]: reference [n16] x, [89,90], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0, return: X
          In getIdentifier(), getFlowTypeOfReference returned X
          checkExpression[out]: [n16] x, [89,90], Identifier -> X
          getFlowTypeOfReference[in]: reference [n13] x.foo, [89,94], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0
            getTypeByMrNarrow[in] expr: [n13] x.foo, [89,94], PropertyAccessExpression
            getTypeByMrNarrowAux[dbg]: reference: [n13] x.foo, [89,94], PropertyAccessExpression, maximalNode: [n13] x.foo, [89,94], PropertyAccessExpression
            getTypeByMrNarrowAux[dbg]: cache hit
            getTypeByMrNarrow[out] expr: [n13] x.foo, [89,94], PropertyAccessExpression -> boolean
          getFlowTypeOfReference[out]: reference [n13] x.foo, [89,94], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0, return: boolean
        checkExpression[out]: [n13] x.foo, [89,94], PropertyAccessExpression -> boolean
        checkExpression[in] node: [n13] x.foo, [89,94], PropertyAccessExpression
          checkExpression[in] node: [n16] x, [89,90], Identifier
            getFlowTypeOfReference[in]: reference [n16] x, [89,90], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0
              getTypeByMrNarrow[in] expr: [n16] x, [89,90], Identifier
              getTypeByMrNarrowAux[dbg]: reference: [n16] x, [89,90], Identifier, maximalNode: [n13] x.foo, [89,94], PropertyAccessExpression
              getTypeByMrNarrowAux[dbg]: cache hit
              getTypeByMrNarrow[out] expr: [n16] x, [89,90], Identifier -> X
            getFlowTypeOfReference[out]: reference [n16] x, [89,90], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0, return: X
          In getIdentifier(), getFlowTypeOfReference returned X
          checkExpression[out]: [n16] x, [89,90], Identifier -> X
          getFlowTypeOfReference[in]: reference [n13] x.foo, [89,94], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0
            getTypeByMrNarrow[in] expr: [n13] x.foo, [89,94], PropertyAccessExpression
            getTypeByMrNarrowAux[dbg]: reference: [n13] x.foo, [89,94], PropertyAccessExpression, maximalNode: [n13] x.foo, [89,94], PropertyAccessExpression
            getTypeByMrNarrowAux[dbg]: cache hit
            getTypeByMrNarrow[out] expr: [n13] x.foo, [89,94], PropertyAccessExpression -> boolean
          getFlowTypeOfReference[out]: reference [n13] x.foo, [89,94], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f9], BranchLabel|Label|Referenced|Shared, branchKind:block, [gftor call depth:0, return: boolean
        checkExpression[out]: [n13] x.foo, [89,94], PropertyAccessExpression -> boolean
        checkSourceElement[in] node: [n28] {
        let y = x.foo;
        y;
    }, [95,136], Block
          checkSourceElement[in] node: [n39] let y = x.foo;, [96,119], VariableStatement
            checkSourceElement[in] node: [n12] y = x.foo, [108,118], VariableDeclaration
              checkVariableLikeDeclaration[in]: node: [n12] y = x.foo, [108,118], VariableDeclaration
                checkExpression[in] node: [n20] x.foo, [112,118], PropertyAccessExpression
                  checkExpression[in] node: [n19] x, [112,114], Identifier
                    getFlowTypeOfReference[in]: reference [n19] x, [112,114], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f6], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0
                      getTypeByMrNarrow[in] expr: [n19] x, [112,114], Identifier
                      getTypeByMrNarrowAux[dbg]: reference: [n19] x, [112,114], Identifier, maximalNode: [n12] y = x.foo, [108,118], VariableDeclaration
                        updateHeapWithGroupForFlow[in]: group: {groupIdx: 1, maximalNode: [n12] y = x.foo, [108,118], VariableDeclaration}. minGroupIdxToAdd: undefined
                          updateHeapWithGroupForFlow[dbg] heap[1=>1] [n12] y = x.foo, [108,118], VariableDeclaration
                        updateHeapWithGroupForFlow[out]: group: {maximalNode: [n12] y = x.foo, [108,118], VariableDeclaration}
                        resolveGroupForFlow[in]: [n12] y = x.foo, [108,118], VariableDeclaration, groupIndex:1, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n13] x.foo, [89,94], PropertyAccessExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:false}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                        resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                        resolveGroupForFlow[dbg] symtab: [
                        resolveGroupForFlow[dbg] symtab:   {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg] symtab:   {symbol:{ id:16, ename: foo },type:true}
                        resolveGroupForFlow[dbg] symtab: ]
                        resolveGroupForFlow[dbg] constraintItem: {
                        resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg] constraintItem:  kind: always,
                        resolveGroupForFlow[dbg] constraintItem: },
                        resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                        CurrentBranchesMapC[0].delete(groupIdx:0,[then,]),  size before delete:1
                          mrNarrowTypes[in] expr:[n12] y = x.foo, [108,118], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                              {symbol:{ id:19, ename: x },type:X}
                              {symbol:{ id:16, ename: foo },type:true}
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n12] y = x.foo, [108,118], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:true}
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypes[in] expr:[n20] x.foo, [112,118], PropertyAccessExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                              mrNarrowTypes[in] refTypesSymtab:
                                [
                                  {symbol:{ id:19, ename: x },type:X}
                                  {symbol:{ id:16, ename: foo },type:true}
                                ]
                              mrNarrowTypes[in] constraintItemIn:
                                {
                                 symbolsInvoled:
                                 kind: always,
                                },
                                mrNarrowTypesInner[in] expr:[n20] x.foo, [112,118], PropertyAccessExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                                mrNarrowTypesInner[in] refTypesSymtab:
                                mrNarrowTypesInner[in] refTypesSymtab:  [
                                mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:true}
                                mrNarrowTypesInner[in] refTypesSymtab:  ]
                                mrNarrowTypesInner[in] constraintItemIn:
                                mrNarrowTypesInner[in] constraintItemIn:  {
                                mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                mrNarrowTypesInner[in] constraintItemIn:  },
                                mrNarrowTypesInner[dbg] case SyntaxKind.PropertyAccessExpression
                                  mrNarrowTypesByPropertyAccessExpression[in]
                                    InferRefTypesPreAccess[in] expr: [n20] x.foo, [112,118], PropertyAccessExpression
                                      mrNarrowTypes[in] expr:[n19] x, [112,114], Identifier, crit:{kind:notnullundef,negate:false}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: length: 0
                                      mrNarrowTypes[in] refTypesSymtab:
                                        [
                                          {symbol:{ id:19, ename: x },type:X}
                                          {symbol:{ id:16, ename: foo },type:true}
                                        ]
                                      mrNarrowTypes[in] constraintItemIn:
                                        {
                                         symbolsInvoled:
                                         kind: always,
                                        },
                                        mrNarrowTypesInner[in] expr:[n19] x, [112,114], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                                        mrNarrowTypesInner[in] refTypesSymtab:
                                        mrNarrowTypesInner[in] refTypesSymtab:  [
                                        mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:true}
                                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                                        mrNarrowTypesInner[in] constraintItemIn:
                                        mrNarrowTypesInner[in] constraintItemIn:  {
                                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                        mrNarrowTypesInner[in] constraintItemIn:  },
                                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: x },
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   isconst: true,
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: X
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:true}
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:19, ename: x }, isconst: true
                                        mrNarrowTypesInner[out] expr:[n19] x, [112,114], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                        mrNarrowTypes[dbg]: passing:  {
                                        mrNarrowTypes[dbg]: passing:    kind: return,
                                        mrNarrowTypes[dbg]: passing:    type: X
                                        mrNarrowTypes[dbg]: passing:    symtab: [
                                        mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:true}
                                        mrNarrowTypes[dbg]: passing:    ]
                                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                        mrNarrowTypes[dbg]: passing:       kind: always,
                                        mrNarrowTypes[dbg]: passing:      },
                                        mrNarrowTypes[dbg]: passing:  }
                                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                        mrNarrowTypes[dbg]: failing:  {
                                        mrNarrowTypes[dbg]: failing:    kind: return,
                                        mrNarrowTypes[dbg]: failing:    type: never
                                        mrNarrowTypes[dbg]: failing:    symtab: [
                                        mrNarrowTypes[dbg]: failing:    ]
                                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                                        mrNarrowTypes[dbg]: failing:       kind: never,
                                        mrNarrowTypes[dbg]: failing:      },
                                        mrNarrowTypes[dbg]: failing:  }
                                        mrNarrowTypes[dbg]: unmerged[0]: {
                                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: x },
                                        mrNarrowTypes[dbg]: unmerged[0]:   isconst: true,
                                        mrNarrowTypes[dbg]: unmerged[0]:   type: X
                                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                        mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:true}
                                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                        mrNarrowTypes[dbg]: unmerged[0]:     },
                                        mrNarrowTypes[dbg]: unmerged[0]: }
                                      mrNarrowTypes[out] byNode: node: [n19] x, [112,114], Identifier, type: X
                                      mrNarrowTypes[out] [n19] x, [112,114], Identifier
                                    InferRefTypesPreAccess[dbg] passing: {
                                    InferRefTypesPreAccess[dbg] passing:   kind: return,
                                    InferRefTypesPreAccess[dbg] passing:   type: X
                                    InferRefTypesPreAccess[dbg] passing:   symtab: [
                                    InferRefTypesPreAccess[dbg] passing:     {symbol:{ id:19, ename: x },type:X}
                                    InferRefTypesPreAccess[dbg] passing:     {symbol:{ id:16, ename: foo },type:true}
                                    InferRefTypesPreAccess[dbg] passing:   ]
                                    InferRefTypesPreAccess[dbg] passing:   constraintItem: {
                                    InferRefTypesPreAccess[dbg] passing:      symbolsInvoled:
                                    InferRefTypesPreAccess[dbg] passing:      kind: always,
                                    InferRefTypesPreAccess[dbg] passing:     },
                                    InferRefTypesPreAccess[dbg] passing: }
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]: {
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   kind: return,
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symbol: { id:19, ename: x },
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   isconst: true,
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   type: X
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symtab: [
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:     {symbol:{ id:19, ename: x },type:X}
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:     {symbol:{ id:16, ename: foo },type:true}
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   ]
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   constraintItem: {
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:      symbolsInvoled:
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:      kind: always,
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:     },
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]: }
                                    InferRefTypesPreAccess[out]
                                  mrNarrowTypesByPropertyAccessExpression[dbg] propSymbol { id:16, ename: foo }, ExportDoesNotSupportDefaultModifier|Property
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0] {
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   kind: return,
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   symbol: { id:16, ename: foo },
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   type: false | true
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   symtab: [
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     {symbol:{ id:19, ename: x },type:X}
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     {symbol:{ id:16, ename: foo },type:true}
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   ]
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   constraintItem: {
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]      symbolsInvoled:
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]      kind: always,
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     },
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0] }
                                  mrNarrowTypesByPropertyAccessExpression[out]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: foo },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                mrNarrowTypesInner[out]:  innerret.byNode: { node: [n19] x, [112,114], Identifier, type: X
                                mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                mrNarrowTypesInner[out] expr:[n20] x.foo, [112,118], PropertyAccessExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                              mrNarrowTypes[dbg]: qdotfallout.length: 0
                              mrNarrowTypes[dbg]: [n20] x.foo, [112,118], PropertyAccessExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                              mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                mrNarrowTypes[dbg]: passing:  {
                                mrNarrowTypes[dbg]: passing:    kind: return,
                                mrNarrowTypes[dbg]: passing:    type: true
                                mrNarrowTypes[dbg]: passing:    symtab: [
                                mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:true}
                                mrNarrowTypes[dbg]: passing:    ]
                                mrNarrowTypes[dbg]: passing:    constraintItem: {
                                mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                mrNarrowTypes[dbg]: passing:       kind: always,
                                mrNarrowTypes[dbg]: passing:      },
                                mrNarrowTypes[dbg]: passing:  }
                              mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                mrNarrowTypes[dbg]: failing:  undefined
                                mrNarrowTypes[dbg]: unmerged[0]: {
                                mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: foo },
                                mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                                mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:true}
                                mrNarrowTypes[dbg]: unmerged[0]:   ]
                                mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                mrNarrowTypes[dbg]: unmerged[0]:     },
                                mrNarrowTypes[dbg]: unmerged[0]: }
                              mrNarrowTypes[out] byNode: node: [n19] x, [112,114], Identifier, type: X
                              mrNarrowTypes[out] byNode: node: [n20] x.foo, [112,118], PropertyAccessExpression, type: true
                              mrNarrowTypes[out] [n20] x.foo, [112,118], PropertyAccessExpression
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:20, ename: y },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:true}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n19] x, [112,114], Identifier, type: X
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n20] x.foo, [112,118], PropertyAccessExpression, type: true
                            mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:20, ename: y }, isconst: false
                            mrNarrowTypesInner[out] expr:[n12] y = x.foo, [108,118], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n12] y = x.foo, [108,118], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: true
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:true}
                            mrNarrowTypes[dbg]: passing:      {symbol:{ id:20, ename: y },type:true}
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  undefined
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:20, ename: y },
                            mrNarrowTypes[dbg]: unmerged[0]:   type: true
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:true}
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n19] x, [112,114], Identifier, type: X
                          mrNarrowTypes[out] byNode: node: [n20] x.foo, [112,118], PropertyAccessExpression, type: true
                          mrNarrowTypes[out] byNode: node: [n12] y = x.foo, [108,118], VariableDeclaration, type: true
                          mrNarrowTypes[out] [n12] y = x.foo, [108,118], VariableDeclaration
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n13] x.foo, [89,94], PropertyAccessExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:false}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] y = x.foo, [108,118], VariableDeclaration]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:20, ename: y },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n19] x, [112,114], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n20] x.foo, [112,118], PropertyAccessExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n12] y = x.foo, [108,118], VariableDeclaration] -> type:true
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                        resolveGroupForFlow[out]: [n12] y = x.foo, [108,118], VariableDeclaration, 
                      getTypeByMrNarrow[out] expr: [n19] x, [112,114], Identifier -> X
                    getFlowTypeOfReference[out]: reference [n19] x, [112,114], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f6], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0, return: X
                  In getIdentifier(), getFlowTypeOfReference returned X
                  checkExpression[out]: [n19] x, [112,114], Identifier -> X
                  getFlowTypeOfReference[in]: reference [n20] x.foo, [112,118], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f6], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0
                    getTypeByMrNarrow[in] expr: [n20] x.foo, [112,118], PropertyAccessExpression
                    getTypeByMrNarrowAux[dbg]: reference: [n20] x.foo, [112,118], PropertyAccessExpression, maximalNode: [n12] y = x.foo, [108,118], VariableDeclaration
                    getTypeByMrNarrowAux[dbg]: cache hit
                    getTypeByMrNarrow[out] expr: [n20] x.foo, [112,118], PropertyAccessExpression -> true
                  getFlowTypeOfReference[out]: reference [n20] x.foo, [112,118], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f6], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0, return: true
                checkExpression[out]: [n20] x.foo, [112,118], PropertyAccessExpression -> true
              checkVariableLikeDeclaration[out]: node: [n12] y = x.foo, [108,118], VariableDeclaration
            checkSourceElement[out]: nodeid: 12
          checkSourceElement[out]: nodeid: 39
          checkSourceElement[in] node: [n40] y;, [119,130], ExpressionStatement
            checkExpression[in] node: [n11] y, [119,129], Identifier
              getFlowTypeOfReference[in]: reference [n11] y, [119,129], Identifier, declaredType: true, initialType: true | undefined, flowContainer: 27, flowNode: [f5], Assignment|Referenced, [n12] y = x.foo, [108,118], VariableDeclaration[gftor call depth:0
                getTypeByMrNarrow[in] expr: [n11] y, [119,129], Identifier
                getTypeByMrNarrowAux[dbg]: reference: [n11] y, [119,129], Identifier, maximalNode: [n11] y, [119,129], Identifier
                  updateHeapWithGroupForFlow[in]: group: {groupIdx: 2, maximalNode: [n11] y, [119,129], Identifier}. minGroupIdxToAdd: undefined
                    updateHeapWithGroupForFlow[dbg] heap[1=>2] [n11] y, [119,129], Identifier
                  updateHeapWithGroupForFlow[out]: group: {maximalNode: [n11] y, [119,129], Identifier}
                  resolveGroupForFlow[in]: [n11] y, [119,129], Identifier, groupIndex:2, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n13] x.foo, [89,94], PropertyAccessExpression]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:0
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] y = x.foo, [108,118], VariableDeclaration]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:20, ename: y },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n19] x, [112,114], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n20] x.foo, [112,118], PropertyAccessExpression] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n12] y = x.foo, [108,118], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                  resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                  resolveGroupForFlow[dbg] symtab: [
                  resolveGroupForFlow[dbg] symtab:   {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg] symtab:   {symbol:{ id:16, ename: foo },type:true}
                  resolveGroupForFlow[dbg] symtab:   {symbol:{ id:20, ename: y },type:true}
                  resolveGroupForFlow[dbg] symtab: ]
                  resolveGroupForFlow[dbg] constraintItem: {
                  resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg] constraintItem:  kind: always,
                  resolveGroupForFlow[dbg] constraintItem: },
                  resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  CurrentBranchesMapC[0].delete(groupIdx:1,<undefined>),  size before delete:2
                    mrNarrowTypes[in] expr:[n11] y, [119,129], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                        {symbol:{ id:19, ename: x },type:X}
                        {symbol:{ id:16, ename: foo },type:true}
                        {symbol:{ id:20, ename: y },type:true}
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n11] y, [119,129], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:true}
                      mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:20, ename: y },type:true}
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:20, ename: y },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:true}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:20, ename: y },type:true}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:20, ename: y }, isconst: false
                      mrNarrowTypesInner[out] expr:[n11] y, [119,129], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n11] y, [119,129], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: true
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:true}
                      mrNarrowTypes[dbg]: passing:      {symbol:{ id:20, ename: y },type:true}
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:20, ename: y },
                      mrNarrowTypes[dbg]: unmerged[0]:   type: true
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:true}
                      mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:20, ename: y },type:true}
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n11] y, [119,129], Identifier, type: true
                    mrNarrowTypes[out] [n11] y, [119,129], Identifier
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n13] x.foo, [89,94], PropertyAccessExpression]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:0
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n11] y, [119,129], Identifier]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:20, ename: y },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n19] x, [112,114], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n20] x.foo, [112,118], PropertyAccessExpression] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n12] y = x.foo, [108,118], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n11] y, [119,129], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                  resolveGroupForFlow[out]: [n11] y, [119,129], Identifier, 
                getTypeByMrNarrow[out] expr: [n11] y, [119,129], Identifier -> true
              getFlowTypeOfReference[out]: reference [n11] y, [119,129], Identifier, declaredType: true, initialType: true | undefined, flowContainer: 27, flowNode: [f5], Assignment|Referenced, [n12] y = x.foo, [108,118], VariableDeclaration[gftor call depth:0, return: true
            In getIdentifier(), getFlowTypeOfReference returned true
            checkExpression[out]: [n11] y, [119,129], Identifier -> true
          checkSourceElement[out]: nodeid: 40
        checkSourceElement[out]: nodeid: 28
        checkSourceElement[in] node: [n29] {
        let z = x.foo;
        z;
    }, [145,187], Block
          checkSourceElement[in] node: [n41] let z = x.foo;, [147,170], VariableStatement
            checkSourceElement[in] node: [n15] z = x.foo, [159,169], VariableDeclaration
              checkVariableLikeDeclaration[in]: node: [n15] z = x.foo, [159,169], VariableDeclaration
                checkExpression[in] node: [n24] x.foo, [163,169], PropertyAccessExpression
                  checkExpression[in] node: [n23] x, [163,165], Identifier
                    getFlowTypeOfReference[in]: reference [n23] x, [163,165], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f14], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0
                      getTypeByMrNarrow[in] expr: [n23] x, [163,165], Identifier
                      getTypeByMrNarrowAux[dbg]: reference: [n23] x, [163,165], Identifier, maximalNode: [n15] z = x.foo, [159,169], VariableDeclaration
                        updateHeapWithGroupForFlow[in]: group: {groupIdx: 3, maximalNode: [n15] z = x.foo, [159,169], VariableDeclaration}. minGroupIdxToAdd: undefined
                          updateHeapWithGroupForFlow[dbg] heap[1=>3] [n15] z = x.foo, [159,169], VariableDeclaration
                        updateHeapWithGroupForFlow[out]: group: {maximalNode: [n15] z = x.foo, [159,169], VariableDeclaration}
                        resolveGroupForFlow[in]: [n15] z = x.foo, [159,169], VariableDeclaration, groupIndex:3, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n13] x.foo, [89,94], PropertyAccessExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           {symbol:{ id:16, ename: foo },type:false}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n11] y, [119,129], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:20, ename: y },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n19] x, [112,114], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n20] x.foo, [112,118], PropertyAccessExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n12] y = x.foo, [108,118], VariableDeclaration] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n11] y, [119,129], Identifier] -> type:true
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                        resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                        resolveGroupForFlow[dbg] symtab: [
                        resolveGroupForFlow[dbg] symtab:   {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg] symtab:   {symbol:{ id:16, ename: foo },type:false}
                        resolveGroupForFlow[dbg] symtab: ]
                        resolveGroupForFlow[dbg] constraintItem: {
                        resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg] constraintItem:  kind: always,
                        resolveGroupForFlow[dbg] constraintItem: },
                        resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                        CurrentBranchesMapC[0].delete(groupIdx:0,[else,]),  size before delete:2
                          mrNarrowTypes[in] expr:[n15] z = x.foo, [159,169], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                              {symbol:{ id:19, ename: x },type:X}
                              {symbol:{ id:16, ename: foo },type:false}
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n15] z = x.foo, [159,169], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:false}
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypes[in] expr:[n24] x.foo, [163,169], PropertyAccessExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                              mrNarrowTypes[in] refTypesSymtab:
                                [
                                  {symbol:{ id:19, ename: x },type:X}
                                  {symbol:{ id:16, ename: foo },type:false}
                                ]
                              mrNarrowTypes[in] constraintItemIn:
                                {
                                 symbolsInvoled:
                                 kind: always,
                                },
                                mrNarrowTypesInner[in] expr:[n24] x.foo, [163,169], PropertyAccessExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                                mrNarrowTypesInner[in] refTypesSymtab:
                                mrNarrowTypesInner[in] refTypesSymtab:  [
                                mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:false}
                                mrNarrowTypesInner[in] refTypesSymtab:  ]
                                mrNarrowTypesInner[in] constraintItemIn:
                                mrNarrowTypesInner[in] constraintItemIn:  {
                                mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                mrNarrowTypesInner[in] constraintItemIn:  },
                                mrNarrowTypesInner[dbg] case SyntaxKind.PropertyAccessExpression
                                  mrNarrowTypesByPropertyAccessExpression[in]
                                    InferRefTypesPreAccess[in] expr: [n24] x.foo, [163,169], PropertyAccessExpression
                                      mrNarrowTypes[in] expr:[n23] x, [163,165], Identifier, crit:{kind:notnullundef,negate:false}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: length: 0
                                      mrNarrowTypes[in] refTypesSymtab:
                                        [
                                          {symbol:{ id:19, ename: x },type:X}
                                          {symbol:{ id:16, ename: foo },type:false}
                                        ]
                                      mrNarrowTypes[in] constraintItemIn:
                                        {
                                         symbolsInvoled:
                                         kind: always,
                                        },
                                        mrNarrowTypesInner[in] expr:[n23] x, [163,165], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                                        mrNarrowTypesInner[in] refTypesSymtab:
                                        mrNarrowTypesInner[in] refTypesSymtab:  [
                                        mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:false}
                                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                                        mrNarrowTypesInner[in] constraintItemIn:
                                        mrNarrowTypesInner[in] constraintItemIn:  {
                                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                        mrNarrowTypesInner[in] constraintItemIn:  },
                                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: x },
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   isconst: true,
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: X
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:false}
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:19, ename: x }, isconst: true
                                        mrNarrowTypesInner[out] expr:[n23] x, [163,165], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                        mrNarrowTypes[dbg]: passing:  {
                                        mrNarrowTypes[dbg]: passing:    kind: return,
                                        mrNarrowTypes[dbg]: passing:    type: X
                                        mrNarrowTypes[dbg]: passing:    symtab: [
                                        mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:false}
                                        mrNarrowTypes[dbg]: passing:    ]
                                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                        mrNarrowTypes[dbg]: passing:       kind: always,
                                        mrNarrowTypes[dbg]: passing:      },
                                        mrNarrowTypes[dbg]: passing:  }
                                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                        mrNarrowTypes[dbg]: failing:  {
                                        mrNarrowTypes[dbg]: failing:    kind: return,
                                        mrNarrowTypes[dbg]: failing:    type: never
                                        mrNarrowTypes[dbg]: failing:    symtab: [
                                        mrNarrowTypes[dbg]: failing:    ]
                                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                                        mrNarrowTypes[dbg]: failing:       kind: never,
                                        mrNarrowTypes[dbg]: failing:      },
                                        mrNarrowTypes[dbg]: failing:  }
                                        mrNarrowTypes[dbg]: unmerged[0]: {
                                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: x },
                                        mrNarrowTypes[dbg]: unmerged[0]:   isconst: true,
                                        mrNarrowTypes[dbg]: unmerged[0]:   type: X
                                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                        mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                                        mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:false}
                                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                        mrNarrowTypes[dbg]: unmerged[0]:     },
                                        mrNarrowTypes[dbg]: unmerged[0]: }
                                      mrNarrowTypes[out] byNode: node: [n23] x, [163,165], Identifier, type: X
                                      mrNarrowTypes[out] [n23] x, [163,165], Identifier
                                    InferRefTypesPreAccess[dbg] passing: {
                                    InferRefTypesPreAccess[dbg] passing:   kind: return,
                                    InferRefTypesPreAccess[dbg] passing:   type: X
                                    InferRefTypesPreAccess[dbg] passing:   symtab: [
                                    InferRefTypesPreAccess[dbg] passing:     {symbol:{ id:19, ename: x },type:X}
                                    InferRefTypesPreAccess[dbg] passing:     {symbol:{ id:16, ename: foo },type:false}
                                    InferRefTypesPreAccess[dbg] passing:   ]
                                    InferRefTypesPreAccess[dbg] passing:   constraintItem: {
                                    InferRefTypesPreAccess[dbg] passing:      symbolsInvoled:
                                    InferRefTypesPreAccess[dbg] passing:      kind: always,
                                    InferRefTypesPreAccess[dbg] passing:     },
                                    InferRefTypesPreAccess[dbg] passing: }
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]: {
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   kind: return,
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symbol: { id:19, ename: x },
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   isconst: true,
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   type: X
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symtab: [
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:     {symbol:{ id:19, ename: x },type:X}
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:     {symbol:{ id:16, ename: foo },type:false}
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   ]
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:   constraintItem: {
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:      symbolsInvoled:
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:      kind: always,
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]:     },
                                    InferRefTypesPreAccess[dbg] unmergedPassing[0]: }
                                    InferRefTypesPreAccess[out]
                                  mrNarrowTypesByPropertyAccessExpression[dbg] propSymbol { id:16, ename: foo }, ExportDoesNotSupportDefaultModifier|Property
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0] {
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   kind: return,
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   symbol: { id:16, ename: foo },
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   type: false | true
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   symtab: [
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     {symbol:{ id:19, ename: x },type:X}
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     {symbol:{ id:16, ename: foo },type:false}
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   ]
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]   constraintItem: {
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]      symbolsInvoled:
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]      kind: always,
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0]     },
                                  mrNarrowTypesByPropertyAccessExpression[out] arrRefTypesTableReturn[0] }
                                  mrNarrowTypesByPropertyAccessExpression[out]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: foo },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                mrNarrowTypesInner[out]:  innerret.byNode: { node: [n23] x, [163,165], Identifier, type: X
                                mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                mrNarrowTypesInner[out] expr:[n24] x.foo, [163,169], PropertyAccessExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                              mrNarrowTypes[dbg]: qdotfallout.length: 0
                              mrNarrowTypes[dbg]: [n24] x.foo, [163,169], PropertyAccessExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                              mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                mrNarrowTypes[dbg]: passing:  {
                                mrNarrowTypes[dbg]: passing:    kind: return,
                                mrNarrowTypes[dbg]: passing:    type: false
                                mrNarrowTypes[dbg]: passing:    symtab: [
                                mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:false}
                                mrNarrowTypes[dbg]: passing:    ]
                                mrNarrowTypes[dbg]: passing:    constraintItem: {
                                mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                mrNarrowTypes[dbg]: passing:       kind: always,
                                mrNarrowTypes[dbg]: passing:      },
                                mrNarrowTypes[dbg]: passing:  }
                              mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                mrNarrowTypes[dbg]: failing:  undefined
                                mrNarrowTypes[dbg]: unmerged[0]: {
                                mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: foo },
                                mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                                mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                                mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:false}
                                mrNarrowTypes[dbg]: unmerged[0]:   ]
                                mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                mrNarrowTypes[dbg]: unmerged[0]:     },
                                mrNarrowTypes[dbg]: unmerged[0]: }
                              mrNarrowTypes[out] byNode: node: [n23] x, [163,165], Identifier, type: X
                              mrNarrowTypes[out] byNode: node: [n24] x.foo, [163,169], PropertyAccessExpression, type: false
                              mrNarrowTypes[out] [n24] x.foo, [163,169], PropertyAccessExpression
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:21, ename: z },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:false}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n23] x, [163,165], Identifier, type: X
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n24] x.foo, [163,169], PropertyAccessExpression, type: false
                            mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:21, ename: z }, isconst: false
                            mrNarrowTypesInner[out] expr:[n15] z = x.foo, [159,169], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n15] z = x.foo, [159,169], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: false
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:false}
                            mrNarrowTypes[dbg]: passing:      {symbol:{ id:21, ename: z },type:false}
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  undefined
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:21, ename: z },
                            mrNarrowTypes[dbg]: unmerged[0]:   type: false
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                            mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:false}
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n23] x, [163,165], Identifier, type: X
                          mrNarrowTypes[out] byNode: node: [n24] x.foo, [163,169], PropertyAccessExpression, type: false
                          mrNarrowTypes[out] byNode: node: [n15] z = x.foo, [159,169], VariableDeclaration, type: false
                          mrNarrowTypes[out] [n15] z = x.foo, [159,169], VariableDeclaration
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n11] y, [119,129], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:20, ename: y },type:true}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] z = x.foo, [159,169], VariableDeclaration]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:3
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:false}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:21, ename: z },type:false}
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n19] x, [112,114], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n20] x.foo, [112,118], PropertyAccessExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n12] y = x.foo, [108,118], VariableDeclaration] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n11] y, [119,129], Identifier] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n23] x, [163,165], Identifier] -> type:X
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] x.foo, [163,169], PropertyAccessExpression] -> type:false
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n15] z = x.foo, [159,169], VariableDeclaration] -> type:false
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                        resolveGroupForFlow[out]: [n15] z = x.foo, [159,169], VariableDeclaration, 
                      getTypeByMrNarrow[out] expr: [n23] x, [163,165], Identifier -> X
                    getFlowTypeOfReference[out]: reference [n23] x, [163,165], Identifier, declaredType: X, initialType: X, flowContainer: 27, flowNode: [f14], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0, return: X
                  In getIdentifier(), getFlowTypeOfReference returned X
                  checkExpression[out]: [n23] x, [163,165], Identifier -> X
                  getFlowTypeOfReference[in]: reference [n24] x.foo, [163,169], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f14], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0
                    getTypeByMrNarrow[in] expr: [n24] x.foo, [163,169], PropertyAccessExpression
                    getTypeByMrNarrowAux[dbg]: reference: [n24] x.foo, [163,169], PropertyAccessExpression, maximalNode: [n15] z = x.foo, [159,169], VariableDeclaration
                    getTypeByMrNarrowAux[dbg]: cache hit
                    getTypeByMrNarrow[out] expr: [n24] x.foo, [163,169], PropertyAccessExpression -> false
                  getFlowTypeOfReference[out]: reference [n24] x.foo, [163,169], PropertyAccessExpression, declaredType: boolean, initialType: boolean, flowContainer: -1, flowNode: [f14], BranchLabel|Label|Referenced, branchKind:block, [gftor call depth:0, return: false
                checkExpression[out]: [n24] x.foo, [163,169], PropertyAccessExpression -> false
              checkVariableLikeDeclaration[out]: node: [n15] z = x.foo, [159,169], VariableDeclaration
            checkSourceElement[out]: nodeid: 15
          checkSourceElement[out]: nodeid: 41
          checkSourceElement[in] node: [n42] z;, [170,181], ExpressionStatement
            checkExpression[in] node: [n14] z, [170,180], Identifier
              getFlowTypeOfReference[in]: reference [n14] z, [170,180], Identifier, declaredType: false, initialType: false | undefined, flowContainer: 27, flowNode: [f13], Assignment|Referenced, [n15] z = x.foo, [159,169], VariableDeclaration[gftor call depth:0
                getTypeByMrNarrow[in] expr: [n14] z, [170,180], Identifier
                getTypeByMrNarrowAux[dbg]: reference: [n14] z, [170,180], Identifier, maximalNode: [n14] z, [170,180], Identifier
                  updateHeapWithGroupForFlow[in]: group: {groupIdx: 4, maximalNode: [n14] z, [170,180], Identifier}. minGroupIdxToAdd: undefined
                    updateHeapWithGroupForFlow[dbg] heap[1=>4] [n14] z, [170,180], Identifier
                  updateHeapWithGroupForFlow[out]: group: {maximalNode: [n14] z, [170,180], Identifier}
                  resolveGroupForFlow[in]: [n14] z, [170,180], Identifier, groupIndex:4, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n11] y, [119,129], Identifier]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:20, ename: y },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] z = x.foo, [159,169], VariableDeclaration]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:3
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:21, ename: z },type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n19] x, [112,114], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n20] x.foo, [112,118], PropertyAccessExpression] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n12] y = x.foo, [108,118], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n11] y, [119,129], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n23] x, [163,165], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] x.foo, [163,169], PropertyAccessExpression] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n15] z = x.foo, [159,169], VariableDeclaration] -> type:false
                  resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                  resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                  resolveGroupForFlow[dbg] symtab: [
                  resolveGroupForFlow[dbg] symtab:   {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg] symtab:   {symbol:{ id:16, ename: foo },type:false}
                  resolveGroupForFlow[dbg] symtab:   {symbol:{ id:21, ename: z },type:false}
                  resolveGroupForFlow[dbg] symtab: ]
                  resolveGroupForFlow[dbg] constraintItem: {
                  resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg] constraintItem:  kind: always,
                  resolveGroupForFlow[dbg] constraintItem: },
                  resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  CurrentBranchesMapC[0].delete(groupIdx:3,<undefined>),  size before delete:2
                    mrNarrowTypes[in] expr:[n14] z, [170,180], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                        {symbol:{ id:19, ename: x },type:X}
                        {symbol:{ id:16, ename: foo },type:false}
                        {symbol:{ id:21, ename: z },type:false}
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n14] z, [170,180], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:16, ename: foo },type:false}
                      mrNarrowTypesInner[in] refTypesSymtab:    {symbol:{ id:21, ename: z },type:false}
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:21, ename: z },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:16, ename: foo },type:false}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     {symbol:{ id:21, ename: z },type:false}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:21, ename: z }, isconst: false
                      mrNarrowTypesInner[out] expr:[n14] z, [170,180], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n14] z, [170,180], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: false
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:      {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypes[dbg]: passing:      {symbol:{ id:16, ename: foo },type:false}
                      mrNarrowTypes[dbg]: passing:      {symbol:{ id:21, ename: z },type:false}
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:21, ename: z },
                      mrNarrowTypes[dbg]: unmerged[0]:   type: false
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:19, ename: x },type:X}
                      mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:16, ename: foo },type:false}
                      mrNarrowTypes[dbg]: unmerged[0]:     {symbol:{ id:21, ename: z },type:false}
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n14] z, [170,180], Identifier, type: false
                    mrNarrowTypes[out] [n14] z, [170,180], Identifier
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n11] y, [119,129], Identifier]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:20, ename: y },type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] z, [170,180], Identifier]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:19, ename: x },type:X}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:16, ename: foo },type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           {symbol:{ id:21, ename: z },type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] x, [89,90], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n13] x.foo, [89,94], PropertyAccessExpression] -> type:boolean
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n19] x, [112,114], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n20] x.foo, [112,118], PropertyAccessExpression] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n12] y = x.foo, [108,118], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n11] y, [119,129], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n23] x, [163,165], Identifier] -> type:X
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] x.foo, [163,169], PropertyAccessExpression] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n15] z = x.foo, [159,169], VariableDeclaration] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n14] z, [170,180], Identifier] -> type:false
                  resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                  resolveGroupForFlow[out]: [n14] z, [170,180], Identifier, 
                getTypeByMrNarrow[out] expr: [n14] z, [170,180], Identifier -> false
              getFlowTypeOfReference[out]: reference [n14] z, [170,180], Identifier, declaredType: false, initialType: false | undefined, flowContainer: 27, flowNode: [f13], Assignment|Referenced, [n15] z = x.foo, [159,169], VariableDeclaration[gftor call depth:0, return: false
            In getIdentifier(), getFlowTypeOfReference returned false
            checkExpression[out]: [n14] z, [170,180], Identifier -> false
          checkSourceElement[out]: nodeid: 42
        checkSourceElement[out]: nodeid: 29
      checkSourceElement[out]: nodeid: 38
    checkSourceElement[out]: nodeid: 37
  checkSourceElement[out]: nodeid: 27
  checkSourceElement[in] node: [n43] , [189,189], EndOfFileToken
  checkSourceElement[out]: nodeid: 43
_caxnc-prop-0001.ts, time(ms): 167, myMaxDepth: 0
