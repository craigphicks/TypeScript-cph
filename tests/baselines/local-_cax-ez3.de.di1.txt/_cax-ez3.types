=== tests/cases/compiler/_cax-ez3.ts ===
declare type Foo = { 
>Foo : { foo(x?: number): number[]; foo(x?: string, y?: string): string[]; }

    foo(x?:number):number[] 
>foo : { (x?: number): number[]; (x?: string | undefined, y?: string | undefined): string[]; }
>x : number | undefined

    foo(x?:string,y?:string):string[] 
>foo : { (x?: number | undefined): number[]; (x?: string, y?: string): string[]; }
>x : string | undefined
>y : string | undefined

};
declare type Boo = { 
>Boo : { foo(x?: bigint): bigint[]; }

    foo(x?:bigint):bigint[]  
>foo : (x?: bigint) => bigint[]
>x : bigint | undefined

};
declare const obj: Readonly<Foo> | Readonly<Boo> | undefined;
>obj : Readonly<Foo> | Readonly<Boo> | undefined

declare const okobj: Readonly<Foo> | Readonly<Boo>;
>okobj : Readonly<Foo> | Readonly<Boo>

const isFoo = obj?.foo();
>isFoo : number[] | bigint[] | undefined
>obj?.foo() : number[] | bigint[] | undefined
>obj?.foo : { (x?: number | undefined): number[]; (x?: string | undefined, y?: string | undefined): string[]; } | ((x?: bigint | undefined) => bigint[]) | undefined
>obj : Readonly<Foo> | Readonly<Boo> | undefined
>foo : { (x?: number | undefined): number[]; (x?: string | undefined, y?: string | undefined): string[]; } | ((x?: bigint | undefined) => bigint[]) | undefined

//let x: Readonly<Foo> | Readonly<Boo> | undefined;
if (isFoo) {
>isFoo : number[] | bigint[] | undefined

    // @ special
    let x = obj;
>x : Readonly<Foo> | Readonly<Boo> | undefined
>obj : Readonly<Foo> | Readonly<Boo> | undefined

    let y = x.foo;
>y : { (x?: number | undefined): number[]; (x?: string | undefined, y?: string | undefined): string[]; } | ((x?: bigint | undefined) => bigint[])
>x.foo : { (x?: number | undefined): number[]; (x?: string | undefined, y?: string | undefined): string[]; } | ((x?: bigint | undefined) => bigint[])
>x : Readonly<Foo> | Readonly<Boo> | undefined
>foo : { (x?: number | undefined): number[]; (x?: string | undefined, y?: string | undefined): string[]; } | ((x?: bigint | undefined) => bigint[])

    let z = y();
>z : number[] | bigint[]
>y() : number[] | bigint[]
>y : { (x?: number | undefined): number[]; (x?: string | undefined, y?: string | undefined): string[]; } | ((x?: bigint | undefined) => bigint[])

    console.log(z);
>console.log(z) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>z : number[] | bigint[]
} 
isFoo;
>isFoo : number[] | bigint[] | undefined



// else {
//     // @ special
//     obj.foo;
// }

