=== tests/cases/conformance/_caxnc/_caxnc-arrayLiteralExpression-013.ts ===
declare const c: boolean;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-013.ts, 0, 13))

const x: readonly[boolean,boolean] = c ? [c,c] as const : [c,c] as const;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-013.ts, 2, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-013.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-013.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-013.ts, 0, 13))
>const : Symbol(const)
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-013.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-013.ts, 0, 13))
>const : Symbol(const)

if (c) {
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-013.ts, 0, 13))

    x;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-013.ts, 2, 5))

    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-013.ts, 2, 5))
>0 : Symbol(0)

    x[1];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-013.ts, 2, 5))
>1 : Symbol(1)

    let x0 = x[0];
>x0 : Symbol(x0, Decl(_caxnc-arrayLiteralExpression-013.ts, 8, 7))
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-013.ts, 2, 5))
>0 : Symbol(0)

    let x1 = x[1];
>x1 : Symbol(x1, Decl(_caxnc-arrayLiteralExpression-013.ts, 9, 7))
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-013.ts, 2, 5))
>1 : Symbol(1)

    x0;
>x0 : Symbol(x0, Decl(_caxnc-arrayLiteralExpression-013.ts, 8, 7))

    x1;
>x1 : Symbol(x1, Decl(_caxnc-arrayLiteralExpression-013.ts, 9, 7))
}

