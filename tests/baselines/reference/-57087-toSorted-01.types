//// [tests/cases/compiler/-test/-57087-toSorted-01.ts] ////

=== -57087-toSorted-01.ts ===
// interface Arr<T> {
//     toSorted(compareFn?: (a: T, b: T) => number): T[];
// }

// declare const arr: Arr<number> | Arr<string>;/workspaces/ts+dt/-test


const f = (compareFn?: ((
>f : (compareFn?: ((a: {    id: number;    description: null;} | {    id: number;    description: string;}, b: {    id: number;    description: null;} | {    id: number;    description: string;}) => number) | undefined) => ({ id: number; description: null; } | { id: number; description: string; })[]
>(compareFn?: ((    a: { id: number; description: null; } | { id: number; description: string; },    b: { id: number; description: null; } | { id: number; description: string; }) => number) | undefined) => {    return 0 as any as ({ id: number; description: null; } | { id: number; description: string; })[]} : (compareFn?: ((a: {    id: number;    description: null;} | {    id: number;    description: string;}, b: {    id: number;    description: null;} | {    id: number;    description: string;}) => number) | undefined) => ({ id: number; description: null; } | { id: number; description: string; })[]
>compareFn : ((a: {    id: number;    description: null;} | {    id: number;    description: string;}, b: {    id: number;    description: null;} | {    id: number;    description: string;}) => number) | undefined

    a: { id: number; description: null; } | { id: number; description: string; },
>a : { id: number; description: null; } | { id: number; description: string; }
>id : number
>description : null
>id : number
>description : string

    b: { id: number; description: null; } | { id: number; description: string; }) => number) | undefined) => {
>b : { id: number; description: null; } | { id: number; description: string; }
>id : number
>description : null
>id : number
>description : string

    return 0 as any as ({ id: number; description: null; } | { id: number; description: string; })[]
>0 as any as ({ id: number; description: null; } | { id: number; description: string; })[] : ({ id: number; description: null; } | { id: number; description: string; })[]
>0 as any : any
>0 : 0
>id : number
>description : null
>id : number
>description : string

};


type F1 =  (compareFn?: ((a: { id: number; }, b: { id: number; }) => number) | undefined) =>
>F1 : (compareFn?: ((a: {    id: number;}, b: {    id: number;}) => number) | undefined) => {    id: number;}[] & {    id: number;    description: string | null;}[]
>compareFn : ((a: {    id: number;}, b: {    id: number;}) => number) | undefined
>a : { id: number; }
>id : number
>b : { id: number; }
>id : number

            { id: number; }[] & { id: number; description: string | null; }[];
>id : number
>id : number
>description : string | null

type F2 = (compareFn?: ((a: { id: number; description: string | null; }, b: { id: number; description: string | null; }) => number) | undefined) =>
>F2 : (compareFn?: ((a: {    id: number;    description: string | null;}, b: {    id: number;    description: string | null;}) => number) | undefined) => {    id: number;}[] & {    id: number;    description: string | null;}[]
>compareFn : ((a: {    id: number;    description: string | null;}, b: {    id: number;    description: string | null;}) => number) | undefined
>a : { id: number; description: string | null; }
>id : number
>description : string | null
>b : { id: number; description: string | null; }
>id : number
>description : string | null

            { id: number; }[]& { id: number; description: string | null; }[]
>id : number
>id : number
>description : string | null

type F = F1 & F2;
>F : F1 & F2

f satisfies F;
>f satisfies F : (compareFn?: ((a: { id: number; description: null; } | { id: number; description: string; }, b: { id: number; description: null; } | { id: number; description: string; }) => number) | undefined) => ({ id: number; description: null; } | { id: number; description: string; })[]
>f : (compareFn?: ((a: { id: number; description: null; } | { id: number; description: string; }, b: { id: number; description: null; } | { id: number; description: string; }) => number) | undefined) => ({ id: number; description: null; } | { id: number; description: string; })[]

