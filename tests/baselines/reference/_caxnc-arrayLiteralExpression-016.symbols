=== tests/cases/conformance/_caxnc/_caxnc-arrayLiteralExpression-016.ts ===
declare const c: true;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))

const u = [c,c];
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-016.ts, 1, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))

const v = [c,c] as const;
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-016.ts, 2, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))
>const : Symbol(const)

const w: readonly[boolean,boolean] = [c,c];
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-016.ts, 3, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))

const x: readonly[boolean,boolean] = [c,c] as const;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-016.ts, 4, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-016.ts, 0, 13))
>const : Symbol(const)

if (u[0]) {
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-016.ts, 1, 5))

    u;
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-016.ts, 1, 5))

    u[0];
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-016.ts, 1, 5))

    u[1];
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-016.ts, 1, 5))
}
if (v[0]) {
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-016.ts, 2, 5))
>0 : Symbol(0)

    v;
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-016.ts, 2, 5))

    v[0];
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-016.ts, 2, 5))
>0 : Symbol(0)

    v[1];
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-016.ts, 2, 5))
>1 : Symbol(1)
}
if (w[0]) {
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-016.ts, 3, 5))
>0 : Symbol(0)

    w;
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-016.ts, 3, 5))

    w[0];
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-016.ts, 3, 5))
>0 : Symbol(0)

    w[1];
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-016.ts, 3, 5))
>1 : Symbol(1)
}
if (x[0]) {
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-016.ts, 4, 5))
>0 : Symbol(0)

    x;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-016.ts, 4, 5))

    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-016.ts, 4, 5))
>0 : Symbol(0)

    x[1];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-016.ts, 4, 5))
>1 : Symbol(1)
}

