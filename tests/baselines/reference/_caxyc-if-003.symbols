=== tests/cases/conformance/_caxyc/_caxyc-if-003.ts ===
declare const c1: 0 | 1;
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))

declare const c2: 0 | 1;
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))

if (c1 && c2) {
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))

    c1;
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))

    c2; 
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))
}
else if (c1) {
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))

    c1;
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))

    c2;
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))
} 
else if (c2) {
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))

    c1;
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))

    c2;
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))
}
else {
    c1;
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))

    c2;
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))
}
c1;
>c1 : Symbol(c1, Decl(_caxyc-if-003.ts, 0, 13))

c2;
>c2 : Symbol(c2, Decl(_caxyc-if-003.ts, 1, 13))

// expect
// if (c1 && c2) {
// >c1 && c2 : 0 | 1
// >c1 : 0 | 1
// >c2 : 0 | 1

//     c1;
// >c1 : 1

//     c2; 
// >c2 : 1
// }
// else if (c1) {
// >c1 : 0 | 1

//     c1;
// >c1 : 1

//     c2;
// >c2 : 0
// } 
// else if (c2) {
// >c2 : 0 | 1

//     c1;
// >c1 : 0

//     c2;
// >c2 : 1
// }
// else {
//     c1;
// >c1 : 0

//     c2;
// >c2 : 0
// }
// c1;
// >c1 : 0 | 1

// c2;
// >c2 : 0 | 1
    
