//// [tests/cases/compiler/jsxFragmentFactoryNoUnusedLocals.tsx] ////

=== Performance Stats ===
Assignability cache: 2,500
Type Count: 5,000
Instantiation count: 50,000
Symbol count: 50,000

=== jsxFragmentFactoryNoUnusedLocals.tsx ===
/// <reference path="react16.d.ts" />
import { Fragment, createElement } from "react"
>Fragment : import("react").ComponentType<{}>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>createElement : { (type: "input", props?: (InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement>) | null, ...children: ReactNode[]): import("react").DetailedReactHTMLElement<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>; <P extends import("react").HTMLAttributes<T>, T extends HTMLElement>(type: keyof ReactHTML, props?: (ClassAttributes<T> & P) | null, ...children: ReactNode[]): import("react").DetailedReactHTMLElement<P, T>; <P_1 extends import("react").SVGAttributes<T_1>, T_1 extends SVGElement>(type: keyof ReactSVG, props?: (ClassAttributes<T_1> & P_1) | null, ...children: ReactNode[]): import("react").ReactSVGElement; <P_2 extends import("react").DOMAttributes<T_2>, T_2 extends Element>(type: string, props?: (ClassAttributes<T_2> & P_2) | null, ...children: ReactNode[]): import("react").DOMElement<P_2, T_2>; <P_3>(type: SFC<P_3>, props?: (Attributes & P_3) | null, ...children: ReactNode[]): import("react").SFCElement<P_3>; <P_4>(type: ClassType<P_4, ClassicComponent<P_4, ComponentState>, ClassicComponentClass<P_4>>, props?: (ClassAttributes<ClassicComponent<P_4, ComponentState>> & P_4) | null, ...children: ReactNode[]): import("react").CElement<P_4, import("react").ClassicComponent<P_4, any>>; <P_5, T_3 extends import("react").Component<P_5, any, any>, C extends import("react").ComponentClass<P_5, any>>(type: ClassType<P_5, T_3, C>, props?: (ClassAttributes<T_3> & P_5) | null, ...children: ReactNode[]): import("react").CElement<P_5, T_3>; <P_6>(type: SFC<P_6> | ComponentClass<P_6> | string, props?: (Attributes & P_6) | null, ...children: ReactNode[]): import("react").ReactElement<P_6>; }


type CounterProps = {
>CounterProps : CounterProps
>             : ^^^^^^^^^^^^

    count?: number
>count : number
>      : ^^^^^^
}

export function Counter({ count = 0 }: CounterProps) {
>Counter : ({ count }: CounterProps) => JSX.Element
>        : ^         ^^            ^^^^^^^^^^^^^^^^
>count : number
>      : ^^^^^^
>0 : 0
>  : ^

    const [cnt, setCnt] = null as any;
>cnt : any
>    : ^^^
>setCnt : any
>       : ^^^
>null as any : any

    return <>
><>        <p>{cnt}</p>        <button onClick={() => setCnt((prev) => prev + 1)} type="button">Update</button>    </> : JSX.Element
>                                                                                                                      : ^^^^^^^^^^^

        <p>{cnt}</p>
><p>{cnt}</p> : JSX.Element
>             : ^^^^^^^^^^^
>p : any
>  : ^^^
>cnt : any
>p : any
>  : ^^^

        <button onClick={() => setCnt((prev) => prev + 1)} type="button">Update</button>
><button onClick={() => setCnt((prev) => prev + 1)} type="button">Update</button> : JSX.Element
>                                                                                 : ^^^^^^^^^^^
>button : any
>       : ^^^
>onClick : () => any
>        : ^^^^^^^^^
>() => setCnt((prev) => prev + 1) : () => any
>                                 : ^^^^^^^^^
>setCnt((prev) => prev + 1) : any
>setCnt : any
>(prev) => prev + 1 : (prev: any) => any
>                   : ^    ^^^^^^^^^^^^^
>prev : any
>prev + 1 : any
>prev : any
>1 : 1
>  : ^
>type : string
>     : ^^^^^^
>button : any
>       : ^^^

    </>
}
