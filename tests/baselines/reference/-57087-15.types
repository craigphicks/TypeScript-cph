//// [tests/cases/compiler/-test/-57087-15.ts] ////

=== -57087-15.ts ===
declare const foo: { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>x : 1
>x : 2
>x : 3
>x : number

interface C {
    (x:1):"1";
>x : 1

    (x:2):"20";
>x : 2

    (x:number):number;
>x : number

    //(x:number):"1"|"20"|number;
};
interface B {
    (x:2):"2"
>x : 2

    (x:3):"30"
>x : 3

    (x:number):number;
>x : number

    //(x:2|3|number):"2"|"30"|number;
};
interface A {
    (x:3):"3"
>x : 3

    (x:1):"10"
>x : 1

    (x:number):number;
>x : number

    //(x:1|3|number):"3"|"10"|number;
};


foo satisfies A & B & C;
>foo satisfies A & B & C : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }

foo satisfies A & C & B;
>foo satisfies A & C & B : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }

foo satisfies B & A & C;
>foo satisfies B & A & C : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }

foo satisfies B & C & A;
>foo satisfies B & C & A : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }

foo satisfies C & A & B;
>foo satisfies C & A & B : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }

foo satisfies C & B & A;
>foo satisfies C & B & A : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }

type W = (A & B & C)|(A & C & B)|(B & A & C)|(B & C & A)|(C & A & B)|(C & B & A);
>W : (A & B & C) | (A & C & B) | (B & A & C) | (B & C & A) | (C & A & B) | (C & B & A)

foo satisfies W;
>foo satisfies W : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
>foo : { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }

