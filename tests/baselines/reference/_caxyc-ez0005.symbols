=== tests/cases/conformance/_caxyc/_caxyc-ez0005.ts ===
declare interface FooA {
>FooA : Symbol(FooA, Decl(_caxyc-ez0005.ts, 0, 0))

    foo(b:string): "1",
>foo : Symbol(FooA.foo, Decl(_caxyc-ez0005.ts, 0, 24), Decl(_caxyc-ez0005.ts, 1, 23))
>b : Symbol(b, Decl(_caxyc-ez0005.ts, 1, 8))

    foo(b:number): undefined;
>foo : Symbol(FooA.foo, Decl(_caxyc-ez0005.ts, 0, 24), Decl(_caxyc-ez0005.ts, 1, 23))
>b : Symbol(b, Decl(_caxyc-ez0005.ts, 2, 8))

};
declare const obja: undefined | FooA;
>obja : Symbol(obja, Decl(_caxyc-ez0005.ts, 4, 13))
>FooA : Symbol(FooA, Decl(_caxyc-ez0005.ts, 0, 0))

declare const arg: string | number;
>arg : Symbol(arg, Decl(_caxyc-ez0005.ts, 5, 13))

// checknig isFoo in combo with another condition argIsString
const isFoo = obja?.foo(arg);
>isFoo : Symbol(isFoo, Decl(_caxyc-ez0005.ts, 8, 5))
>obja?.foo : Symbol(FooA.foo, Decl(_caxyc-ez0005.ts, 0, 24), Decl(_caxyc-ez0005.ts, 1, 23))
>obja : Symbol(obja, Decl(_caxyc-ez0005.ts, 4, 13))
>foo : Symbol(FooA.foo, Decl(_caxyc-ez0005.ts, 0, 24), Decl(_caxyc-ez0005.ts, 1, 23))
>arg : Symbol(arg, Decl(_caxyc-ez0005.ts, 5, 13))

const argIsString = typeof arg === "string";
>argIsString : Symbol(argIsString, Decl(_caxyc-ez0005.ts, 9, 5))
>arg : Symbol(arg, Decl(_caxyc-ez0005.ts, 5, 13))

if (isFoo && argIsString){
>isFoo : Symbol(isFoo, Decl(_caxyc-ez0005.ts, 8, 5))
>argIsString : Symbol(argIsString, Decl(_caxyc-ez0005.ts, 9, 5))

    const x = obja.foo(arg);
>x : Symbol(x, Decl(_caxyc-ez0005.ts, 11, 9))
>obja.foo : Symbol(FooA.foo, Decl(_caxyc-ez0005.ts, 0, 24), Decl(_caxyc-ez0005.ts, 1, 23))
>obja : Symbol(obja, Decl(_caxyc-ez0005.ts, 4, 13))
>foo : Symbol(FooA.foo, Decl(_caxyc-ez0005.ts, 0, 24), Decl(_caxyc-ez0005.ts, 1, 23))
>arg : Symbol(arg, Decl(_caxyc-ez0005.ts, 5, 13))
}

