//// [tests/cases/conformance/_caxnc/_caxnc-ez0012.ts] ////

=== _caxnc-ez0012.ts ===
/**
 * Mix object and non-object function root types.
 * Checker type of v outside of the if statement includes undefined.
 */

type Foo = () => number[];
>Foo : Symbol(Foo, Decl(_caxnc-ez0012.ts, 0, 0))

type ObjFoo = { foo: () => string[]; }
>ObjFoo : Symbol(ObjFoo, Decl(_caxnc-ez0012.ts, 5, 26))
>foo : Symbol(foo, Decl(_caxnc-ez0012.ts, 6, 15))

declare const b: boolean;
>b : Symbol(b, Decl(_caxnc-ez0012.ts, 7, 13))

let v = b ? (undefined as any as Foo) : (undefined as any as (ObjFoo|undefined))?.foo;
>v : Symbol(v, Decl(_caxnc-ez0012.ts, 8, 3))
>b : Symbol(b, Decl(_caxnc-ez0012.ts, 7, 13))
>undefined : Symbol(undefined)
>Foo : Symbol(Foo, Decl(_caxnc-ez0012.ts, 0, 0))
>(undefined as any as (ObjFoo|undefined))?.foo : Symbol(foo, Decl(_caxnc-ez0012.ts, 6, 15))
>undefined : Symbol(undefined)
>ObjFoo : Symbol(ObjFoo, Decl(_caxnc-ez0012.ts, 5, 26))
>foo : Symbol(foo, Decl(_caxnc-ez0012.ts, 6, 15))

if (v) {
>v : Symbol(v, Decl(_caxnc-ez0012.ts, 8, 3))

    v();
>v : Symbol(v, Decl(_caxnc-ez0012.ts, 8, 3))
}
v;
>v : Symbol(v, Decl(_caxnc-ez0012.ts, 8, 3))

