//// [tests/cases/compiler/_uoafc.ts] ////

=== _uoafc.ts ===
interface Fizz {
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))

    id: number;
>id : Symbol(Fizz.id, Decl(_uoafc.ts, 0, 16))

    fizz: string;
>fizz : Symbol(Fizz.fizz, Decl(_uoafc.ts, 1, 15))
}

interface Buzz {
>Buzz : Symbol(Buzz, Decl(_uoafc.ts, 3, 1))

    id: number;
>id : Symbol(Buzz.id, Decl(_uoafc.ts, 5, 16))

    buzz: string;
>buzz : Symbol(Buzz.buzz, Decl(_uoafc.ts, 6, 15))
}
([] as Fizz[]).filter(item => item.id < 5) satisfies Fizz[];
>([] as Fizz[]).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(_uoafc.ts, 9, 22))
>item.id : Symbol(Fizz.id, Decl(_uoafc.ts, 0, 16))
>item : Symbol(item, Decl(_uoafc.ts, 9, 22))
>id : Symbol(Fizz.id, Decl(_uoafc.ts, 0, 16))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))

([] as Fizz[]).filter(Boolean) satisfies Fizz[];
>([] as Fizz[]).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))

([] as Fizz[]).filter(new Boolean) satisfies Fizz[]; // expect error
>([] as Fizz[]).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))

([] as Fizz[] | Buzz[]).filter(item => item.id < 5) satisfies Fizz[] | Buzz[];
>([] as Fizz[] | Buzz[]).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>Buzz : Symbol(Buzz, Decl(_uoafc.ts, 3, 1))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
>item : Symbol(item, Decl(_uoafc.ts, 13, 31))
>item : Symbol(item, Decl(_uoafc.ts, 13, 31))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>Buzz : Symbol(Buzz, Decl(_uoafc.ts, 3, 1))

([] as Fizz[] | Buzz[]).filter(Boolean) satisfies Fizz[] | Buzz[];
>([] as Fizz[] | Buzz[]).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>Buzz : Symbol(Buzz, Decl(_uoafc.ts, 3, 1))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>Buzz : Symbol(Buzz, Decl(_uoafc.ts, 3, 1))

([] as Fizz[] | Buzz[]).filter(new Boolean) satisfies Fizz[] | Buzz[]; // expect error
>([] as Fizz[] | Buzz[]).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>Buzz : Symbol(Buzz, Decl(_uoafc.ts, 3, 1))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_uoafc.ts, 0, 0))
>Buzz : Symbol(Buzz, Decl(_uoafc.ts, 3, 1))


