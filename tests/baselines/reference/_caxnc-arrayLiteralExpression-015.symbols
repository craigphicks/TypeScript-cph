//// [tests/cases/conformance/_caxnc/_caxnc-arrayLiteralExpression-015.ts] ////

=== _caxnc-arrayLiteralExpression-015.ts ===
declare const c: true;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))

const u = [c,c];
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-015.ts, 1, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))

const v = [c,c] as const;
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-015.ts, 2, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))
>const : Symbol(const)

const w: readonly[boolean,boolean] = [c,c];
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-015.ts, 3, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))

const x: readonly[boolean,boolean] = [c,c] as const;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-015.ts, 4, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))
>const : Symbol(const)

if (c) {
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-015.ts, 0, 13))

    u;v;w;x;
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-015.ts, 1, 5))
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-015.ts, 2, 5))
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-015.ts, 3, 5))
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-015.ts, 4, 5))

    u[0];
>u : Symbol(u, Decl(_caxnc-arrayLiteralExpression-015.ts, 1, 5))

    v[0];
>v : Symbol(v, Decl(_caxnc-arrayLiteralExpression-015.ts, 2, 5))
>0 : Symbol(0)

    w[0];
>w : Symbol(w, Decl(_caxnc-arrayLiteralExpression-015.ts, 3, 5))
>0 : Symbol(0)

    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-015.ts, 4, 5))
>0 : Symbol(0)
}

