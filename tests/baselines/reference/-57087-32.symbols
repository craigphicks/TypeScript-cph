//// [tests/cases/compiler/-test/-57087-32.ts] ////

=== -57087-32.ts ===
// wihout exactOptionalPropertyTypes set to true, no change

interface Garg31A {
>Garg31A : Symbol(Garg31A, Decl(-57087-32.ts, 0, 0))

    (): "01";
    (x:1, y:1): "211"
>x : Symbol(x, Decl(-57087-32.ts, 4, 5))
>y : Symbol(y, Decl(-57087-32.ts, 4, 9))

};
interface Garg31B {
>Garg31B : Symbol(Garg31B, Decl(-57087-32.ts, 5, 2))

    (): "02";
    (x:2, y:2): "222";
>x : Symbol(x, Decl(-57087-32.ts, 8, 5))
>y : Symbol(y, Decl(-57087-32.ts, 8, 9))

    (x:2, y:1): "221"
>x : Symbol(x, Decl(-57087-32.ts, 9, 5))
>y : Symbol(y, Decl(-57087-32.ts, 9, 9))

};

declare const f31a: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
>f31a : Symbol(f31a, Decl(-57087-32.ts, 12, 13))
>x : Symbol(x, Decl(-57087-32.ts, 12, 33))
>y : Symbol(y, Decl(-57087-32.ts, 12, 38))
>x : Symbol(x, Decl(-57087-32.ts, 12, 54))
>y : Symbol(y, Decl(-57087-32.ts, 12, 59))
>x : Symbol(x, Decl(-57087-32.ts, 12, 75))
>y : Symbol(y, Decl(-57087-32.ts, 12, 80))

f31a satisfies Garg31A & Garg31B; // should satisfy
>f31a : Symbol(f31a, Decl(-57087-32.ts, 12, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-32.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-32.ts, 5, 2))

declare const f31b: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221" /*should fail match*/; (x: 2, y: 1): "221"; }
>f31b : Symbol(f31b, Decl(-57087-32.ts, 15, 13))
>x : Symbol(x, Decl(-57087-32.ts, 15, 33))
>y : Symbol(y, Decl(-57087-32.ts, 15, 38))
>x : Symbol(x, Decl(-57087-32.ts, 15, 54))
>y : Symbol(y, Decl(-57087-32.ts, 15, 59))
>x : Symbol(x, Decl(-57087-32.ts, 15, 97))
>y : Symbol(y, Decl(-57087-32.ts, 15, 102))

f31b satisfies Garg31A & Garg31B; // should not satisfy
>f31b : Symbol(f31b, Decl(-57087-32.ts, 15, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-32.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-32.ts, 5, 2))

declare const f31c: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221" /*should fail match*/; }
>f31c : Symbol(f31c, Decl(-57087-32.ts, 18, 13))
>x : Symbol(x, Decl(-57087-32.ts, 18, 33))
>y : Symbol(y, Decl(-57087-32.ts, 18, 38))
>x : Symbol(x, Decl(-57087-32.ts, 18, 54))
>y : Symbol(y, Decl(-57087-32.ts, 18, 59))
>x : Symbol(x, Decl(-57087-32.ts, 18, 75))
>y : Symbol(y, Decl(-57087-32.ts, 18, 80))
>x : Symbol(x, Decl(-57087-32.ts, 18, 96))
>y : Symbol(y, Decl(-57087-32.ts, 18, 101))

f31c satisfies Garg31A & Garg31B; // should not satisfy
>f31c : Symbol(f31c, Decl(-57087-32.ts, 18, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-32.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-32.ts, 5, 2))

declare const f31d: { (): "01"; (x?: 1, y?: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
>f31d : Symbol(f31d, Decl(-57087-32.ts, 21, 13))
>x : Symbol(x, Decl(-57087-32.ts, 21, 33))
>y : Symbol(y, Decl(-57087-32.ts, 21, 39))
>x : Symbol(x, Decl(-57087-32.ts, 21, 56))
>y : Symbol(y, Decl(-57087-32.ts, 21, 61))
>x : Symbol(x, Decl(-57087-32.ts, 21, 77))
>y : Symbol(y, Decl(-57087-32.ts, 21, 82))

f31d satisfies Garg31A & Garg31B; // should satisfy
>f31d : Symbol(f31d, Decl(-57087-32.ts, 21, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-32.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-32.ts, 5, 2))

