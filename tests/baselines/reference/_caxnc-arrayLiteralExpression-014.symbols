//// [tests/cases/conformance/_caxnc/_caxnc-arrayLiteralExpression-014.ts] ////

=== _caxnc-arrayLiteralExpression-014.ts ===
declare const c: boolean;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))

const x: readonly[boolean,boolean] = c ? [c,c] as const : [c,c] as const;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))
>const : Symbol(const)
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))
>const : Symbol(const)

if (x[0]) {
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))
>0 : Symbol(0)

    c;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))

    x;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))

    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))
>0 : Symbol(0)

    x[1];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))
>1 : Symbol(1)
}
else
{
    c;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-014.ts, 0, 13))

    x;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))

    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))
>0 : Symbol(0)

    x[1];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-014.ts, 2, 5))
>1 : Symbol(1)
}
