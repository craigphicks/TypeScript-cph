//// [tests/cases/compiler/-test/-57087-04.ts] ////

=== -57087-04.ts ===
interface C {
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))

  (x:1):"1";
>x : Symbol(x, Decl(-57087-04.ts, 1, 3))

  (x:2):"20";
>x : Symbol(x, Decl(-57087-04.ts, 2, 3))

  (x:number):number | "1" | "20";
>x : Symbol(x, Decl(-57087-04.ts, 3, 3))

};
interface B {
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))

  (x:2):"2"
>x : Symbol(x, Decl(-57087-04.ts, 6, 3))

  (x:3):"30"
>x : Symbol(x, Decl(-57087-04.ts, 7, 3))

  (x:number):number | "2" | "30";
>x : Symbol(x, Decl(-57087-04.ts, 8, 3))

};
interface A {
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))

  (x:3):"3"
>x : Symbol(x, Decl(-57087-04.ts, 11, 3))

  (x:1):"10"
>x : Symbol(x, Decl(-57087-04.ts, 12, 3))

  (x:number):number | "3" | "10";
>x : Symbol(x, Decl(-57087-04.ts, 13, 3))

};

  function foo(x:1):"1";
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>x : Symbol(x, Decl(-57087-04.ts, 16, 15))

  function foo(x:2):"2";
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>x : Symbol(x, Decl(-57087-04.ts, 17, 15))

  function foo(x:3):"3";
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>x : Symbol(x, Decl(-57087-04.ts, 18, 15))

  function foo(x:number):number|"1"|"2"|"3";
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>x : Symbol(x, Decl(-57087-04.ts, 19, 15))

  function foo(x:number):number|"1"|"2"|"3"{
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>x : Symbol(x, Decl(-57087-04.ts, 20, 15))

    if (x==1||x==2||x==3) return String(x) as any;
>x : Symbol(x, Decl(-57087-04.ts, 20, 15))
>x : Symbol(x, Decl(-57087-04.ts, 20, 15))
>x : Symbol(x, Decl(-57087-04.ts, 20, 15))
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(-57087-04.ts, 20, 15))

    return x;
>x : Symbol(x, Decl(-57087-04.ts, 20, 15))
  }

  // The `&`-intersection operator result should be independent of the order of it's operands.
  foo satisfies A & B & C;
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))

  foo satisfies A & C & B;
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))

  foo satisfies B & A & C;
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))

  foo satisfies B & C & A;
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))

  foo satisfies C & A & B;
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))

  foo satisfies C & B & A;
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))

  type W = (A & B & C)|(A & C & B)|(B & A & C)|(B & C & A)|(C & A & B)|(C & B & A);
>W : Symbol(W, Decl(-57087-04.ts, 31, 26))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>C : Symbol(C, Decl(-57087-04.ts, 0, 0))
>B : Symbol(B, Decl(-57087-04.ts, 4, 2))
>A : Symbol(A, Decl(-57087-04.ts, 9, 2))

  declare const w:W;
>w : Symbol(w, Decl(-57087-04.ts, 34, 15))
>W : Symbol(W, Decl(-57087-04.ts, 31, 26))

  w(1);// "1","10"
>w : Symbol(w, Decl(-57087-04.ts, 34, 15))

  w(2);// "2","20"
>w : Symbol(w, Decl(-57087-04.ts, 34, 15))

  w(3);// "3","30"
>w : Symbol(w, Decl(-57087-04.ts, 34, 15))

  foo(1); // "1"
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))

  foo(2); // "2"
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))

  foo(3); // "3"
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))

  foo satisfies W;
>foo : Symbol(foo, Decl(-57087-04.ts, 14, 2), Decl(-57087-04.ts, 16, 24), Decl(-57087-04.ts, 17, 24), Decl(-57087-04.ts, 18, 24), Decl(-57087-04.ts, 19, 44))
>W : Symbol(W, Decl(-57087-04.ts, 31, 26))

