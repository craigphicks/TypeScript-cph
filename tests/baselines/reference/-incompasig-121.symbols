//// [tests/cases/compiler/-dev/-incompasig-121.ts] ////

=== -incompasig-121.ts ===
interface Test121<T> {
>Test121 : Symbol(Test121, Decl(-incompasig-121.ts, 0, 0))
>T : Symbol(T, Decl(-incompasig-121.ts, 0, 18))

    (cb:(a:T, x:T)=>T):T[];
>cb : Symbol(cb, Decl(-incompasig-121.ts, 1, 5))
>a : Symbol(a, Decl(-incompasig-121.ts, 1, 9))
>T : Symbol(T, Decl(-incompasig-121.ts, 0, 18))
>x : Symbol(x, Decl(-incompasig-121.ts, 1, 13))
>T : Symbol(T, Decl(-incompasig-121.ts, 0, 18))
>T : Symbol(T, Decl(-incompasig-121.ts, 0, 18))
>T : Symbol(T, Decl(-incompasig-121.ts, 0, 18))

    <U>(cb:(a:U, x:T)=>U,init:U):U[];
>U : Symbol(U, Decl(-incompasig-121.ts, 2, 5))
>cb : Symbol(cb, Decl(-incompasig-121.ts, 2, 8))
>a : Symbol(a, Decl(-incompasig-121.ts, 2, 12))
>U : Symbol(U, Decl(-incompasig-121.ts, 2, 5))
>x : Symbol(x, Decl(-incompasig-121.ts, 2, 16))
>T : Symbol(T, Decl(-incompasig-121.ts, 0, 18))
>U : Symbol(U, Decl(-incompasig-121.ts, 2, 5))
>init : Symbol(init, Decl(-incompasig-121.ts, 2, 25))
>U : Symbol(U, Decl(-incompasig-121.ts, 2, 5))
>U : Symbol(U, Decl(-incompasig-121.ts, 2, 5))
}

declare const f: Test121<number> | Test121<bigint>;
>f : Symbol(f, Decl(-incompasig-121.ts, 5, 13))
>Test121 : Symbol(Test121, Decl(-incompasig-121.ts, 0, 0))
>Test121 : Symbol(Test121, Decl(-incompasig-121.ts, 0, 0))

const result = f((a:bigint, x) => a * BigInt(x), 1n);
>result : Symbol(result, Decl(-incompasig-121.ts, 6, 5))
>f : Symbol(f, Decl(-incompasig-121.ts, 5, 13))
>a : Symbol(a, Decl(-incompasig-121.ts, 6, 18))
>x : Symbol(x, Decl(-incompasig-121.ts, 6, 27))
>a : Symbol(a, Decl(-incompasig-121.ts, 6, 18))
>BigInt : Symbol(BigInt, Decl(lib.es2020.bigint.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
>x : Symbol(x, Decl(-incompasig-121.ts, 6, 27))



