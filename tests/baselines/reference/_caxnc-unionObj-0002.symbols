=== tests/cases/conformance/_caxnc-prop/_caxnc-unionObj-0002.ts ===
declare const x: boolean;
>x : Symbol(x, Decl(_caxnc-unionObj-0002.ts, 0, 13))

// C.f. _caxnc-union-0003.ts, and see notes there.

// Note: result is displayed in '.types' file as a union of two types: { a: 1, b?: 2} | { a: 1, b: 2 }, but flough-level code does not add the optional 'b'.
// @ts-dev-expect-string "count: 0, effectiveDeclaredTsType: { readonly a: 1; } | { readonly a: 1; readonly b: 2; }"
const result = x ? { a: 1 } as const : { a: 1, b: 2 } as const;
>result : Symbol(result, Decl(_caxnc-unionObj-0002.ts, 6, 5))
>x : Symbol(x, Decl(_caxnc-unionObj-0002.ts, 0, 13))
>a : Symbol(a, Decl(_caxnc-unionObj-0002.ts, 6, 20))
>const : Symbol(const)
>a : Symbol(a, Decl(_caxnc-unionObj-0002.ts, 6, 40))
>b : Symbol(b, Decl(_caxnc-unionObj-0002.ts, 6, 46))
>const : Symbol(const)

result.b; // expect 2 | undefined
>result.b : Symbol(b, Decl(_caxnc-unionObj-0002.ts, 6, 46))
>result : Symbol(result, Decl(_caxnc-unionObj-0002.ts, 6, 5))
>b : Symbol(b, Decl(_caxnc-unionObj-0002.ts, 6, 46))

