//// [tests/cases/conformance/_caxnc-prop/_caxnc-prop-0001.ts] ////

=== _caxnc-prop-0001.ts ===
declare type X = {
>X : Symbol(X, Decl(_caxnc-prop-0001.ts, 0, 0))

    foo: boolean;
>foo : Symbol(foo, Decl(_caxnc-prop-0001.ts, 0, 18))

};
declare const x:X;
>x : Symbol(x, Decl(_caxnc-prop-0001.ts, 3, 13))
>X : Symbol(X, Decl(_caxnc-prop-0001.ts, 0, 0))

function prop0001(){
>prop0001 : Symbol(prop0001, Decl(_caxnc-prop-0001.ts, 3, 18))

    if (x.foo){
>x.foo : Symbol(foo, Decl(_caxnc-prop-0001.ts, 0, 18))
>x : Symbol(x, Decl(_caxnc-prop-0001.ts, 3, 13))
>foo : Symbol(foo, Decl(_caxnc-prop-0001.ts, 0, 18))

        const y = x.foo;
>y : Symbol(y, Decl(_caxnc-prop-0001.ts, 7, 13))
>x.foo : Symbol(foo, Decl(_caxnc-prop-0001.ts, 0, 18))
>x : Symbol(x, Decl(_caxnc-prop-0001.ts, 3, 13))
>foo : Symbol(foo, Decl(_caxnc-prop-0001.ts, 0, 18))

        y;
>y : Symbol(y, Decl(_caxnc-prop-0001.ts, 7, 13))
    }
    else {
        const z = x.foo;
>z : Symbol(z, Decl(_caxnc-prop-0001.ts, 11, 13))
>x.foo : Symbol(foo, Decl(_caxnc-prop-0001.ts, 0, 18))
>x : Symbol(x, Decl(_caxnc-prop-0001.ts, 3, 13))
>foo : Symbol(foo, Decl(_caxnc-prop-0001.ts, 0, 18))

        z;
>z : Symbol(z, Decl(_caxnc-prop-0001.ts, 11, 13))
    }
}
