//// [tests/cases/compiler/-test/-57087-contextualOverloadListFromArrayUnion-10.ts] ////

=== -57087-contextualOverloadListFromArrayUnion-10.ts ===
declare const y1: number[][] | string[];
>y1 : number[][] | string[]

export const yThen1 = y1.map(item => item.length);
>yThen1 : number[]
>y1.map(item => item.length) : number[]
>y1.map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>y1 : number[][] | string[]
>map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>item => item.length : (item: string | number[]) => number
>item : string | number[]
>item.length : number
>item : string | number[]
>length : number

declare function f12<T extends {length:number}>(x: T): number;
>f12 : <T extends { length: number; }>(x: T) => number
>length : number
>x : T

export const yThen2 = y1.map(f12);
>yThen2 : number[]
>y1.map(f12) : number[]
>y1.map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>y1 : number[][] | string[]
>map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>f12 : <T extends { length: number; }>(x: T) => number

export const yThen2a = y1.map(<T extends {length:number}>(x:T)=>x.length);
>yThen2a : number[]
>y1.map(<T extends {length:number}>(x:T)=>x.length) : number[]
>y1.map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>y1 : number[][] | string[]
>map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
><T extends {length:number}>(x:T)=>x.length : <T extends { length: number; }>(x: T) => number
>length : number
>x : T
>x.length : number
>x : T
>length : number

declare function f14<T extends {length:number}>(): (x: T) => unknown;
>f14 : <T extends { length: number; }>() => (x: T) => unknown
>length : number
>x : T

export const yThen4 = y1.map(f14()); // should not be an error
>yThen4 : unknown[]
>y1.map(f14()) : unknown[]
>y1.map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>y1 : number[][] | string[]
>map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>f14() : (x: string) => unknown
>f14 : <T extends { length: number; }>() => (x: T) => unknown

export const yThen4a = y1.map(<T extends {length:number}>()=>(x: T) => x.length);
>yThen4a : ((x: { length: number; }) => number)[]
>y1.map(<T extends {length:number}>()=>(x: T) => x.length) : ((x: { length: number; }) => number)[]
>y1.map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>y1 : number[][] | string[]
>map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
><T extends {length:number}>()=>(x: T) => x.length : <T extends { length: number; }>() => (x: T) => number
>length : number
>(x: T) => x.length : (x: T) => number
>x : T
>x.length : number
>x : T
>length : number

declare const f15: { (x: number[]): number; (x: string): number;}
>f15 : { (x: number[]): number; (x: string): number; }
>x : number[]
>x : string

export const yThen5 = y1.map(f15);
>yThen5 : number[]
>y1.map(f15) : number[]
>y1.map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>y1 : number[][] | string[]
>map : (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: string, index: number, array: string[]) => U_1, thisArg?: any) => U_1[])
>f15 : { (x: number[]): number; (x: string): number; }




