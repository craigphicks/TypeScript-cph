-57087-21.ts(10,4): error TS2769: No overload matches this call.
  Overload 1 of 2, '(x: 2): "2" | "3"', gave the following error.
    Argument of type '3' is not assignable to parameter of type '2'.
  Overload 2 of 2, '(x: 1 | 2): 1 | 2', gave the following error.
    Argument of type '3' is not assignable to parameter of type '1 | 2'.
-57087-22.ts(8,4): error TS1360: Type '{ (x: 1 | 2): 0 | 1 | 2; (x: 3): "2" | "3"; }' does not satisfy the expected type 'Garg2'.
  Type '{ (x: 1 | 2): 0 | 1 | 2; (x: 3): "2" | "3"; }' is not assignable to type '(x: 1 | 2) => 1 | 2'.
    Type '0 | 1 | 2' is not assignable to type '1 | 2'.
      Type '0' is not assignable to type '1 | 2'.
-57087-31.ts(16,6): error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
    Type '"01"' is not assignable to type '"02"'.
-57087-31.ts(19,6): error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' is not assignable to type 'Garg31B'.
    Type '"01"' is not assignable to type '"02"'.
-57087-31.ts(22,6): error TS1360: Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
    Type '"01"' is not assignable to type '"02"'.
-57087-33.ts(14,6): error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
  Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg33A'.
    Type '"01"' is not assignable to type '"211"'.
-57087-33.ts(17,6): error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
  Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' is not assignable to type 'Garg33A'.
    Type '"01"' is not assignable to type '"211"'.
-57087-35.ts(24,17): error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '{ x: 2; }' is not assignable to parameter of type '{ x: 2; y: 2; }'.
      Property 'y' is missing in type '{ x: 2; }' but required in type '{ x: 2; y: 2; }'.
-57087-37.ts(14,6): error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '{}' is not assignable to parameter of type '{ x: 2; y: 2; }'.
      Type '{}' is missing the following properties from type '{ x: 2; y: 2; }': x, y
-57087-contextualOverloadListFromArrayUnion-04.ts(4,30): error TS2345: Argument of type '(x: number[]) => number' is not assignable to parameter of type '((value: string, index: number, array: string[]) => number) & ((value: number[], index: number, array: number[][]) => number)'.
  Type '(x: number[]) => number' is not assignable to type '(value: string, index: number, array: string[]) => number'.
    Types of parameters 'x' and 'value' are incompatible.
      Type 'string' is not assignable to type 'number[]'.
-57087-contextualOverloadListFromArrayUnion-10.ts(11,30): error TS2345: Argument of type '(x: number[]) => unknown' is not assignable to parameter of type '((value: string, index: number, array: string[]) => unknown) & ((value: number[], index: number, array: number[][]) => unknown)'.
  Type '(x: number[]) => unknown' is not assignable to type '(value: string, index: number, array: string[]) => unknown'.
    Types of parameters 'x' and 'value' are incompatible.
      Type 'string' is not assignable to type 'number[]'.
-57087-unionOfClassCalls-22.ts(4,37): error TS2365: Operator '+' cannot be applied to types 'string | number' and 'string | number'.


==== -57087-01.ts (0 errors) ====
    /**********************/
    
    namespace ns0 {
    interface FMap<T,R> {
        f:(x:T)=>R
        g(f:(x:T)=>R):R;
    }
    declare const x1: FMap<1|2,1|2>;
    x1.g(x1.f); // no error
    declare const x2: FMap<2|3,"2"|"3">;
    x2.g(x2.f); // no error
    const x = Math.random() < 0.5 ? x1 : x2;
    x.g; // (method) FMap<T, R>.g(f: ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")): 1 | 2 | "2" | "3"
    
    function ft2(x:1|2):1|2;
    function ft2(x:3):"2"|"3";
    //function ft2(x:1|2|3):1|2|"2"|"3";
    function ft2(x:1|2|3):1|2|"2"|"3" {
        if (x!==3) return x1.f(x);
        else return x2.f(x);
    }
    x.g(ft2); // error
    }
    
    
    /**********************/
==== -57087-02.ts (0 errors) ====
    namespace ns1 {
    interface FMap<T,R> {
        f:(x:T)=>R
        g(f:(x:T)=>R):R;
    }
    declare const x1: FMap<1|2,1|2>;
    x1.g(x1.f); // no error
    declare const x2: FMap<2|3,"2"|"3">;
    x2.g(x2.f); // no error
    const x = Math.random() < 0.5 ? x1 : x2;
    x.g; // (method) FMap<T, R>.g(f: ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")): 1 | 2 | "2" | "3"
    
    function ft3(x:1):1|2;
    function ft3(x:3):"2"|"3";
    function ft3(x:2):1|2|"2"|"3";
    //function ft3(x:1|2|3):1|2|"2"|"3";
    function ft3(x:1|2|3):1|2|"2"|"3"{
        if (x===1) return x1.f(x);
        if (x===3) return x2.f(x);
        return Math.random() < 0.5 ? x1.f(x) : x2.f(x);
    }
    x.g(ft3); // error
    }
    
    
    /**********************/
==== -57087-03.ts (0 errors) ====
    namespace ns2 {
    interface A9<T> {
        t: T;
        f():T;
        g(f: ()=>T):T[];
    };
    
    declare const a9: A9<string> | A9<number>;
    
    // declare const f9: A9<string>["f"] & A9<number>["f"];
    // a9.g(f9); // NO ERROR when argument is defined as an intersection of functions type
    
    const f91 = ()=>Math.random() < 0.5 ? Math.random().toString() : Math.random();
    //f91 satisfies A9<string>["f"] & A9<number>["f"] // but is not a valid implementation of either.
    
    a9.g(f91); // INCORRECT ERROR;  argument is as an actual valid implementation, should not be error.
    
    }
    
    
    /**********************/
==== -57087-04.ts (0 errors) ====
    namespace ns3 {
    interface C {
      (x:1):"1";
      (x:2):"20";
      (x:number):number | "1" | "20";
    };
    interface B {
      (x:2):"2"
      (x:3):"30"
      (x:number):number | "2" | "30";
    };
    interface A {
      (x:3):"3"
      (x:1):"10"
      (x:number):number | "3" | "10";
    };
    
      function foo(x:1):"1";
      function foo(x:2):"2";
      function foo(x:3):"3";
      function foo(x:number):number|"1"|"2"|"3";
      function foo(x:number):number|"1"|"2"|"3"{
        if (x==1||x==2||x==3) return String(x) as any;
        return x;
      }
    
      // The `&`-intersection operator result should be independent of the order of it's operands.
      foo satisfies A & B & C;
      foo satisfies A & C & B;
      foo satisfies B & A & C;
      foo satisfies B & C & A;
      foo satisfies C & A & B;
      foo satisfies C & B & A;
    
      type W = (A & B & C)|(A & C & B)|(B & A & C)|(B & C & A)|(C & A & B)|(C & B & A);
      declare const w:W;
      w(1);// "1","10"
      w(2);// "2","20"
      w(3);// "3","30"
    
      foo(1); // "1"
      foo(2); // "2"
      foo(3); // "3"
    
      foo satisfies W;
    }
    
    
    /**********************/
==== -57087-05.ts (0 errors) ====
    namespace ns4 {
    type A = { a: string };
    type B = { b: 1 | "1" };
    type C = { c: number };
    
    interface FMap<T,R> {
        f:(x:T)=>R
        g(f:(x:T)=>R):R;
    }
    declare const x1: FMap<A|B,string|1>;
    x1.g(x1.f); // no error
    declare const x2: FMap<B|C,number|"1">;
    x2.g(x2.f); // no error
    const x = Math.random() < 0.5 ? x1 : x2;
    x.g; // (method) FMap<T, R>.g(f: ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")): 1 | 2 | "2" | "3"
    
    
    
    function ft2(x:A):string;
    function ft2(x:C):number;
    function ft2(x:B):"1"|1;
    function ft2(x: A|B|C):1|"1"|string|number {
        if ("a" in x) return x.a;
        if ("c" in x) return x.c;
        return x.b;
    }
    
    x.g(ft2); // error
    }
    
    
    /**********************/
==== -57087-06.ts (0 errors) ====
    namespace ns5 {
    type A = { a: string };
    type B = { b: 1 | "1" };
    type C = { c: number };
    type D = { a?: string, b: 1 | "1", c?: number };
    
    
    function ft2(x:A):string;
    function ft2(x:C):number;
    function ft2(x:B):"1"|1;
    function ft2(x: A|B|C):1|"1"|string|number {
        if ("a" in x) return x.a;
        if ("c" in x) return x.c;
        return x.b;
    }
    
    
    
    }
    
    
    /**********************/
==== -57087-11.ts (0 errors) ====
    namespace ns6 {
    declare const f: { (x: 1 | 2): 1 | 2; (x: 3): "2" | "3"; }
    
    type Garg = ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3");
    
    f satisfies Garg;
    }
    
    
    /**********************/
==== -57087-12.ts (0 errors) ====
    namespace ns7 {
    declare const f: { (x: 1): 1 | 2; (x: 3): "2" | "3"; (x: 2): 1 | 2 | "2" | "3"; }
    
    type Garg = ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3");
    
    f satisfies Garg;
    }
    
    
    /**********************/
==== -57087-13.ts (0 errors) ====
    namespace ns8 {
    declare const f42: () => string | number;
    f42 satisfies (() => string) & (() => number);
    
    }
    
    
    /**********************/
==== -57087-14.ts (0 errors) ====
    namespace ns9 {
    declare const foo: { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number | "1" | "2" | "3"; }
    
    interface C {
        (x:1):"1";
        (x:2):"20";
        (x:number):number | "1" | "20";
    };
    interface B {
        (x:2):"2"
        (x:3):"30"
        (x:number):number | "2" | "30";
    };
    interface A {
        (x:3):"3"
        (x:1):"10"
        (x:number):number | "3" | "10";
    };
    
    
    foo satisfies A & B & C;
    foo satisfies A & C & B;
    foo satisfies B & A & C;
    foo satisfies B & C & A;
    foo satisfies C & A & B;
    foo satisfies C & B & A;
    
    type W = (A & B & C)|(A & C & B)|(B & A & C)|(B & C & A)|(C & A & B)|(C & B & A);
    
    foo satisfies W;
    }
    
    
    /**********************/
==== -57087-15.ts (0 errors) ====
    namespace ns10 {
    declare const foo: { (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }
    
    interface C {
        (x:1):"1";
        (x:2):"20";
        (x:number):number;
        //(x:number):"1"|"20"|number;
    };
    interface B {
        (x:2):"2"
        (x:3):"30"
        (x:number):number;
        //(x:2|3|number):"2"|"30"|number;
    };
    interface A {
        (x:3):"3"
        (x:1):"10"
        (x:number):number;
        //(x:1|3|number):"3"|"10"|number;
    };
    
    
    foo satisfies A & B & C;
    foo satisfies A & C & B;
    foo satisfies B & A & C;
    foo satisfies B & C & A;
    foo satisfies C & A & B;
    foo satisfies C & B & A;
    
    type W = (A & B & C)|(A & C & B)|(B & A & C)|(B & C & A)|(C & A & B)|(C & B & A);
    
    foo satisfies W;
    }
    
    
    /**********************/
==== -57087-21.ts (1 errors) ====
    namespace ns11 {
    // test f domain does not support Garg domain (3 omitted from f domain) - cannot detect during satisfies but can detect during call to f1
    
    declare const f1: { (x: 1 | 2): 1 | 2; (x: 2): "2" | "3";}
    
    type Garg1 = ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3");
    
    f1 satisfies Garg1; // no error expected
    
    f1(3); // error exptected - No overload matches this call. (ts2769)
       ~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 1 of 2, '(x: 2): "2" | "3"', gave the following error.
!!! error TS2769:     Argument of type '3' is not assignable to parameter of type '2'.
!!! error TS2769:   Overload 2 of 2, '(x: 1 | 2): 1 | 2', gave the following error.
!!! error TS2769:     Argument of type '3' is not assignable to parameter of type '1 | 2'.
    // ~
    
    }
    
    
    /**********************/
==== -57087-22.ts (1 errors) ====
    namespace ns12 {
    // test f range exceeds Garg range - should not satisfy
    
    declare const f2: { (x: 1 | 2): 0 |1 | 2; (x: 3): "2" | "3"; }
    
    type Garg2 = ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3");
    
    f2 satisfies Garg2; // should not satisfy
       ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1 | 2): 0 | 1 | 2; (x: 3): "2" | "3"; }' does not satisfy the expected type 'Garg2'.
!!! error TS1360:   Type '{ (x: 1 | 2): 0 | 1 | 2; (x: 3): "2" | "3"; }' is not assignable to type '(x: 1 | 2) => 1 | 2'.
!!! error TS1360:     Type '0 | 1 | 2' is not assignable to type '1 | 2'.
!!! error TS1360:       Type '0' is not assignable to type '1 | 2'.
    
    }
    
    
    /**********************/
==== -57087-31.ts (3 errors) ====
    namespace ns13 {
    interface Garg31A {
        (): "01";
        (x:1, y:1): "211"
    };
    interface Garg31B {
        (): "02";
        (x:2, y:2): "222";
        (x:2, y:1): "221"
    };
    
    declare const f31a: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
    f31a satisfies Garg31A & Garg31B; // should satisfy
    
    declare const f31b: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221" /*should fail match*/; (x: 2, y: 1): "221"; }
    f31b satisfies Garg31A & Garg31B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
!!! error TS1360:     Type '"01"' is not assignable to type '"02"'.
    
    declare const f31c: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221" /*should fail match*/; }
    f31c satisfies Garg31A & Garg31B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' is not assignable to type 'Garg31B'.
!!! error TS1360:     Type '"01"' is not assignable to type '"02"'.
    
    declare const f31d: { (): "01"; (x?: 1, y?: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
    f31d satisfies Garg31A & Garg31B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
!!! error TS1360:     Type '"01"' is not assignable to type '"02"'.
    
    }
    
    
    /**********************/
==== -57087-33.ts (2 errors) ====
    namespace ns14 {
    interface Garg33A {
        (): "01";
        (x?:1, y?:1): "211"
    };
    interface Garg33B {
        (): "02";
        (x?:2, y?:2): "222";
        (x?:2, y?:1): "221"
    };
    
    
    declare const f33b: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221" /*should fail match*/; (x: 2, y: 1): "221"; }
    f33b satisfies Garg33A & Garg33B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
!!! error TS1360:   Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg33A'.
!!! error TS1360:     Type '"01"' is not assignable to type '"211"'.
    
    declare const f33c: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221" /*should fail match*/; }
    f33c satisfies Garg33A & Garg33B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
!!! error TS1360:   Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' is not assignable to type 'Garg33A'.
!!! error TS1360:     Type '"01"' is not assignable to type '"211"'.
    
    
    declare const f33a: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
    f33a satisfies Garg33A & Garg33B; // should satisfy
    
    declare const f33d: { (): "01"; (x?: 1, y?: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
    f33d satisfies Garg33A & Garg33B; // should satisfy
    
    declare const f33e: { (): "01"; (x?: 1, y?: 1): "211"; (x?: 2, y?: 2): "222"; (x: 2, y: 1): "221"; }
    f33e satisfies Garg33A & Garg33B; // should satisfy
    
    }
    
    
    /**********************/
==== -57087-35.ts (1 errors) ====
    namespace ns15 {
    interface Garg35A {
        ({x,y}:{x:1, y:1}): "111"
    };
    interface Garg35B {
        ({x,y}:{x?:2, y?:1}): "221"
        ({x,y}:{x:2, y?:2}): "222";
    };
    
    declare const f35a: { ({x,y}:{x:1, y:1}): "111"; ({x,y}:{x?:2, y?:1}): "221"; ({x,y}:{x:2, y?:2}): "222"; }
    f35a satisfies Garg35A & Garg35B; // should satisfy
    
    declare const f35b: { ({x,y}:{x:1, y:1}): "111"; ({x,y}:{x?:2, y?:1}): "221"; ({x,y}:{x:2, y:2}): "222"; }
    f35b satisfies Garg35A & Garg35B; // should satisfy
    
    declare const f35c: { ({x,y}:{x:1, y:1}): "111"; (arg:Record<string,never>): "221"; ({x}:{x:2}): "221"; ({y}:{y:1}): "221"; ({x,y}:{x:2, y:1}): "221"; ({x,y}:{x:2, y:2}): "222"; }
    f35c satisfies Garg35A & Garg35B; // should satisfy
    
    const t1 = f35c({}); // no error, return 221
    
    declare const f35d: { ({x,y}:{x:1, y:1}): "111"; (arg:Record<string,never>): "221"; /*({x}:{x:2}): "221";*/ ({y}:{y:1}): "221"; ({x,y}:{x:2, y:1}): "221"; ({x,y}:{x:2, y:2}): "222"; }
    f35d satisfies Garg35A & Garg35B; // should satisfy
    
    const t2 = f35d({x:2}); // error expected - no overload matches this call
                    ~~~~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   The last overload gave the following error.
!!! error TS2769:     Argument of type '{ x: 2; }' is not assignable to parameter of type '{ x: 2; y: 2; }'.
!!! error TS2769:       Property 'y' is missing in type '{ x: 2; }' but required in type '{ x: 2; y: 2; }'.
!!! related TS2728 -57087-35.ts:21:169: 'y' is declared here.
!!! related TS2771 -57087-35.ts:21:156: The last overload is declared here.
    //              ~~~~~
    
    }
    
    
    /**********************/
==== -57087-36.ts (0 errors) ====
    namespace ns16 {
    interface Garg36A {
        ({x,y}:{x:1, y:1}): "111"
    };
    interface Garg36B {
        ({x,y}:{x?:2, y?:1}): "221"
        ({x,y}:{x:2, y?:2}): "222";
    };
    
    
    declare const f36d: { ({x,y}:{x:1, y:1}): "111"; ({x,y}:{x:2, y:1}): "221"; ({x,y}:{x:2, y:2}): "222"; }
    f36d satisfies Garg36A & Garg36B; // should satisfy
    
    }
    
    
    /**********************/
==== -57087-37.ts (1 errors) ====
    namespace ns17 {
    interface Garg37A {
        ({x,y}:{x:1, y:1}): "111"
    };
    interface Garg37B {
        ({x,y}:{x?:2, y?:1}): "221"
        ({x,y}:{x:2, y?:2}): "222";
    };
    
    
    declare const f37d: { ({x,y}:{x:1, y:1}): "111"; (): "221"; ({x}:{x:2}): "221"; ({y}:{y:1}): "221"; ({x,y}:{x:2, y:1}): "221"; ({x,y}:{x:2, y:2}): "222"; }
    f37d satisfies Garg37A & Garg37B; // should satisfy
    
    f37d({}); // error expected - no overload matches this call
         ~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   The last overload gave the following error.
!!! error TS2769:     Argument of type '{}' is not assignable to parameter of type '{ x: 2; y: 2; }'.
!!! error TS2769:       Type '{}' is missing the following properties from type '{ x: 2; y: 2; }': x, y
!!! related TS2771 -57087-37.ts:11:128: The last overload is declared here.
    
    }
    
    
    /**********************/
==== -57087-callsOnComplexSignatures-01.ts (0 errors) ====
    namespace ns18 {
    function test3(items: string[] | number[]) {
        items.forEach(item => console.log(item)); // must not be error
    //                   ~~~~~~~~~~~~~~~~~~~~~~~~~
    // !!! error TS2345: Argument of type '(item: string | number) => void' is not assignable to parameter of type '((value: string, index: number, array: string[]) => void) & ((value: number, index: number, array: number[]) => void)'.
    }
    }
    
    
    /**********************/
==== -57087-callsOnComplexSignatures-02.ts (0 errors) ====
    namespace ns19 {
    type MyArray<T> = {
        [n: number]: T;
        forEach(callbackfn: (value: T, index: number, array: MyArray<T>) => unknown): void;
    };
    
    
    
    function test3(items: MyArray<string> | MyArray<number>) {
        items.forEach(item => console.log(item));
    }
    }
    
    
    /**********************/
==== -57087-contextualOverloadListFromArrayUnion-01.ts (0 errors) ====
    namespace ns20 {
    declare const y1: number[][] | string[];
    export const yThen1 = y1.map(item => item.length);
    
    }
    
    
    /**********************/
==== -57087-contextualOverloadListFromArrayUnion-02.ts (0 errors) ====
    namespace ns21 {
    declare const y2: number[][] | string[];
    declare function f2<T extends {length:number}>(x: T): number;
    export const yThen2 = y2.map(f2);
    
    }
    
    
    /**********************/
==== -57087-contextualOverloadListFromArrayUnion-03.ts (0 errors) ====
    namespace ns22 {
    declare const y3: number[][] | string[];
    declare function f3<T extends {length:number}>(): (x: T) => number;
    export const yThen3 = y3.map(f3); // should be an error, but is not
    
    }
    
    
    /**********************/
==== -57087-contextualOverloadListFromArrayUnion-04.ts (1 errors) ====
    namespace ns23 {
    declare const y4: number[][] | string[];
    declare function f4<T extends {length:number}>(): (x: T) => number;
    export const yThen4 = y4.map(f4()); // should not be an error, but is an error
                                 ~~~~
!!! error TS2345: Argument of type '(x: number[]) => number' is not assignable to parameter of type '((value: string, index: number, array: string[]) => number) & ((value: number[], index: number, array: number[][]) => number)'.
!!! error TS2345:   Type '(x: number[]) => number' is not assignable to type '(value: string, index: number, array: string[]) => number'.
!!! error TS2345:     Types of parameters 'x' and 'value' are incompatible.
!!! error TS2345:       Type 'string' is not assignable to type 'number[]'.
    
    }
    
    
    /**********************/
==== -57087-contextualOverloadListFromArrayUnion-05.ts (0 errors) ====
    namespace ns24 {
    declare const y5: number[][] | string[];
    declare const f5: { (x: number[]): number; (x: string): number;}
    export const yThen4 = y5.map(f5);
    
    }
    
    
    /**********************/
==== -57087-contextualOverloadListFromArrayUnion-10.ts (1 errors) ====
    namespace ns25 {
    declare const y1: number[][] | string[];
    export const yThen1 = y1.map(item => item.length);
    
    declare function f12<T extends {length:number}>(x: T): number;
    export const yThen2 = y1.map(f12);
    
    export const yThen2a = y1.map(<T extends {length:number}>(x:T)=>x.length);
    
    declare function f14<T extends {length:number}>(): (x: T) => unknown;
    export const yThen4 = y1.map(f14()); // should not be an error
                                 ~~~~~
!!! error TS2345: Argument of type '(x: number[]) => unknown' is not assignable to parameter of type '((value: string, index: number, array: string[]) => unknown) & ((value: number[], index: number, array: number[][]) => unknown)'.
!!! error TS2345:   Type '(x: number[]) => unknown' is not assignable to type '(value: string, index: number, array: string[]) => unknown'.
!!! error TS2345:     Types of parameters 'x' and 'value' are incompatible.
!!! error TS2345:       Type 'string' is not assignable to type 'number[]'.
    
    export const yThen4a = y1.map(<T extends {length:number}>()=>(x: T) => x.length);
    
    declare const f15: { (x: number[]): number; (x: string): number;}
    export const yThen5 = y1.map(f15);
    
    
    
    
    }
    
    
    /**********************/
==== -57087-toSorted-01.ts (0 errors) ====
    namespace ns26 {
    // interface Arr<T> {
    //     toSorted(compareFn?: (a: T, b: T) => number): T[];
    // }
    
    // declare const arr: Arr<number> | Arr<string>;/workspaces/ts+dt/-test
    
    
    const f = (compareFn?: ((
        a: { id: number; description: null; } | { id: number; description: string; },
        b: { id: number; description: null; } | { id: number; description: string; }) => number) | undefined) => {
        return 0 as any as ({ id: number; description: null; } | { id: number; description: string; })[]
    };
    
    
    type F1 =  (compareFn?: ((a: { id: number; }, b: { id: number; }) => number) | undefined) =>
                { id: number; }[] & { id: number; description: string | null; }[];
    
    type F2 = (compareFn?: ((a: { id: number; description: string | null; }, b: { id: number; description: string | null; }) => number) | undefined) =>
                { id: number; }[]& { id: number; description: string | null; }[]
    type F = F1 & F2;
    
    f satisfies F;
    }
    
    
    /**********************/
==== -57087-toSorted-02.ts (0 errors) ====
    namespace ns27 {
    const a = 0 as any as ({ id: number; description: null; } | { id: number; description: string; })[];
    type A = { id: number; }[] & { id: number; description: string | null; }[];
    a satisfies A;
    
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-01.ts (0 errors) ====
    namespace ns28 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const arr1: number[]  = [];
        const arr2:  string[] = [];
        const t = arr.map((a: number | string, index: number) => {
            return index
        });
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-02.ts (0 errors) ====
    namespace ns29 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const t = arr.reduce((acc: Array<string>, a: number | string, index: number) => {
            return []
        }, [])
    
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-03.ts (0 errors) ====
    namespace ns30 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const arr1: number[]  = [];
        const arr2:  string[] = [];
        const t = arr.forEach((a: number | string, index: number) => {
            return index
        });
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-11.ts (0 errors) ====
    namespace ns31 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const arr1: number[]  = [];
        const arr2:  string[] = [];
        const t = arr.map((a, index) => {
            return index
        });
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-12.ts (0 errors) ====
    namespace ns32 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const t = arr.reduce((acc, a, index) => {
            return []
        }, [])
    
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-13.ts (0 errors) ====
    namespace ns33 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const arr1: number[]  = [];
        const arr2:  string[] = [];
        const t = arr.forEach((a, index) => {
            return index
        });
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-21.ts (0 errors) ====
    namespace ns34 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const arr1: number[]  = [];
        const arr2:  string[] = [];
        const t = arr.map(a=>a);
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-22.ts (1 errors) ====
    namespace ns35 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const t = arr.reduce((acc,a) => acc+a)
                                        ~~~~~
!!! error TS2365: Operator '+' cannot be applied to types 'string | number' and 'string | number'.
    }
    
    }
    
    
    /**********************/
==== -57087-unionOfClassCalls-23.ts (0 errors) ====
    namespace ns36 {
    {
        const arr: number[] | string[] = [];  // Works with Array<number | string>
        const arr1: number[]  = [];
        const arr2:  string[] = [];
        const t = arr.forEach(a => {
            // do something
        });
    }
    }
    
    
    /**********************/
==== -57087-withSkipAndOnly-01.ts (0 errors) ====
    namespace ns37 {
    interface Context {
        [key: string]: any;
    }
    interface Test {
        [key: string]: any;
    }
    type Done = (err?: any) => void;
    type Func = (this: Context, done: Done) => void;
    type AsyncFunc = (this: Context) => PromiseLike<any>;
    interface PendingTestFunction {
        skip: PendingTestFunction;
        only: PendingTestFunction;
        (fn: Func): Test;
        (fn: AsyncFunc): Test;
    }
    type WithSkipAndOnly<T extends any[]> = ((...args: T) => void) & {
        skip: (...args: T) => void;
        only: (...args: T) => void;
    };
    declare const it: PendingTestFunction;
    function createTestWrapper<T extends any[]>(fn: (it: PendingTestFunction, ...args: T) => void): WithSkipAndOnly<T> {
        wrapped.skip = (...args: T) => fn(it.skip, ...args);
        wrapped.only = (...args: T) => fn(it.only, ...args);
        return wrapped;
        function wrapped(...args: T) {
            return fn(it, ...args);
        }
    }
    
    }
    