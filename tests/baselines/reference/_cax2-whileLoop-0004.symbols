=== tests/cases/conformance/_cax2/_cax2-whileLoop-0004.ts ===
// loop finished due to truthy never, loopCount=2
function t4(){
>t4 : Symbol(t4, Decl(_cax2-whileLoop-0004.ts, 0, 0))

    let b = false;
>b : Symbol(b, Decl(_cax2-whileLoop-0004.ts, 2, 7))

    let c = true;
>c : Symbol(c, Decl(_cax2-whileLoop-0004.ts, 3, 7))

    let d = true;
>d : Symbol(d, Decl(_cax2-whileLoop-0004.ts, 4, 7))

    while (d){
>d : Symbol(d, Decl(_cax2-whileLoop-0004.ts, 4, 7))

        d = c;
>d : Symbol(d, Decl(_cax2-whileLoop-0004.ts, 4, 7))
>c : Symbol(c, Decl(_cax2-whileLoop-0004.ts, 3, 7))

        c = b;
>c : Symbol(c, Decl(_cax2-whileLoop-0004.ts, 3, 7))
>b : Symbol(b, Decl(_cax2-whileLoop-0004.ts, 2, 7))

        b;
>b : Symbol(b, Decl(_cax2-whileLoop-0004.ts, 2, 7))

        c;
>c : Symbol(c, Decl(_cax2-whileLoop-0004.ts, 3, 7))

        d;
>d : Symbol(d, Decl(_cax2-whileLoop-0004.ts, 4, 7))

        let x = d;
>x : Symbol(x, Decl(_cax2-whileLoop-0004.ts, 11, 11))
>d : Symbol(d, Decl(_cax2-whileLoop-0004.ts, 4, 7))
    }
    let e = b;
>e : Symbol(e, Decl(_cax2-whileLoop-0004.ts, 13, 7))
>b : Symbol(b, Decl(_cax2-whileLoop-0004.ts, 2, 7))

    [b,c,d,e];
>b : Symbol(b, Decl(_cax2-whileLoop-0004.ts, 2, 7))
>c : Symbol(c, Decl(_cax2-whileLoop-0004.ts, 3, 7))
>d : Symbol(d, Decl(_cax2-whileLoop-0004.ts, 4, 7))
>e : Symbol(e, Decl(_cax2-whileLoop-0004.ts, 13, 7))
}

