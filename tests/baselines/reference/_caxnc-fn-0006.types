//// [tests/cases/conformance/_caxnc/_caxnc-fn-0006.ts] ////

=== _caxnc-fn-0006.ts ===
declare interface FooA {
    foo(b:string): "A";
>foo : { (b: string): "A"; (...args: any[]): unknown; }
>b : string

    foo(...args:any[]): unknown;
>foo : { (b: string): "A"; (...args: any[]): unknown; }
>args : any[]
}
declare interface FooB {
    foo(b:number): "B";
>foo : { (b: number): "B"; (...args: any[]): unknown; }
>b : number

    foo(...args:any[]): unknown;
>foo : { (b: number): "B"; (...args: any[]): unknown; }
>args : any[]

};
declare const obja: FooA;
>obja : FooA

declare const objb: FooB;
>objb : FooB

declare const arg: string | number;
>arg : string | number

declare const b: boolean;
>b : boolean

const obj = b? obja : objb
>obj : FooA | FooB
>b? obja : objb : FooA | FooB
>b : boolean
>obja : FooA
>objb : FooB

if (obj===obja){
>obj===obja : boolean
>obj : FooA | FooB
>obja : FooA

    obj; // expect FooA | FooB
>obj : FooA | FooB

    obj.foo
>obj.foo : { (b: number): "B"; (...args: any[]): unknown; } | { (b: string): "A"; (...args: any[]): unknown; }
>obj : FooA | FooB
>foo : { (b: number): "B"; (...args: any[]): unknown; } | { (b: string): "A"; (...args: any[]): unknown; }
}
else {
    obj; // expect FooA | FooB (even if left and right are FooA, the comparison result could still be false)
>obj : FooA | FooB

    obj.foo
>obj.foo : { (b: number): "B"; (...args: any[]): unknown; } | { (b: string): "A"; (...args: any[]): unknown; }
>obj : FooA | FooB
>foo : { (b: number): "B"; (...args: any[]): unknown; } | { (b: string): "A"; (...args: any[]): unknown; }
}

