//// [tests/cases/conformance/-instanceQuery/instanceQuery-0011.ts] ////

=== instanceQuery-0011.ts ===
namespace iq0010b {
>iq0010b : Symbol(iq0010b, Decl(instanceQuery-0011.ts, 0, 0))

    class EmptyBase {}
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0011.ts, 0, 19))

    class A1  extends EmptyBase{
>A1 : Symbol(A1, Decl(instanceQuery-0011.ts, 1, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0011.ts, 0, 19))

        a: number|string = "";
>a : Symbol(A1.a, Decl(instanceQuery-0011.ts, 2, 32))
    }
    class A2  extends A1 {
>A2 : Symbol(A2, Decl(instanceQuery-0011.ts, 4, 5))
>A1 : Symbol(A1, Decl(instanceQuery-0011.ts, 1, 22))

        a: number = 0;
>a : Symbol(A2.a, Decl(instanceQuery-0011.ts, 5, 26))
    }
    class A3  extends A2 {
>A3 : Symbol(A3, Decl(instanceQuery-0011.ts, 7, 5))
>A2 : Symbol(A2, Decl(instanceQuery-0011.ts, 4, 5))

        a: 0 | 1 = 0;
>a : Symbol(A3.a, Decl(instanceQuery-0011.ts, 8, 26))
    }
    class B3  extends A2 {
>B3 : Symbol(B3, Decl(instanceQuery-0011.ts, 10, 5))
>A2 : Symbol(A2, Decl(instanceQuery-0011.ts, 4, 5))

        a: 1 | 2 = 2;
>a : Symbol(B3.a, Decl(instanceQuery-0011.ts, 11, 26))
    }
    type AQ = instanceof A1 & instanceof A2 & instanceof A3 & instanceof B3;
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

    declare let a1: instanceof A1;
>a1 : Symbol(a1, Decl(instanceQuery-0011.ts, 15, 15))

    declare let a2: instanceof A2;
>a2 : Symbol(a2, Decl(instanceQuery-0011.ts, 16, 15))

    declare let a3: instanceof A3;
>a3 : Symbol(a3, Decl(instanceQuery-0011.ts, 17, 15))

    declare let b3: instanceof B3;
>b3 : Symbol(b3, Decl(instanceQuery-0011.ts, 18, 15))

    a1 satisfies AQ; // error (because (typeof A1).constructor < (typeof A2).constructor)
>a1 : Symbol(a1, Decl(instanceQuery-0011.ts, 15, 15))
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

    a2 satisfies AQ; // error
>a2 : Symbol(a2, Decl(instanceQuery-0011.ts, 16, 15))
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

    a3 satisfies AQ; // error
>a3 : Symbol(a3, Decl(instanceQuery-0011.ts, 17, 15))
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

    b3 satisfies AQ; // error
>b3 : Symbol(b3, Decl(instanceQuery-0011.ts, 18, 15))
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

    class AP  extends A2 {
>AP : Symbol(AP, Decl(instanceQuery-0011.ts, 23, 20))
>A2 : Symbol(A2, Decl(instanceQuery-0011.ts, 4, 5))

        a: 1 = 1;
>a : Symbol(AP.a, Decl(instanceQuery-0011.ts, 25, 26))

    };

    new AP() as instanceof AP satisfies AQ; // no error
>AP : Symbol(AP, Decl(instanceQuery-0011.ts, 23, 20))
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

    declare const aq: AQ;
>aq : Symbol(aq, Decl(instanceQuery-0011.ts, 31, 17))
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

    aq satisfies AP; // no error
>aq : Symbol(aq, Decl(instanceQuery-0011.ts, 31, 17))
>AP : Symbol(AP, Decl(instanceQuery-0011.ts, 23, 20))

    aq as instanceof AP satisfies AQ; // no error
>aq : Symbol(aq, Decl(instanceQuery-0011.ts, 31, 17))
>AQ : Symbol(AQ, Decl(instanceQuery-0011.ts, 13, 5))

}
