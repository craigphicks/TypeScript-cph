//// [tests/cases/compiler/-test/-57087-01.ts] ////

=== -57087-01.ts ===
interface FMap<T,R> {
    f:(x:T)=>R
>f : (x: T) => R
>x : T

    g(f:(x:T)=>R):R;
>g : (f: (x: T) => R) => R
>f : (x: T) => R
>x : T
}
declare const x1: FMap<1|2,1|2>;
>x1 : FMap<1 | 2, 1 | 2>

x1.g(x1.f); // no error
>x1.g(x1.f) : 1 | 2
>x1.g : (f: (x: 1 | 2) => 1 | 2) => 1 | 2
>x1 : FMap<1 | 2, 1 | 2>
>g : (f: (x: 1 | 2) => 1 | 2) => 1 | 2
>x1.f : (x: 1 | 2) => 1 | 2
>x1 : FMap<1 | 2, 1 | 2>
>f : (x: 1 | 2) => 1 | 2

declare const x2: FMap<2|3,"2"|"3">;
>x2 : FMap<2 | 3, "2" | "3">

x2.g(x2.f); // no error
>x2.g(x2.f) : "2" | "3"
>x2.g : (f: (x: 2 | 3) => "2" | "3") => "2" | "3"
>x2 : FMap<2 | 3, "2" | "3">
>g : (f: (x: 2 | 3) => "2" | "3") => "2" | "3"
>x2.f : (x: 2 | 3) => "2" | "3"
>x2 : FMap<2 | 3, "2" | "3">
>f : (x: 2 | 3) => "2" | "3"

const x = Math.random() < 0.5 ? x1 : x2;
>x : FMap<1 | 2, 1 | 2> | FMap<2 | 3, "2" | "3">
>Math.random() < 0.5 ? x1 : x2 : FMap<1 | 2, 1 | 2> | FMap<2 | 3, "2" | "3">
>Math.random() < 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>x1 : FMap<1 | 2, 1 | 2>
>x2 : FMap<2 | 3, "2" | "3">

x.g; // (method) FMap<T, R>.g(f: ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")): 1 | 2 | "2" | "3"
>x.g : ((f: (x: 1 | 2) => 1 | 2) => 1 | 2) | ((f: (x: 2 | 3) => "2" | "3") => "2" | "3")
>x : FMap<1 | 2, 1 | 2> | FMap<2 | 3, "2" | "3">
>g : ((f: (x: 1 | 2) => 1 | 2) => 1 | 2) | ((f: (x: 2 | 3) => "2" | "3") => "2" | "3")

function ft2(x:1|2):1|2;
>ft2 : { (x: 1 | 2): 1 | 2; (x: 3): "2" | "3"; (x: 1 | 2 | 3): 1 | 2 | "2" | "3"; }
>x : 1 | 2

function ft2(x:3):"2"|"3";
>ft2 : { (x: 1 | 2): 1 | 2; (x: 3): "2" | "3"; (x: 1 | 2 | 3): 1 | 2 | "2" | "3"; }
>x : 3

function ft2(x:1|2|3):1|2|"2"|"3";
>ft2 : { (x: 1 | 2): 1 | 2; (x: 3): "2" | "3"; (x: 1 | 2 | 3): 1 | 2 | "2" | "3"; }
>x : 1 | 2 | 3

function ft2(x:1|2|3):1|2|"2"|"3" {
>ft2 : { (x: 1 | 2): 1 | 2; (x: 3): "2" | "3"; (x: 1 | 2 | 3): 1 | 2 | "2" | "3"; }
>x : 1 | 2 | 3

    if (x!==3) return x1.f(x);
>x!==3 : boolean
>x : 1 | 2 | 3
>3 : 3
>x1.f(x) : 1 | 2
>x1.f : (x: 1 | 2) => 1 | 2
>x1 : FMap<1 | 2, 1 | 2>
>f : (x: 1 | 2) => 1 | 2
>x : 1 | 2

    else return x2.f(x);
>x2.f(x) : "2" | "3"
>x2.f : (x: 2 | 3) => "2" | "3"
>x2 : FMap<2 | 3, "2" | "3">
>f : (x: 2 | 3) => "2" | "3"
>x : 3
}
x.g(ft2); // error
>x.g(ft2) : 1 | 2 | "2" | "3"
>x.g : ((f: (x: 1 | 2) => 1 | 2) => 1 | 2) | ((f: (x: 2 | 3) => "2" | "3") => "2" | "3")
>x : FMap<1 | 2, 1 | 2> | FMap<2 | 3, "2" | "3">
>g : ((f: (x: 1 | 2) => 1 | 2) => 1 | 2) | ((f: (x: 2 | 3) => "2" | "3") => "2" | "3")
>ft2 : { (x: 1 | 2): 1 | 2; (x: 3): "2" | "3"; (x: 1 | 2 | 3): 1 | 2 | "2" | "3"; }

