_arrayFrom.ts(20,23): error TS2741: Property 'c' is missing in type '{ a: string; }' but required in type 'A'.
_arrayFrom.ts(32,15): error TS2741: Property 'c' is missing in type '{ a: string; }' but required in type 'A'.
_arrayFrom.ts(37,4): error TS2558: Expected 2 type arguments, but got 1.


==== _arrayFrom.ts (3 errors) ====
    interface A {
    a: string;
    c: string;
    }
    
    interface B {
    b: string;
    }
    const inputA: A[] = [];
    const inputB: B[] = [];
    //const result4: A[] = Array.from(inputB, ({ b }): A => ({ a: b }));
    type F1 = <T,U>(iterable: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any) => U[];
    declare const f1: F1;
    f1(inputB, ({ b })=>({ a: b }));
    
    type F2 = <T,U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any) => U[];
    declare const f2: F2;
    f2(inputB, ({ b })=>({ a: b }));
    
    f2(inputB, ({ b }):A=>({ a: b }));
                          ~~~~~~~~~~
!!! error TS2741: Property 'c' is missing in type '{ a: string; }' but required in type 'A'.
!!! related TS2728 _arrayFrom.ts:3:1: 'c' is declared here.
    
    //Array.from(inputB, ({ b }): A => ({ a: b }));
    
    //Array.from(inputA.values()); // no error, but it interferes with the next line
    
    //Array.from(inputB, ({ b }): A => ({ a: b }));
    
    type F3 = <T,U>(mapfn: (v: T, k: number) => U, iterable: Iterable<T> | ArrayLike<T>,thisArg?: any) => U[];
    declare const f3: F3;
    f3(({ b })=>({ a: b }), inputB);
    
    f3(({ b }):A=>({ a: b }), inputB);
                  ~~~~~~~~~~
!!! error TS2741: Property 'c' is missing in type '{ a: string; }' but required in type 'A'.
!!! related TS2728 _arrayFrom.ts:3:1: 'c' is declared here.
    
    type F4 = <T,U>(mapfn: (v: T, k: number) => U) => U[];
    type F5<T> = <U>(mapfn: (v: T, k: number) => U) => U[];
    declare const f4: F4;
    f4<B>(({ b })=>({ a: b }));
       ~
!!! error TS2558: Expected 2 type arguments, but got 1.
    
    
    declare const f5: F5<B>;
    f5(({ b })=>({ a: b }));
    
    
    
    