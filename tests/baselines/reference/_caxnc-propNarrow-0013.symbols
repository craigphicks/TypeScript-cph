=== tests/cases/conformance/_caxnc-prop/_caxnc-propNarrow-0013.ts ===
declare const x: boolean;
>x : Symbol(x, Decl(_caxnc-propNarrow-0013.ts, 0, 13))

let y = { a: 1};
>y : Symbol(y, Decl(_caxnc-propNarrow-0013.ts, 2, 3))
>a : Symbol(a, Decl(_caxnc-propNarrow-0013.ts, 2, 9))

let z = { a: "one", b: "two"};
>z : Symbol(z, Decl(_caxnc-propNarrow-0013.ts, 3, 3))
>a : Symbol(a, Decl(_caxnc-propNarrow-0013.ts, 3, 9))
>b : Symbol(b, Decl(_caxnc-propNarrow-0013.ts, 3, 19))

// @ts-dev-expect-string "count: 0, effectiveDeclaredTsType: { a: number; } | { a: string; b: string; }"
let r = x ? y : z;
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))
>x : Symbol(x, Decl(_caxnc-propNarrow-0013.ts, 0, 13))
>y : Symbol(y, Decl(_caxnc-propNarrow-0013.ts, 2, 3))
>z : Symbol(z, Decl(_caxnc-propNarrow-0013.ts, 3, 3))

if (r.b===undefined){
>r.b : Symbol(b, Decl(_caxnc-propNarrow-0013.ts, 3, 19))
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))
>b : Symbol(b, Decl(_caxnc-propNarrow-0013.ts, 3, 19))
>undefined : Symbol(undefined)

    r;
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))

    r.a;
>r.a : Symbol(a, Decl(_caxnc-propNarrow-0013.ts, 2, 9))
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))
>a : Symbol(a, Decl(_caxnc-propNarrow-0013.ts, 2, 9))

    // @ts-expect-error
    r.b;
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))
}
else {
    r;
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))

    r.a;
>r.a : Symbol(a, Decl(_caxnc-propNarrow-0013.ts, 3, 9))
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))
>a : Symbol(a, Decl(_caxnc-propNarrow-0013.ts, 3, 9))

    r.b;
>r.b : Symbol(b, Decl(_caxnc-propNarrow-0013.ts, 3, 19))
>r : Symbol(r, Decl(_caxnc-propNarrow-0013.ts, 5, 3))
>b : Symbol(b, Decl(_caxnc-propNarrow-0013.ts, 3, 19))
}

