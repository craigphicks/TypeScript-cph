=== tests/cases/conformance/_caxyc/_caxyc-fn-0030.ts ===
declare function foo(x:string): number[];
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))
>x : Symbol(x, Decl(_caxyc-fn-0030.ts, 0, 21))

declare function foo(x?:string,y?:string,...z:string[]): string[];
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))
>x : Symbol(x, Decl(_caxyc-fn-0030.ts, 1, 21))
>y : Symbol(y, Decl(_caxyc-fn-0030.ts, 1, 31))
>z : Symbol(z, Decl(_caxyc-fn-0030.ts, 1, 41))

declare function foo(...args:any[]): unknown;
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))
>args : Symbol(args, Decl(_caxyc-fn-0030.ts, 2, 21))

const a0 = foo();
>a0 : Symbol(a0, Decl(_caxyc-fn-0030.ts, 4, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))

a0; // expect string
>a0 : Symbol(a0, Decl(_caxyc-fn-0030.ts, 4, 5))

const a1 = foo("");
>a1 : Symbol(a1, Decl(_caxyc-fn-0030.ts, 6, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))

a1; // expect  number
>a1 : Symbol(a1, Decl(_caxyc-fn-0030.ts, 6, 5))

const a2 = foo("","");
>a2 : Symbol(a2, Decl(_caxyc-fn-0030.ts, 8, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))

a2; // expect string
>a2 : Symbol(a2, Decl(_caxyc-fn-0030.ts, 8, 5))

const a3 = foo("","","");
>a3 : Symbol(a3, Decl(_caxyc-fn-0030.ts, 10, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))

a3; // expect string
>a3 : Symbol(a3, Decl(_caxyc-fn-0030.ts, 10, 5))

const a4 = foo("","","","");
>a4 : Symbol(a4, Decl(_caxyc-fn-0030.ts, 12, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))

a4; // expect string
>a4 : Symbol(a4, Decl(_caxyc-fn-0030.ts, 12, 5))

const b1 = foo(undefined);
>b1 : Symbol(b1, Decl(_caxyc-fn-0030.ts, 14, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))
>undefined : Symbol(undefined)

b1; // expect string
>b1 : Symbol(b1, Decl(_caxyc-fn-0030.ts, 14, 5))

const b2 = foo(undefined,undefined);
>b2 : Symbol(b2, Decl(_caxyc-fn-0030.ts, 16, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)

b2; // expect string
>b2 : Symbol(b2, Decl(_caxyc-fn-0030.ts, 16, 5))

const b3 = foo(undefined,undefined,undefined);
>b3 : Symbol(b3, Decl(_caxyc-fn-0030.ts, 18, 5))
>foo : Symbol(foo, Decl(_caxyc-fn-0030.ts, 0, 0), Decl(_caxyc-fn-0030.ts, 0, 41), Decl(_caxyc-fn-0030.ts, 1, 66))
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)

b3; // expect unknown
>b3 : Symbol(b3, Decl(_caxyc-fn-0030.ts, 18, 5))

[a0,a1,a2,a3,a4,b1,b2,b3];
>a0 : Symbol(a0, Decl(_caxyc-fn-0030.ts, 4, 5))
>a1 : Symbol(a1, Decl(_caxyc-fn-0030.ts, 6, 5))
>a2 : Symbol(a2, Decl(_caxyc-fn-0030.ts, 8, 5))
>a3 : Symbol(a3, Decl(_caxyc-fn-0030.ts, 10, 5))
>a4 : Symbol(a4, Decl(_caxyc-fn-0030.ts, 12, 5))
>b1 : Symbol(b1, Decl(_caxyc-fn-0030.ts, 14, 5))
>b2 : Symbol(b2, Decl(_caxyc-fn-0030.ts, 16, 5))
>b3 : Symbol(b3, Decl(_caxyc-fn-0030.ts, 18, 5))


