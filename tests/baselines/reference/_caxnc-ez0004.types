//// [tests/cases/conformance/_caxnc/_caxnc-ez0004.ts] ////

=== _caxnc-ez0004.ts ===
declare type Foo = {
>Foo : { foo(x?: number): number[]; foo(x?: string, y?: string): string[]; }

    foo(x?:number):number[]
>foo : { (x?: number): number[]; (x?: undefined | string, y?: undefined | string): string[]; }
>x : undefined | number

    foo(x?:string,y?:string):string[]
>foo : { (x?: undefined | number): number[]; (x?: string, y?: string): string[]; }
>x : undefined | string
>y : undefined | string

};
declare type Boo = {
>Boo : { foo(x?: bigint): bigint[]; }

    foo(x?:bigint):bigint[]
>foo : (x?: bigint) => bigint[]
>x : bigint | undefined

};
declare const obj: Readonly<Foo> | Readonly<Boo> | undefined;
>obj : Readonly<Boo> | Readonly<Foo> | undefined

const isFoo = obj?.foo();
>isFoo : bigint[] | number[] | undefined
>obj?.foo() : bigint[] | number[] | undefined
>obj?.foo : ((x?: bigint | undefined) => bigint[]) | { (x?: undefined | number): number[]; (x?: undefined | string, y?: undefined | string): string[]; } | undefined
>obj : Readonly<Boo> | Readonly<Foo> | undefined
>foo : ((x?: bigint | undefined) => bigint[]) | { (x?: undefined | number): number[]; (x?: undefined | string, y?: undefined | string): string[]; } | undefined

// @ts-dev-debugger
if (isFoo) {
>isFoo : bigint[] | number[] | string[] | undefined

    let x = obj;
>x : Readonly<Boo> | Readonly<Foo>
>obj : Readonly<Boo> | Readonly<Foo>
}
else {
    obj;
>obj : undefined
}
