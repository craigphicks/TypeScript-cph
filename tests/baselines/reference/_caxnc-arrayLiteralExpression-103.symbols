//// [tests/cases/conformance/_caxnc/_caxnc-arrayLiteralExpression-103.ts] ////

=== _caxnc-arrayLiteralExpression-103.ts ===
declare const c: 0|1;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-103.ts, 0, 13))

let x = [c,c] as const;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-103.ts, 1, 3))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-103.ts, 0, 13))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-103.ts, 0, 13))
>const : Symbol(const)

if (x[0]===0) {
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-103.ts, 1, 3))
>0 : Symbol(0)

    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-103.ts, 1, 3))
>0 : Symbol(0)
}
else {
    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-103.ts, 1, 3))
>0 : Symbol(0)
}
x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-103.ts, 1, 3))
>0 : Symbol(0)

