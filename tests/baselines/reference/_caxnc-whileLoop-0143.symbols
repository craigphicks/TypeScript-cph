//// [tests/cases/conformance/_caxnc-loop/_caxnc-whileLoop-0143.ts] ////

=== _caxnc-whileLoop-0143.ts ===
function t43(){
>t43 : Symbol(t43, Decl(_caxnc-whileLoop-0143.ts, 0, 0))

    type D = 0 | 1 | 2 | 3 ;
>D : Symbol(D, Decl(_caxnc-whileLoop-0143.ts, 0, 15))

    let d1: D = 0;
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))
>D : Symbol(D, Decl(_caxnc-whileLoop-0143.ts, 0, 15))

    d1; // expect 0
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))

    while (true){
        let d2: D = 0;
>d2 : Symbol(d2, Decl(_caxnc-whileLoop-0143.ts, 5, 11))
>D : Symbol(D, Decl(_caxnc-whileLoop-0143.ts, 0, 15))

        d1; // expect 0
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))

        d2; // expect 0
>d2 : Symbol(d2, Decl(_caxnc-whileLoop-0143.ts, 5, 11))

        while (true){
            if (d2===0) {
>d2 : Symbol(d2, Decl(_caxnc-whileLoop-0143.ts, 5, 11))

                d2=1; break;
>d2 : Symbol(d2, Decl(_caxnc-whileLoop-0143.ts, 5, 11))
            }
        }
        d1; // expect 0
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))

        d2; // expect 1
>d2 : Symbol(d2, Decl(_caxnc-whileLoop-0143.ts, 5, 11))

        if (d1===0) {
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))

            d1=1;
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))

            break;
        }
        d1; // expect never
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))

        d2; // expect never
>d2 : Symbol(d2, Decl(_caxnc-whileLoop-0143.ts, 5, 11))
    }
    d1; // expect 1
>d1 : Symbol(d1, Decl(_caxnc-whileLoop-0143.ts, 2, 7))
}

