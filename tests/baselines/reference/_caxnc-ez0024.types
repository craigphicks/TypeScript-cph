//// [tests/cases/conformance/_caxnc/_caxnc-ez0024.ts] ////

=== _caxnc-ez0024.ts ===
declare interface FooA {
    foo(b:string): "1",
>foo : { (b: string): "1"; (b: number): 0; }
>b : string

    foo(b:number): 0;
>foo : { (b: string): "1"; (b: number): 0; }
>b : number

};
declare const obja: undefined | FooA;
>obja : FooA | undefined

declare const arg: string | number;
>arg : string | number

// @ts-expect-error
const isFoo = obja?.foo(arg);
>isFoo : undefined
>obja?.foo(arg) : undefined
>obja?.foo : { (b: string): "1"; (b: number): 0; } | undefined
>obja : FooA | undefined
>foo : { (b: string): "1"; (b: number): 0; } | undefined
>arg : string | number

if (isFoo===undefined){
>isFoo===undefined : boolean
>isFoo : "1" | 0 | undefined
>undefined : undefined

    isFoo; // expect undefined
>isFoo : undefined

    obja; // expect undefined
>obja : undefined

    arg; // expect string | number
>arg : string | number
}
else{
    isFoo; // expect "1" | 0
>isFoo : "1" | 0

    obja; // expect FooA
>obja : FooA

    arg; // expect string | number
>arg : string | number

    if (typeof isFoo === "string"){
>typeof isFoo === "string" : boolean
>typeof isFoo : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>isFoo : "1" | 0
>"string" : "string"

        isFoo; // expect "1"
>isFoo : "1"

        obja; // expect FooA
>obja : FooA

        arg; // expect string
>arg : string
    }
    else{
        isFoo; // expect 0
>isFoo : 0

        obja; // expect FooA
>obja : FooA

        arg; // expect number
>arg : number
    }
}

