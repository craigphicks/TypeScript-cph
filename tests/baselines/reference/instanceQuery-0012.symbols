//// [tests/cases/conformance/-instanceQuery/instanceQuery-0012.ts] ////

=== instanceQuery-0012.ts ===
namespace iq0012b {
>iq0012b : Symbol(iq0012b, Decl(instanceQuery-0012.ts, 0, 0))

    interface A1 {}
>A1 : Symbol(A1, Decl(instanceQuery-0012.ts, 0, 19), Decl(instanceQuery-0012.ts, 7, 17))

    interface A1Constructor {
>A1Constructor : Symbol(A1Constructor, Decl(instanceQuery-0012.ts, 2, 19))

        prototype: A1;
>prototype : Symbol(A1Constructor.prototype, Decl(instanceQuery-0012.ts, 3, 29))
>A1 : Symbol(A1, Decl(instanceQuery-0012.ts, 0, 19), Decl(instanceQuery-0012.ts, 7, 17))

        new(): A1;
>A1 : Symbol(A1, Decl(instanceQuery-0012.ts, 0, 19), Decl(instanceQuery-0012.ts, 7, 17))
    }
    declare const A1: A1Constructor;
>A1 : Symbol(A1, Decl(instanceQuery-0012.ts, 0, 19), Decl(instanceQuery-0012.ts, 7, 17))
>A1Constructor : Symbol(A1Constructor, Decl(instanceQuery-0012.ts, 2, 19))

    interface A2  extends A1 {}
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))
>A1 : Symbol(A1, Decl(instanceQuery-0012.ts, 0, 19), Decl(instanceQuery-0012.ts, 7, 17))

    interface A2Constructor {
>A2Constructor : Symbol(A2Constructor, Decl(instanceQuery-0012.ts, 9, 31))

        prototype: A2;
>prototype : Symbol(A2Constructor.prototype, Decl(instanceQuery-0012.ts, 10, 29))
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))

        new(): A2;
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))
    }
    declare const A2: A2Constructor;
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))
>A2Constructor : Symbol(A2Constructor, Decl(instanceQuery-0012.ts, 9, 31))

    declare let a1: instanceof A1;
>a1 : Symbol(a1, Decl(instanceQuery-0012.ts, 16, 15))

    declare let a2: instanceof A2;
>a2 : Symbol(a2, Decl(instanceQuery-0012.ts, 17, 15))

    const one = 1 as const;
>one : Symbol(one, Decl(instanceQuery-0012.ts, 18, 9))
>const : Symbol(const)

    const sym = Symbol();
>sym : Symbol(sym, Decl(instanceQuery-0012.ts, 19, 9))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2019.symbol.d.ts, --, --))

    ////////////////////////////////////////////////////////////////////
    // compare to rhs without instanceof -- none of these are errors, which might not be desirable.

    a1 satisfies A2; // not an error
>a1 : Symbol(a1, Decl(instanceQuery-0012.ts, 16, 15))
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))

    ({}) satisfies A2; // not an error
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))

    one satisfies A2; // not an error
>one : Symbol(one, Decl(instanceQuery-0012.ts, 18, 9))
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))

    1n satisfies A2; // not an error
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))

    sym satisfies A2; // not an error
>sym : Symbol(sym, Decl(instanceQuery-0012.ts, 19, 9))
>A2 : Symbol(A2, Decl(instanceQuery-0012.ts, 7, 36), Decl(instanceQuery-0012.ts, 14, 17))


    ////////////////////////////////////////////////////////////////////
    // using instanceof queries these can no be discriminated

    a1 satisfies instanceof A2; // should be error
>a1 : Symbol(a1, Decl(instanceQuery-0012.ts, 16, 15))

    ({}) satisfies instanceof A2; // should be error

    one satisfies instanceof A2; // should be error
>one : Symbol(one, Decl(instanceQuery-0012.ts, 18, 9))

    1n satisfies instanceof A2; // should be error

    sym satisfies instanceof A2; // should be error
>sym : Symbol(sym, Decl(instanceQuery-0012.ts, 19, 9))

}
