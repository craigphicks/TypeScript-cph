=== tests/cases/conformance/_caxnc/_caxnc-fn-0024.ts ===
declare function foo(x?:number):number[];
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))
>x : Symbol(x, Decl(_caxnc-fn-0024.ts, 0, 21))

declare function foo(x?:number,y?:string,z?:string):string[];
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))
>x : Symbol(x, Decl(_caxnc-fn-0024.ts, 1, 21))
>y : Symbol(y, Decl(_caxnc-fn-0024.ts, 1, 31))
>z : Symbol(z, Decl(_caxnc-fn-0024.ts, 1, 41))

const a1 = foo();
>a1 : Symbol(a1, Decl(_caxnc-fn-0024.ts, 2, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))

a1; // expect number[]
>a1 : Symbol(a1, Decl(_caxnc-fn-0024.ts, 2, 5))

const a2 = foo(1);
>a2 : Symbol(a2, Decl(_caxnc-fn-0024.ts, 4, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))

a2; // expect number[]
>a2 : Symbol(a2, Decl(_caxnc-fn-0024.ts, 4, 5))

const a3 = foo(1,"2");
>a3 : Symbol(a3, Decl(_caxnc-fn-0024.ts, 6, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))

a3; // expect string[]
>a3 : Symbol(a3, Decl(_caxnc-fn-0024.ts, 6, 5))

declare const x: [string,...string[]];
>x : Symbol(x, Decl(_caxnc-fn-0024.ts, 8, 13))

// a4 and a5 may be bugs
const a4 = foo(...[1,...x] as const);
>a4 : Symbol(a4, Decl(_caxnc-fn-0024.ts, 10, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))
>x : Symbol(x, Decl(_caxnc-fn-0024.ts, 8, 13))
>const : Symbol(const)

a4; // expect string[] even though there may be too many args
>a4 : Symbol(a4, Decl(_caxnc-fn-0024.ts, 10, 5))

declare const y: [...string[]];
>y : Symbol(y, Decl(_caxnc-fn-0024.ts, 12, 13))

const a5 = foo(...[1,...y] as const);
>a5 : Symbol(a5, Decl(_caxnc-fn-0024.ts, 13, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))
>y : Symbol(y, Decl(_caxnc-fn-0024.ts, 12, 13))
>const : Symbol(const)

a5; // expect number[] | string[] ???? but typescript says only string[]
>a5 : Symbol(a5, Decl(_caxnc-fn-0024.ts, 13, 5))

const z: [number,string] = [1,"2"];
>z : Symbol(z, Decl(_caxnc-fn-0024.ts, 15, 5))

const a6 = foo(...z);
>a6 : Symbol(a6, Decl(_caxnc-fn-0024.ts, 16, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0024.ts, 0, 0), Decl(_caxnc-fn-0024.ts, 0, 41))
>z : Symbol(z, Decl(_caxnc-fn-0024.ts, 15, 5))

a6; // expect string[]
>a6 : Symbol(a6, Decl(_caxnc-fn-0024.ts, 16, 5))

[a1,a2,a3,a4,a5,a6];
>a1 : Symbol(a1, Decl(_caxnc-fn-0024.ts, 2, 5))
>a2 : Symbol(a2, Decl(_caxnc-fn-0024.ts, 4, 5))
>a3 : Symbol(a3, Decl(_caxnc-fn-0024.ts, 6, 5))
>a4 : Symbol(a4, Decl(_caxnc-fn-0024.ts, 10, 5))
>a5 : Symbol(a5, Decl(_caxnc-fn-0024.ts, 13, 5))
>a6 : Symbol(a6, Decl(_caxnc-fn-0024.ts, 16, 5))

