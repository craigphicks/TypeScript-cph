//// [tests/cases/compiler/_uoafc.ts] ////

=== _uoafc.ts ===
interface Fizz {
    id: number;
>id : number

    fizz: string;
>fizz : string
}

interface Buzz {
    id: number;
>id : number

    buzz: string;
>buzz : string
}
// ([] as Fizz[]).filter(item => item.id < 5) satisfies Fizz[];
// ([] as Fizz[]).filter(Boolean) satisfies Fizz[];
// ([] as Fizz[]).filter(new Boolean) satisfies Fizz[]; // expect error

([] as Fizz[] | Buzz[]).filter(item => item.id < 5); //satisfies Fizz[] | Buzz[];
>([] as Fizz[] | Buzz[]).filter(item => item.id < 5) : Fizz[] | Buzz[]
>([] as Fizz[] | Buzz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>item => item.id < 5 : <T>(item: T) => boolean
>item : T
>item.id < 5 : boolean
>item.id : any
>item : T
>id : any
>5 : 5

// ([] as Fizz[] | Buzz[]).filter(Boolean) satisfies Fizz[] | Buzz[];
// ([] as Fizz[] | Buzz[]).filter(new Boolean) satisfies Fizz[] | Buzz[]; // expect error


