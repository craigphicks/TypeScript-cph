//// [tests/cases/compiler/_uoafc.ts] ////

=== _uoafc.ts ===
interface Fizz {
    id: number;
>id : number

    fizz: string;
>fizz : string
}

interface Buzz {
    id: number;
>id : number

    buzz: string;
>buzz : string
}
([] as Fizz[]).filter(item => item.id < 5) satisfies Fizz[];
>([] as Fizz[]).filter(item => item.id < 5) satisfies Fizz[] : Fizz[]
>([] as Fizz[]).filter(item => item.id < 5) : Fizz[]
>([] as Fizz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>([] as Fizz[]) : Fizz[]
>[] as Fizz[] : Fizz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>item => item.id < 5 : (item: Fizz) => boolean
>item : Fizz
>item.id < 5 : boolean
>item.id : number
>item : Fizz
>id : number
>5 : 5

([] as Fizz[]).filter(Boolean) satisfies Fizz[];
>([] as Fizz[]).filter(Boolean) satisfies Fizz[] : Fizz[]
>([] as Fizz[]).filter(Boolean) : Fizz[]
>([] as Fizz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>([] as Fizz[]) : Fizz[]
>[] as Fizz[] : Fizz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>Boolean : BooleanConstructor

([] as Fizz[]).filter(new Boolean) satisfies Fizz[]; // expect error
>([] as Fizz[]).filter(new Boolean) satisfies Fizz[] : Fizz[]
>([] as Fizz[]).filter(new Boolean) : Fizz[]
>([] as Fizz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>([] as Fizz[]) : Fizz[]
>[] as Fizz[] : Fizz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>new Boolean : Boolean
>Boolean : BooleanConstructor

([] as Fizz[] | Buzz[]).filter(item => item.id < 5) satisfies Fizz[] | Buzz[];
>([] as Fizz[] | Buzz[]).filter(item => item.id < 5) satisfies Fizz[] | Buzz[] : Fizz[] | Buzz[]
>([] as Fizz[] | Buzz[]).filter(item => item.id < 5) : Fizz[] | Buzz[]
>([] as Fizz[] | Buzz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>item => item.id < 5 : ((item: Fizz | Buzz) => boolean) | ((item: Fizz | Buzz) => boolean)
>item : Fizz | Buzz
>item.id < 5 : boolean
>item.id : number
>item : Fizz | Buzz
>id : number
>5 : 5

([] as Fizz[] | Buzz[]).filter(Boolean) satisfies Fizz[] | Buzz[];
>([] as Fizz[] | Buzz[]).filter(Boolean) satisfies Fizz[] | Buzz[] : Fizz[] | Buzz[]
>([] as Fizz[] | Buzz[]).filter(Boolean) : Fizz[] | Buzz[]
>([] as Fizz[] | Buzz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>Boolean : BooleanConstructor

([] as Fizz[] | Buzz[]).filter(new Boolean) satisfies Fizz[] | Buzz[]; // expect error
>([] as Fizz[] | Buzz[]).filter(new Boolean) satisfies Fizz[] | Buzz[] : Fizz[] | Buzz[]
>([] as Fizz[] | Buzz[]).filter(new Boolean) : Fizz[] | Buzz[]
>([] as Fizz[] | Buzz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Fizz[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: BooleanConverter, thisArg?: any): Buzz[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>new Boolean : Boolean
>Boolean : BooleanConstructor


