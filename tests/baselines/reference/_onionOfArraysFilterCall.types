//// [tests/cases/compiler/_onionOfArraysFilterCall.ts] ////

=== _onionOfArraysFilterCall.ts ===
interface Fizz {
    id: number;
>id : number

    fizz: string;
>fizz : string
}

interface Buzz {
    id: number;
>id : number

    buzz: string;
>buzz : string
}

// ([] as Fizz[] | Buzz[]).filter(item => item.id < 5);
// ([] as Fizz[] | readonly Buzz[]).filter(item => item.id < 5);

// ([] as Fizz[] | Buzz[]).find(item => item);
declare function isFizz(x: unknown): x is Fizz;
>isFizz : (x: unknown) => x is Fizz
>x : unknown

([] as Fizz[] | Buzz[]).find(isFizz);
>([] as Fizz[] | Buzz[]).find(isFizz) : Fizz
>([] as Fizz[] | Buzz[]).find : { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>find : { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; } | { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; }
>isFizz : (x: unknown) => x is Fizz

// type Find<T> = <S extends T>(predicate: (value: T, index: number, obj: T[]) => value is S, thisArg?: any) => S | undefined;

// isFizz satisfies Find<Fizz>;
// isFizz satisfies Find<any>;

// type Check<T> = typeof isFizz extends Find<T> ? true : false
// type C1 = Check<Fizz>;
// type C2 = Check<any>;


// declare function isBuzz(x: unknown): x is Buzz;
// ([] as Fizz[] | Buzz[]).find(isBuzz);

// ([] as Fizz[] | Buzz[]).every(item => item.id < 5);

// ([] as Fizz[] | Buzz[]).reduce(item => item);


// ([] as [Fizz] | readonly [Buzz?]).filter(item => item?.id < 5);
