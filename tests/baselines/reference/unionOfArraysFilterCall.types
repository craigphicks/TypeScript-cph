//// [tests/cases/compiler/unionOfArraysFilterCall.ts] ////

=== unionOfArraysFilterCall.ts ===
interface Fizz {
    id: number;
>id : number

    fizz: string;
>fizz : string
}

interface Buzz {
    id: number;
>id : number

    buzz: string;
>buzz : string
}

([] as Fizz[] | Buzz[]).filter(item => item.id < 5);
>([] as Fizz[] | Buzz[]).filter(item => item.id < 5) : (Fizz | Buzz)[]
>([] as Fizz[] | Buzz[]).filter : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => unknown, thisArg?: any): (Fizz | Buzz)[]; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>filter : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => unknown, thisArg?: any): (Fizz | Buzz)[]; }
>item => item.id < 5 : (item: Fizz | Buzz) => boolean
>item : Fizz | Buzz
>item.id < 5 : boolean
>item.id : number
>item : Fizz | Buzz
>id : number
>5 : 5

([] as Fizz[] | readonly Buzz[]).filter(item => item.id < 5); 
>([] as Fizz[] | readonly Buzz[]).filter(item => item.id < 5) : (Fizz | Buzz)[]
>([] as Fizz[] | readonly Buzz[]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S_1 extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S_1, thisArg?: any): S_1[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>([] as Fizz[] | readonly Buzz[]) : Fizz[] | readonly Buzz[]
>[] as Fizz[] | readonly Buzz[] : Fizz[] | readonly Buzz[]
>[] : undefined[]
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S_1 extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S_1, thisArg?: any): S_1[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>item => item.id < 5 : (item: Fizz | Buzz) => boolean
>item : Fizz | Buzz
>item.id < 5 : boolean
>item.id : number
>item : Fizz | Buzz
>id : number
>5 : 5

([] as Fizz[] | Buzz[]).find(item => item);
>([] as Fizz[] | Buzz[]).find(item => item) : Fizz | Buzz
>([] as Fizz[] | Buzz[]).find : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => unknown, thisArg?: any): Fizz | Buzz; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>find : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => unknown, thisArg?: any): Fizz | Buzz; }
>item => item : (item: Fizz | Buzz) => Fizz | Buzz
>item : Fizz | Buzz
>item : Fizz | Buzz

declare function isFizz(x: unknown): x is Fizz;
>isFizz : (x: unknown) => x is Fizz
>x : unknown

([] as Fizz[] | Buzz[]).find(isFizz);
>([] as Fizz[] | Buzz[]).find(isFizz) : Fizz
>([] as Fizz[] | Buzz[]).find : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => unknown, thisArg?: any): Fizz | Buzz; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>find : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => unknown, thisArg?: any): Fizz | Buzz; }
>isFizz : (x: unknown) => x is Fizz

declare function isBuzz(x: unknown): x is Buzz;
>isBuzz : (x: unknown) => x is Buzz
>x : unknown

([] as Fizz[] | Buzz[]).find(isBuzz);
>([] as Fizz[] | Buzz[]).find(isBuzz) : Buzz
>([] as Fizz[] | Buzz[]).find : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => unknown, thisArg?: any): Fizz | Buzz; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>find : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz | Buzz, index: number, obj: (Fizz | Buzz)[]) => unknown, thisArg?: any): Fizz | Buzz; }
>isBuzz : (x: unknown) => x is Buzz

([] as Fizz[] | Buzz[]).every(item => item.id < 5);
>([] as Fizz[] | Buzz[]).every(item => item.id < 5) : boolean
>([] as Fizz[] | Buzz[]).every : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => unknown, thisArg?: any): boolean; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>every : { <S extends Fizz | Buzz>(predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: Fizz | Buzz, index: number, array: (Fizz | Buzz)[]) => unknown, thisArg?: any): boolean; }
>item => item.id < 5 : (item: Fizz | Buzz) => boolean
>item : Fizz | Buzz
>item.id < 5 : boolean
>item.id : number
>item : Fizz | Buzz
>id : number
>5 : 5

([] as Fizz[] | Buzz[]).reduce(item => item);
>([] as Fizz[] | Buzz[]).reduce(item => item) : Fizz | Buzz
>([] as Fizz[] | Buzz[]).reduce : { (callbackfn: (previousValue: Fizz | Buzz, currentValue: Fizz | Buzz, currentIndex: number, array: (Fizz | Buzz)[]) => Fizz | Buzz): Fizz | Buzz; (callbackfn: (previousValue: Fizz | Buzz, currentValue: Fizz | Buzz, currentIndex: number, array: (Fizz | Buzz)[]) => Fizz | Buzz, initialValue: Fizz | Buzz): Fizz | Buzz; <U>(callbackfn: (previousValue: U, currentValue: Fizz | Buzz, currentIndex: number, array: (Fizz | Buzz)[]) => U, initialValue: U): U; }
>([] as Fizz[] | Buzz[]) : Fizz[] | Buzz[]
>[] as Fizz[] | Buzz[] : Fizz[] | Buzz[]
>[] : undefined[]
>reduce : { (callbackfn: (previousValue: Fizz | Buzz, currentValue: Fizz | Buzz, currentIndex: number, array: (Fizz | Buzz)[]) => Fizz | Buzz): Fizz | Buzz; (callbackfn: (previousValue: Fizz | Buzz, currentValue: Fizz | Buzz, currentIndex: number, array: (Fizz | Buzz)[]) => Fizz | Buzz, initialValue: Fizz | Buzz): Fizz | Buzz; <U>(callbackfn: (previousValue: U, currentValue: Fizz | Buzz, currentIndex: number, array: (Fizz | Buzz)[]) => U, initialValue: U): U; }
>item => item : (item: Fizz | Buzz) => Fizz | Buzz
>item : Fizz | Buzz
>item : Fizz | Buzz


([] as [Fizz] | readonly [Buzz?]).filter(item => item?.id < 5);
>([] as [Fizz] | readonly [Buzz?]).filter(item => item?.id < 5) : (Fizz | Buzz)[]
>([] as [Fizz] | readonly [Buzz?]).filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S_1 extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S_1, thisArg?: any): S_1[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>([] as [Fizz] | readonly [Buzz?]) : [Fizz] | readonly [Buzz?]
>[] as [Fizz] | readonly [Buzz?] : [Fizz] | readonly [Buzz?]
>[] : []
>filter : { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; } | { <S_1 extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S_1, thisArg?: any): S_1[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; }
>item => item?.id < 5 : (item: Fizz | Buzz) => boolean
>item : Fizz | Buzz
>item?.id < 5 : boolean
>item?.id : number
>item : Fizz | Buzz
>id : number
>5 : 5

