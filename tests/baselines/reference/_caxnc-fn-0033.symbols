//// [tests/cases/conformance/_caxnc/_caxnc-fn-0033.ts] ////

=== _caxnc-fn-0033.ts ===
declare function foo(x:string): number[];
>foo : Symbol(foo, Decl(_caxnc-fn-0033.ts, 0, 0), Decl(_caxnc-fn-0033.ts, 0, 41), Decl(_caxnc-fn-0033.ts, 1, 66))
>x : Symbol(x, Decl(_caxnc-fn-0033.ts, 0, 21))

declare function foo(x?:string,y?:string,...z:string[]): string[];
>foo : Symbol(foo, Decl(_caxnc-fn-0033.ts, 0, 0), Decl(_caxnc-fn-0033.ts, 0, 41), Decl(_caxnc-fn-0033.ts, 1, 66))
>x : Symbol(x, Decl(_caxnc-fn-0033.ts, 1, 21))
>y : Symbol(y, Decl(_caxnc-fn-0033.ts, 1, 31))
>z : Symbol(z, Decl(_caxnc-fn-0033.ts, 1, 41))

declare function foo(...args:any[]): never;
>foo : Symbol(foo, Decl(_caxnc-fn-0033.ts, 0, 0), Decl(_caxnc-fn-0033.ts, 0, 41), Decl(_caxnc-fn-0033.ts, 1, 66))
>args : Symbol(args, Decl(_caxnc-fn-0033.ts, 2, 21))

// const a0 = foo();
// a0; // expect string[]
// const a1 = foo("");
// a1; // expect  number[] | string[]
// const a2 = foo("","");
// a2; // expect string[]
// const a3 = foo("","","");
// a3; // expect string[]
// const a4 = foo("","","","");
// a4; // expect string[]
// const b1 = foo(undefined);
// b1; // expect string[]
// const b2 = foo(undefined,undefined);
// b2; // expect string[]
const b3 = foo(undefined,undefined,undefined);
>b3 : Symbol(b3, Decl(_caxnc-fn-0033.ts, 18, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0033.ts, 0, 0), Decl(_caxnc-fn-0033.ts, 0, 41), Decl(_caxnc-fn-0033.ts, 1, 66))
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)

b3; // expect never
>b3 : Symbol(b3, Decl(_caxnc-fn-0033.ts, 18, 5))

[b3];
>b3 : Symbol(b3, Decl(_caxnc-fn-0033.ts, 18, 5))

//[a0,a1,a2,a3,a4,b1,b2,b3];


