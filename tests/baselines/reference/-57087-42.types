//// [tests/cases/compiler/-test2/-57087-42.ts] ////

=== -57087-42.ts ===
type Callback<T> = (x:T[])=>T[];
>Callback : Callback<T>
>x : T[]

interface K<T> {
  f(x: Callback<T>):T[]
>f : (x: Callback<T>) => T[]
>x : Callback<T>
}

function gt<T>(c: Callback<T>) {
>gt : <T>(c: Callback<T>) => T[]
>c : Callback<T>

  return c(0 as any as T[]);
>c(0 as any as T[]) : T[]
>c : Callback<T>
>0 as any as T[] : T[]
>0 as any : any
>0 : 0
}

const callbackInstance0 = (x:any)=>x;
>callbackInstance0 : (x: any) => any
>(x:any)=>x : (x: any) => any
>x : any
>x : any

callbackInstance0 satisfies Callback<{a:string}> & Callback<{b:number}>;
>callbackInstance0 satisfies Callback<{a:string}> & Callback<{b:number}> : (x: any) => any
>callbackInstance0 : (x: any) => any
>a : string
>b : number

declare const callbackInstance1: Callback<{a:string}> & Callback<{b:number}>;
>callbackInstance1 : Callback<{ a: string; }> & Callback<{ b: number; }>
>a : string
>b : number

declare const k: K<{a:string}>|K<{b:number}>;
>k : K<{ a: string; }> | K<{ b: number; }>
>a : string
>b : number

const rk0 = k.f(callbackInstance0)[0];
>rk0 : { a: string; } | { b: number; }
>k.f(callbackInstance0)[0] : { a: string; } | { b: number; }
>k.f(callbackInstance0) : { a: string; }[] | { b: number; }[]
>k.f : ((x: Callback<{ a: string; }>) => { a: string; }[]) | ((x: Callback<{ b: number; }>) => { b: number; }[])
>k : K<{ a: string; }> | K<{ b: number; }>
>f : ((x: Callback<{ a: string; }>) => { a: string; }[]) | ((x: Callback<{ b: number; }>) => { b: number; }[])
>callbackInstance0 : (x: any) => any
>0 : 0

if ("a" in rk0) { rk0.a satisfies string; }
>"a" in rk0 : boolean
>"a" : "a"
>rk0 : { a: string; } | { b: number; }
>rk0.a satisfies string : string
>rk0.a : string
>rk0 : { a: string; }
>a : string

if ("b" in rk0) { rk0.b satisfies number; }
>"b" in rk0 : boolean
>"b" : "b"
>rk0 : { a: string; } | { b: number; }
>rk0.b satisfies number : number
>rk0.b : number
>rk0 : { b: number; }
>b : number

const rk1 = k.f(callbackInstance1)[0];
>rk1 : { a: string; } | { b: number; }
>k.f(callbackInstance1)[0] : { a: string; } | { b: number; }
>k.f(callbackInstance1) : { a: string; }[] | { b: number; }[]
>k.f : ((x: Callback<{ a: string; }>) => { a: string; }[]) | ((x: Callback<{ b: number; }>) => { b: number; }[])
>k : K<{ a: string; }> | K<{ b: number; }>
>f : ((x: Callback<{ a: string; }>) => { a: string; }[]) | ((x: Callback<{ b: number; }>) => { b: number; }[])
>callbackInstance1 : Callback<{ a: string; }> & Callback<{ b: number; }>
>0 : 0

if ("a" in rk1) { rk1.a satisfies string; }
>"a" in rk1 : boolean
>"a" : "a"
>rk1 : { a: string; } | { b: number; }
>rk1.a satisfies string : string
>rk1.a : string
>rk1 : { a: string; }
>a : string

if ("b" in rk1) { rk1.b satisfies number; }
>"b" in rk1 : boolean
>"b" : "b"
>rk1 : { a: string; } | { b: number; }
>rk1.b satisfies number : number
>rk1.b : number
>rk1 : { b: number; }
>b : number

declare const g: typeof gt<{a:string}> | typeof gt<{a:string}>
>g : typeof gt<{    a: string;}> | typeof gt<{    a: string;}>
>gt : <T>(c: Callback<T>) => T[]
>a : string
>gt : <T>(c: Callback<T>) => T[]
>a : string

const rg0 = g(callbackInstance0)[0];
>rg0 : { a: string; }
>g(callbackInstance0)[0] : { a: string; }
>g(callbackInstance0) : { a: string; }[]
>g : typeof gt<{    a: string;}> | typeof gt<{    a: string;}>
>callbackInstance0 : (x: any) => any
>0 : 0

if ("a" in rg0) { rg0.a satisfies string; }
>"a" in rg0 : boolean
>"a" : "a"
>rg0 : { a: string; }
>rg0.a satisfies string : string
>rg0.a : string
>rg0 : { a: string; }
>a : string

if ("b" in rg0) {
>"b" in rg0 : boolean
>"b" : "b"
>rg0 : { a: string; }

  rg0.b satisfies number; // this should pass but does not.
>rg0.b satisfies number : unknown
>rg0.b : unknown
>rg0 : { a: string; } & Record<"b", unknown>
>b : unknown
}

const rg1 = g(callbackInstance1)[0];
>rg1 : { a: string; }
>g(callbackInstance1)[0] : { a: string; }
>g(callbackInstance1) : { a: string; }[]
>g : typeof gt<{    a: string;}> | typeof gt<{    a: string;}>
>callbackInstance1 : Callback<{ a: string; }> & Callback<{ b: number; }>
>0 : 0

if ("a" in rg1) { rg1.a satisfies string; }
>"a" in rg1 : boolean
>"a" : "a"
>rg1 : { a: string; }
>rg1.a satisfies string : string
>rg1.a : string
>rg1 : { a: string; }
>a : string

if ("b" in rg1) {
>"b" in rg1 : boolean
>"b" : "b"
>rg1 : { a: string; }

  rg1.b satisfies number; // this should pass but does not.
>rg1.b satisfies number : unknown
>rg1.b : unknown
>rg1 : { a: string; } & Record<"b", unknown>
>b : unknown
}


