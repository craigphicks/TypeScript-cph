//// [tests/cases/conformance/-instanceQuery/instanceQuery-0014.ts] ////

=== instanceQuery-0014.ts ===
namespace iq0014a {
>iq0014a : Symbol(iq0014a, Decl(instanceQuery-0014.ts, 0, 0))

    class EmptyBase {}
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 0, 19))

    class A { a = 0; }
>A : Symbol(A, Decl(instanceQuery-0014.ts, 1, 22))
>a : Symbol(A.a, Decl(instanceQuery-0014.ts, 2, 13))

    function extendsEmptyBase<T extends EmptyBase>(x: T): x is (EmptyBase & T) {
>extendsEmptyBase : Symbol(extendsEmptyBase, Decl(instanceQuery-0014.ts, 2, 22))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 3, 30))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 0, 19))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 3, 51))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 3, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 3, 51))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 0, 19))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 3, 30))

        // no problem/error here
        return true;
    }
    declare const a: A | EmptyBase | {};
>a : Symbol(a, Decl(instanceQuery-0014.ts, 7, 17))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 1, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 0, 19))

    if (extendsEmptyBase(a)) {
>extendsEmptyBase : Symbol(extendsEmptyBase, Decl(instanceQuery-0014.ts, 2, 22))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 7, 17))

        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 7, 17))
    }
    else {
        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 7, 17))
    }
}

namespace iq0014b {
>iq0014b : Symbol(iq0014b, Decl(instanceQuery-0014.ts, 14, 1))

    class EmptyBase {}
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 16, 19))

    function f<T extends EmptyBase>(t: T): void {
>f : Symbol(f, Decl(instanceQuery-0014.ts, 17, 22))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 18, 15))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 16, 19))
>t : Symbol(t, Decl(instanceQuery-0014.ts, 18, 36))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 18, 15))

        const x = (0 as any as (instanceof EmptyBase) & T);
>x : Symbol(x, Decl(instanceQuery-0014.ts, 19, 13))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 18, 15))

        t = x;
>t : Symbol(t, Decl(instanceQuery-0014.ts, 18, 36))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 19, 13))
    }
}

namespace iq0014c {
>iq0014c : Symbol(iq0014c, Decl(instanceQuery-0014.ts, 22, 1), Decl(instanceQuery-0014.ts, 37, 1))

    class EmptyBase {}
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 24, 19))

    class A { a = 0; }
>A : Symbol(A, Decl(instanceQuery-0014.ts, 25, 22))
>a : Symbol(A.a, Decl(instanceQuery-0014.ts, 26, 13))

    function extendsEmptyBaseInstance<T extends Object>(x: T): x is ((instanceof EmptyBase) & T) {
>extendsEmptyBaseInstance : Symbol(extendsEmptyBaseInstance, Decl(instanceQuery-0014.ts, 26, 22))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 27, 38))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 27, 56))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 27, 38))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 27, 56))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 27, 38))

        return x instanceof EmptyBase;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 27, 56))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 24, 19))
    }
    declare const a: A | EmptyBase | {};
>a : Symbol(a, Decl(instanceQuery-0014.ts, 30, 17))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 25, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 24, 19))

    if (extendsEmptyBaseInstance(a)) {
>extendsEmptyBaseInstance : Symbol(extendsEmptyBaseInstance, Decl(instanceQuery-0014.ts, 26, 22))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 30, 17))

        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 30, 17))
    }
    else {
        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 30, 17))
    }
}

namespace iq0014c {
>iq0014c : Symbol(iq0014c, Decl(instanceQuery-0014.ts, 22, 1), Decl(instanceQuery-0014.ts, 37, 1))

    class EmptyBase {}
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 39, 19))

    class A extends EmptyBase{ a = 0; }
>A : Symbol(A, Decl(instanceQuery-0014.ts, 40, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 39, 19))
>a : Symbol(A.a, Decl(instanceQuery-0014.ts, 41, 30))

    function extendsAInstance<T extends Object>(x: T): x is (instanceof A) & T {
>extendsAInstance : Symbol(extendsAInstance, Decl(instanceQuery-0014.ts, 41, 39))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 43, 30))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 43, 48))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 43, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 43, 48))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 43, 30))

        return x instanceof A;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 43, 48))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 40, 22))
    }
    declare const a: instanceof EmptyBase ; //| (instanceof EmptyBase & A);
>a : Symbol(a, Decl(instanceQuery-0014.ts, 46, 17))

    if (extendsAInstance(a)) {
>extendsAInstance : Symbol(extendsAInstance, Decl(instanceQuery-0014.ts, 41, 39))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 46, 17))

        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 46, 17))
    }
    else {
        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 46, 17))
    }
}


namespace iq0014d {
>iq0014d : Symbol(iq0014d, Decl(instanceQuery-0014.ts, 53, 1))

    class EmptyBase {}
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 56, 19))

    class A extends EmptyBase { a = 0; }
>A : Symbol(A, Decl(instanceQuery-0014.ts, 57, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 56, 19))
>a : Symbol(A.a, Decl(instanceQuery-0014.ts, 58, 31))

    class B { a = 0; } // does not extend EmptyBase
>B : Symbol(B, Decl(instanceQuery-0014.ts, 58, 40))
>a : Symbol(B.a, Decl(instanceQuery-0014.ts, 59, 13))

    function extendsEmptyBaseInstance<T extends Object>(x: T): x is (instanceof EmptyBase) & T {
>extendsEmptyBaseInstance : Symbol(extendsEmptyBaseInstance, Decl(instanceQuery-0014.ts, 59, 22))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 60, 38))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 60, 56))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 60, 38))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 60, 56))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 60, 38))

        return x instanceof EmptyBase;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 60, 56))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 56, 19))
    }
    function extendsAInstance<T extends Object>(x: T): x is (instanceof A) & T {
>extendsAInstance : Symbol(extendsAInstance, Decl(instanceQuery-0014.ts, 62, 5))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 63, 30))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 63, 48))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 63, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 63, 48))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 63, 30))

        return x instanceof A;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 63, 48))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 57, 22))
    }
    function extendsBInstance<T extends Object>(x: T): x is (instanceof B) & T {
>extendsBInstance : Symbol(extendsBInstance, Decl(instanceQuery-0014.ts, 65, 5))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 66, 30))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 66, 48))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 66, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 66, 48))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 66, 30))

        return x instanceof B;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 66, 48))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 58, 40))
    }
    declare const a: A | EmptyBase | {};
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 57, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 56, 19))

    if (extendsEmptyBaseInstance(a)) {
>extendsEmptyBaseInstance : Symbol(extendsEmptyBaseInstance, Decl(instanceQuery-0014.ts, 59, 22))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))

        a; // ((instanceof EmptyBase & EmptyBase)) | ((instanceof EmptyBase & A)))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))

        if (extendsAInstance(a)) {
>extendsAInstance : Symbol(extendsAInstance, Decl(instanceQuery-0014.ts, 62, 5))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))

            a; // (instanceof A & (A & EmptyBase))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))
        }
        else {
            a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))
        }
        if (extendsBInstance(a)) {
>extendsBInstance : Symbol(extendsBInstance, Decl(instanceQuery-0014.ts, 65, 5))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))

            a; // never
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))
        }
        else {
            a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))
        }
    }
    else {
        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 69, 17))
    }
}

namespace iq0014e {
>iq0014e : Symbol(iq0014e, Decl(instanceQuery-0014.ts, 88, 1))

    class EmptyBase {}
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 90, 19))

    class A extends EmptyBase { a = 0; }
>A : Symbol(A, Decl(instanceQuery-0014.ts, 91, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 90, 19))
>a : Symbol(A.a, Decl(instanceQuery-0014.ts, 92, 31))

    class B { a = 0; } // does not extend EmptyBase
>B : Symbol(B, Decl(instanceQuery-0014.ts, 92, 40))
>a : Symbol(B.a, Decl(instanceQuery-0014.ts, 93, 13))

    function extendsEmptyBaseInstance<T>(x: T): x is (instanceof EmptyBase) & T {
>extendsEmptyBaseInstance : Symbol(extendsEmptyBaseInstance, Decl(instanceQuery-0014.ts, 93, 22))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 94, 38))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 94, 41))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 94, 38))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 94, 41))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 94, 38))

        return x instanceof EmptyBase;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 94, 41))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 90, 19))
    }
    function extendsAInstance<T>(x: T): x is (instanceof A) & T {
>extendsAInstance : Symbol(extendsAInstance, Decl(instanceQuery-0014.ts, 96, 5))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 97, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 97, 33))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 97, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 97, 33))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 97, 30))

        return x instanceof A;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 97, 33))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 91, 22))
    }
    function extendsBInstance<T>(x: T): x is (instanceof B) & T {
>extendsBInstance : Symbol(extendsBInstance, Decl(instanceQuery-0014.ts, 99, 5))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 100, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 100, 33))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 100, 30))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 100, 33))
>T : Symbol(T, Decl(instanceQuery-0014.ts, 100, 30))

        return x instanceof B;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 100, 33))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 92, 40))
    }
    declare const a: A | EmptyBase | {};
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 91, 22))
>EmptyBase : Symbol(EmptyBase, Decl(instanceQuery-0014.ts, 90, 19))

    if (extendsEmptyBaseInstance(a)) {
>extendsEmptyBaseInstance : Symbol(extendsEmptyBaseInstance, Decl(instanceQuery-0014.ts, 93, 22))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))

        a; // ((instanceof EmptyBase & EmptyBase)) | ((instanceof EmptyBase & A)))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))

        if (extendsAInstance(a)) {
>extendsAInstance : Symbol(extendsAInstance, Decl(instanceQuery-0014.ts, 96, 5))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))

            a; // (instanceof A & (A & EmptyBase))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))
        }
        else {
            a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))
        }
        if (extendsBInstance(a)) {
>extendsBInstance : Symbol(extendsBInstance, Decl(instanceQuery-0014.ts, 99, 5))
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))

            a; // never
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))
        }
        else {
            a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))
        }
    }
    else {
        a;
>a : Symbol(a, Decl(instanceQuery-0014.ts, 103, 17))
    }
}

namespace iq0014f {
>iq0014f : Symbol(iq0014f, Decl(instanceQuery-0014.ts, 122, 1))

    declare class Ax { a: number }
>Ax : Symbol(Ax, Decl(instanceQuery-0014.ts, 124, 19))
>a : Symbol(Ax.a, Decl(instanceQuery-0014.ts, 125, 22))

    declare class Bx extends Ax { b: number }
>Bx : Symbol(Bx, Decl(instanceQuery-0014.ts, 125, 34))
>Ax : Symbol(Ax, Decl(instanceQuery-0014.ts, 124, 19))
>b : Symbol(Bx.b, Decl(instanceQuery-0014.ts, 126, 33))

    declare class Cx extends Bx { c: number }
>Cx : Symbol(Cx, Decl(instanceQuery-0014.ts, 126, 45))
>Bx : Symbol(Bx, Decl(instanceQuery-0014.ts, 125, 34))
>c : Symbol(Cx.c, Decl(instanceQuery-0014.ts, 127, 33))

    type A = Ax
>A : Symbol(A, Decl(instanceQuery-0014.ts, 127, 45))
>Ax : Symbol(Ax, Decl(instanceQuery-0014.ts, 124, 19))

    type B = Bx
>B : Symbol(B, Decl(instanceQuery-0014.ts, 129, 15))
>Bx : Symbol(Bx, Decl(instanceQuery-0014.ts, 125, 34))

    type C = Cx
>C : Symbol(C, Decl(instanceQuery-0014.ts, 130, 15))
>Cx : Symbol(Cx, Decl(instanceQuery-0014.ts, 126, 45))

    type AB = A & B
>AB : Symbol(AB, Decl(instanceQuery-0014.ts, 131, 15))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 127, 45))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 129, 15))

    type AC = A & C
>AC : Symbol(AC, Decl(instanceQuery-0014.ts, 133, 19))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 127, 45))
>C : Symbol(C, Decl(instanceQuery-0014.ts, 130, 15))

    type BC = B & C
>BC : Symbol(BC, Decl(instanceQuery-0014.ts, 134, 19))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 129, 15))
>C : Symbol(C, Decl(instanceQuery-0014.ts, 130, 15))

    function isAB(x: any): x is AB {
>isAB : Symbol(isAB, Decl(instanceQuery-0014.ts, 135, 19))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 137, 18))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 137, 18))
>AB : Symbol(AB, Decl(instanceQuery-0014.ts, 131, 15))

        return true;
    }
    function isBC(x: any): x is BC {
>isBC : Symbol(isBC, Decl(instanceQuery-0014.ts, 139, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 140, 18))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 140, 18))
>BC : Symbol(BC, Decl(instanceQuery-0014.ts, 134, 19))

        return true;
    }
    function isAC(x: any): x is AC {
>isAC : Symbol(isAC, Decl(instanceQuery-0014.ts, 142, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 143, 18))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 143, 18))
>AC : Symbol(AC, Decl(instanceQuery-0014.ts, 133, 19))

        return true;
    }

    declare const x: A | B | C;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 147, 17))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 127, 45))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 129, 15))
>C : Symbol(C, Decl(instanceQuery-0014.ts, 130, 15))

    if (isAB(x)) {
>isAB : Symbol(isAB, Decl(instanceQuery-0014.ts, 135, 19))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 147, 17))

        x; // ABC
>x : Symbol(x, Decl(instanceQuery-0014.ts, 147, 17))

        if (isBC(x)) {
>isBC : Symbol(isBC, Decl(instanceQuery-0014.ts, 139, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 147, 17))

            x; // ABC
>x : Symbol(x, Decl(instanceQuery-0014.ts, 147, 17))

            if (isAC(x)) {
>isAC : Symbol(isAC, Decl(instanceQuery-0014.ts, 142, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 147, 17))

                x; // ABC
>x : Symbol(x, Decl(instanceQuery-0014.ts, 147, 17))
            }
        }
    }


}


namespace iq0014g {
>iq0014g : Symbol(iq0014g, Decl(instanceQuery-0014.ts, 159, 1))

    declare class Ax { a: number }
>Ax : Symbol(Ax, Decl(instanceQuery-0014.ts, 162, 19))
>a : Symbol(Ax.a, Decl(instanceQuery-0014.ts, 164, 22))

    declare class Bx extends Ax { b: number }
>Bx : Symbol(Bx, Decl(instanceQuery-0014.ts, 164, 34))
>Ax : Symbol(Ax, Decl(instanceQuery-0014.ts, 162, 19))
>b : Symbol(Bx.b, Decl(instanceQuery-0014.ts, 165, 33))

    declare class Cx extends Bx { c: number }
>Cx : Symbol(Cx, Decl(instanceQuery-0014.ts, 165, 45))
>Bx : Symbol(Bx, Decl(instanceQuery-0014.ts, 164, 34))
>c : Symbol(Cx.c, Decl(instanceQuery-0014.ts, 166, 33))

    type A = instanceof Ax
>A : Symbol(A, Decl(instanceQuery-0014.ts, 166, 45))

    type B = instanceof Bx
>B : Symbol(B, Decl(instanceQuery-0014.ts, 168, 26))

    type C = instanceof Cx
>C : Symbol(C, Decl(instanceQuery-0014.ts, 169, 26))

    type AB = A & B
>AB : Symbol(AB, Decl(instanceQuery-0014.ts, 170, 26))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 166, 45))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 168, 26))

    type AC = A & C
>AC : Symbol(AC, Decl(instanceQuery-0014.ts, 172, 19))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 166, 45))
>C : Symbol(C, Decl(instanceQuery-0014.ts, 169, 26))

    type BC = B & C
>BC : Symbol(BC, Decl(instanceQuery-0014.ts, 173, 19))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 168, 26))
>C : Symbol(C, Decl(instanceQuery-0014.ts, 169, 26))

    function isAB(x: any): x is AB {
>isAB : Symbol(isAB, Decl(instanceQuery-0014.ts, 174, 19))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 176, 18))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 176, 18))
>AB : Symbol(AB, Decl(instanceQuery-0014.ts, 170, 26))

        return true;
    }
    function isBC(x: any): x is BC {
>isBC : Symbol(isBC, Decl(instanceQuery-0014.ts, 178, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 179, 18))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 179, 18))
>BC : Symbol(BC, Decl(instanceQuery-0014.ts, 173, 19))

        return true;
    }
    function isAC(x: any): x is AC {
>isAC : Symbol(isAC, Decl(instanceQuery-0014.ts, 181, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 182, 18))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 182, 18))
>AC : Symbol(AC, Decl(instanceQuery-0014.ts, 172, 19))

        return true;
    }

    declare const x: A | B | C;
>x : Symbol(x, Decl(instanceQuery-0014.ts, 186, 17))
>A : Symbol(A, Decl(instanceQuery-0014.ts, 166, 45))
>B : Symbol(B, Decl(instanceQuery-0014.ts, 168, 26))
>C : Symbol(C, Decl(instanceQuery-0014.ts, 169, 26))

    if (isAB(x)) {
>isAB : Symbol(isAB, Decl(instanceQuery-0014.ts, 174, 19))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 186, 17))

        x; // ABC
>x : Symbol(x, Decl(instanceQuery-0014.ts, 186, 17))

        if (isBC(x)) {
>isBC : Symbol(isBC, Decl(instanceQuery-0014.ts, 178, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 186, 17))

            x; // ABC
>x : Symbol(x, Decl(instanceQuery-0014.ts, 186, 17))

            if (isAC(x)) {
>isAC : Symbol(isAC, Decl(instanceQuery-0014.ts, 181, 5))
>x : Symbol(x, Decl(instanceQuery-0014.ts, 186, 17))

                x; // ABC
>x : Symbol(x, Decl(instanceQuery-0014.ts, 186, 17))
            }
        }
    }

}
