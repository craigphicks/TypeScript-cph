//// [tests/cases/conformance/_caxnc-prop/_caxnc-propNarrow-0002.ts] ////

=== _caxnc-propNarrow-0002.ts ===
declare const x: boolean;
>x : boolean

// @ts-dev-expect-string "count: 0, effectiveDeclaredTsType: { readonly a: 1; } | { readonly a: 2; readonly b: 2; }"
let r = x ? { a: 1 } as const : { a: 2, b:2 } as const ;
>r : { readonly a: 1; readonly b?: undefined; } | { readonly a: 2; readonly b: 2; }
>x ? { a: 1 } as const : { a: 2, b:2 } as const : { readonly a: 1; } | { readonly a: 2; readonly b: 2; }
>x : boolean
>{ a: 1 } as const : { readonly a: 1; }
>{ a: 1 } : { readonly a: 1; }
>a : 1
>1 : 1
>{ a: 2, b:2 } as const : { readonly a: 2; readonly b: 2; }
>{ a: 2, b:2 } : { readonly a: 2; readonly b: 2; }
>a : 2
>2 : 2
>b : 2
>2 : 2

if (r.b){
>r.b : 2 | undefined
>r : { readonly a: 1; } | { readonly a: 2; readonly b: 2; }
>b : 2 | undefined

    r; // expect { readonly a: 2; readonly b: 2; }
>r : { readonly a: 2; readonly b: 2; }

    r.a; // expect 2
>r.a : 2
>r : { readonly a: 2; readonly b: 2; }
>a : 2

    r.b; // expect 2
>r.b : 2
>r : { readonly a: 2; readonly b: 2; }
>b : 2
}
else {
    r; // expect { readonly a: 1; }
>r : { readonly a: 1; }

    r.a; // expect 1
>r.a : 1
>r : { readonly a: 1; }
>a : 1

    r.b; // expect any (error)
>r.b : any
>r : { readonly a: 1; }
>b : any
}

