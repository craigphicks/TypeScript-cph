=== tests/cases/conformance/_caxnc/_caxnc-fn-0032.ts ===
declare function foo(x:string): number[];
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))
>x : Symbol(x, Decl(_caxnc-fn-0032.ts, 0, 21))

declare function foo(x?:string,y?:string,...z:string[]): string[];
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))
>x : Symbol(x, Decl(_caxnc-fn-0032.ts, 1, 21))
>y : Symbol(y, Decl(_caxnc-fn-0032.ts, 1, 31))
>z : Symbol(z, Decl(_caxnc-fn-0032.ts, 1, 41))

const a0 = foo();
>a0 : Symbol(a0, Decl(_caxnc-fn-0032.ts, 3, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))

a0; // expect string[]
>a0 : Symbol(a0, Decl(_caxnc-fn-0032.ts, 3, 5))

const a1 = foo("");
>a1 : Symbol(a1, Decl(_caxnc-fn-0032.ts, 5, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))

a1; // expect  number[] | string[]
>a1 : Symbol(a1, Decl(_caxnc-fn-0032.ts, 5, 5))

const a2 = foo("","");
>a2 : Symbol(a2, Decl(_caxnc-fn-0032.ts, 7, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))

a2; // expect string[]
>a2 : Symbol(a2, Decl(_caxnc-fn-0032.ts, 7, 5))

const a3 = foo("","","");
>a3 : Symbol(a3, Decl(_caxnc-fn-0032.ts, 9, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))

a3; // expect string[]
>a3 : Symbol(a3, Decl(_caxnc-fn-0032.ts, 9, 5))

const a4 = foo("","","","");
>a4 : Symbol(a4, Decl(_caxnc-fn-0032.ts, 11, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))

a4; // expect string[]
>a4 : Symbol(a4, Decl(_caxnc-fn-0032.ts, 11, 5))

const b1 = foo(undefined);
>b1 : Symbol(b1, Decl(_caxnc-fn-0032.ts, 13, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))
>undefined : Symbol(undefined)

b1; // expect string[]
>b1 : Symbol(b1, Decl(_caxnc-fn-0032.ts, 13, 5))

const b2 = foo(undefined,undefined);
>b2 : Symbol(b2, Decl(_caxnc-fn-0032.ts, 15, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)

b2; // expect string[]
>b2 : Symbol(b2, Decl(_caxnc-fn-0032.ts, 15, 5))

const b3 = foo(undefined,undefined,undefined);
>b3 : Symbol(b3, Decl(_caxnc-fn-0032.ts, 17, 5))
>foo : Symbol(foo, Decl(_caxnc-fn-0032.ts, 0, 0), Decl(_caxnc-fn-0032.ts, 0, 41))
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)

b3; // expect never
>b3 : Symbol(b3, Decl(_caxnc-fn-0032.ts, 17, 5))

[a0,a1,a2,a3,a4,b1,b2,b3]; // expect never[] and expect each element to be never
>a0 : Symbol(a0, Decl(_caxnc-fn-0032.ts, 3, 5))
>a1 : Symbol(a1, Decl(_caxnc-fn-0032.ts, 5, 5))
>a2 : Symbol(a2, Decl(_caxnc-fn-0032.ts, 7, 5))
>a3 : Symbol(a3, Decl(_caxnc-fn-0032.ts, 9, 5))
>a4 : Symbol(a4, Decl(_caxnc-fn-0032.ts, 11, 5))
>b1 : Symbol(b1, Decl(_caxnc-fn-0032.ts, 13, 5))
>b2 : Symbol(b2, Decl(_caxnc-fn-0032.ts, 15, 5))
>b3 : Symbol(b3, Decl(_caxnc-fn-0032.ts, 17, 5))


