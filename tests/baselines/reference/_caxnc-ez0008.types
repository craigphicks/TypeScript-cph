//// [tests/cases/conformance/_caxnc/_caxnc-ez0008.ts] ////

=== _caxnc-ez0008.ts ===
declare interface FooA {
    foo(b:string): "1",
>foo : { (b: string): "1"; (b: number): false; }
>b : string

    foo(b:number): false;
>foo : { (b: string): "1"; (b: number): false; }
>b : number
>false : false

};
declare const obja: undefined | FooA;
>obja : FooA | undefined

declare const arg: string | number;
>arg : string | number

// @ts-expect-error
const isFoo = obja?.foo(arg);
>isFoo : undefined
>obja?.foo(arg) : undefined
>obja?.foo : { (b: string): "1"; (b: number): false; } | undefined
>obja : FooA | undefined
>foo : { (b: string): "1"; (b: number): false; } | undefined
>arg : string | number

//const argIsString = typeof arg === "string";
if (isFoo){
>isFoo : "1" | false | undefined

    obja; // expect FooA
>obja : FooA

    arg; // expect string
>arg : string

    isFoo; // expect "1"
>isFoo : "1"

} else if (obja) {
>obja : FooA | undefined

    obja; // expect FooA
>obja : FooA

    arg; // expect string | number (correlation with obja not expected)
>arg : string | number

    isFoo; // expect false (intersectiing with !=="1", not due to evaluation with arg)
>isFoo : false

} else {
    obja; // expect undefined
>obja : undefined

    arg; // expect string | number
>arg : string | number

    isFoo; // expect undefined
>isFoo : undefined
}
obja; // expect undefined | FooA
>obja : FooA | undefined

arg; // expect string | number
>arg : string | number

isFoo; // expect "1" | false | undefined
>isFoo : "1" | false | undefined

