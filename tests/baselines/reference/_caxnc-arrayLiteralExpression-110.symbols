//// [tests/cases/conformance/_caxnc/_caxnc-arrayLiteralExpression-110.ts] ////

=== _caxnc-arrayLiteralExpression-110.ts ===
declare const b: boolean;
>b : Symbol(b, Decl(_caxnc-arrayLiteralExpression-110.ts, 0, 13))

declare const c: 0|1;
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-110.ts, 1, 13))

let x = [c] as const;
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-110.ts, 2, 3))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-110.ts, 1, 13))
>const : Symbol(const)

let y = [c] as const;
>y : Symbol(y, Decl(_caxnc-arrayLiteralExpression-110.ts, 3, 3))
>c : Symbol(c, Decl(_caxnc-arrayLiteralExpression-110.ts, 1, 13))
>const : Symbol(const)

if (x[0]===0) {
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-110.ts, 2, 3))
>0 : Symbol(0)

    x[0];
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-110.ts, 2, 3))
>0 : Symbol(0)

    if (y[0]===0) {
>y : Symbol(y, Decl(_caxnc-arrayLiteralExpression-110.ts, 3, 3))
>0 : Symbol(0)

        y[0];
>y : Symbol(y, Decl(_caxnc-arrayLiteralExpression-110.ts, 3, 3))
>0 : Symbol(0)

        // @ts-dev-debugger
        let z = b ? x : y;
>z : Symbol(z, Decl(_caxnc-arrayLiteralExpression-110.ts, 10, 11))
>b : Symbol(b, Decl(_caxnc-arrayLiteralExpression-110.ts, 0, 13))
>x : Symbol(x, Decl(_caxnc-arrayLiteralExpression-110.ts, 2, 3))
>y : Symbol(y, Decl(_caxnc-arrayLiteralExpression-110.ts, 3, 3))

        z[0];
>z : Symbol(z, Decl(_caxnc-arrayLiteralExpression-110.ts, 10, 11))
>0 : Symbol(0)
    }
}

