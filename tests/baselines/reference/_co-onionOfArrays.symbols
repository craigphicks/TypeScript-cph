//// [tests/cases/compiler/_co/_co-onionOfArrays.ts] ////

=== _co-onionOfArrays.ts ===
interface Fizz {
>Fizz : Symbol(Fizz, Decl(_co-onionOfArrays.ts, 0, 0))

    id: number;
>id : Symbol(Fizz.id, Decl(_co-onionOfArrays.ts, 0, 16))

    member: number;
>member : Symbol(Fizz.member, Decl(_co-onionOfArrays.ts, 1, 15))
}
interface Buzz {
>Buzz : Symbol(Buzz, Decl(_co-onionOfArrays.ts, 3, 1))

    id: number;
>id : Symbol(Buzz.id, Decl(_co-onionOfArrays.ts, 4, 16))

    member: string;
>member : Symbol(Buzz.member, Decl(_co-onionOfArrays.ts, 5, 15))
}



//const f = (x: any) => x && typeof x.member === "number";

([] as (Fizz|undefined)[] | (Buzz|undefined)[]).filter(x => x && x.member); // expect type (Fizz|Buzz|Falsey)[]
>([] as (Fizz|undefined)[] | (Buzz|undefined)[]).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Fizz : Symbol(Fizz, Decl(_co-onionOfArrays.ts, 0, 0))
>Buzz : Symbol(Buzz, Decl(_co-onionOfArrays.ts, 3, 1))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(_co-onionOfArrays.ts, 13, 55))
>x : Symbol(x, Decl(_co-onionOfArrays.ts, 13, 55))
>x.member : Symbol(member, Decl(_co-onionOfArrays.ts, 1, 15), Decl(_co-onionOfArrays.ts, 5, 15))
>x : Symbol(x, Decl(_co-onionOfArrays.ts, 13, 55))
>member : Symbol(member, Decl(_co-onionOfArrays.ts, 1, 15), Decl(_co-onionOfArrays.ts, 5, 15))


//([] as (Fizz|Falsey)[] | (Buzz|Falsey)[]).filter(x => x && typeof x.member === "number"); // expect type (Fizz|Buzz|Falsey)[]

// namespace X {
// type BooleanConstructor = ()=>boolean;
// //var Boolean: BooleanConstructor = ()=>true;
// ([] as (Fizz|Falsey)[] | (Buzz|Falsey)[]).filter((0 as any as BooleanConstructor)); // expect type (Fizz|Buzz)[]
// }
//declare const arr: (Fizz|Falsey)[];

//([] as (Fizz|Falsey)[] | (Buzz|Falsey)[]).filter((0 as any as BooleanConstructor)); // expect type (Fizz|Buzz)[]

// ([] as (Fizz|Falsey)[] | (Buzz|Falsey)[]).filter((0 as any as BooleanConstructor),
//     ([] as any as (Fizz|Falsey)[] | (Buzz|Falsey)[])); // expect type (Fizz|Buzz)[]

// ([] as (Fizz|Falsey)[] | (Buzz|Falsey)[]).filter((0 as any as BooleanConstructor),
//     ([] as any as (Fizz|Falsey)[] | (Buzz|Falsey)[])); // expect type (Fizz|Buzz)[]

