//// [tests/cases/compiler/_co/_co-onionOfArrays.ts] ////

=== _co-onionOfArrays.ts ===
declare const arrsn : string[]|number[];
>arrsn : Symbol(arrsn, Decl(_co-onionOfArrays.ts, 0, 13))

declare function strmapol(x:string):string;
>strmapol : Symbol(strmapol, Decl(_co-onionOfArrays.ts, 0, 40), Decl(_co-onionOfArrays.ts, 1, 43))
>x : Symbol(x, Decl(_co-onionOfArrays.ts, 1, 26))

declare function strmapol(x:number):number;
>strmapol : Symbol(strmapol, Decl(_co-onionOfArrays.ts, 0, 40), Decl(_co-onionOfArrays.ts, 1, 43))
>x : Symbol(x, Decl(_co-onionOfArrays.ts, 2, 26))

//declare function strmap(x:number|string):number|string;

// declare function strmapgen<T extends string|number>(x:T):T;

// //type ID = <I>() => (i: I) => I;

// declare const fstrmapgen: <T extends string|number>()=>(x:T)=>T;

// const fstrmapol = ()=>strmapol;




// arrsn.map(strmapgen); // 5.2.2. no error

// arrsn.map(fstrmapgen()); // 5.2.2. error

arrsn.map(strmapol); // 5.2.2 error
>arrsn.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>arrsn : Symbol(arrsn, Decl(_co-onionOfArrays.ts, 0, 13))
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>strmapol : Symbol(strmapol, Decl(_co-onionOfArrays.ts, 0, 40), Decl(_co-onionOfArrays.ts, 1, 43))

// arrsn.map(fstrmapol()); // 5.2.2. error
