//// [tests/cases/compiler/booleanConverter.ts] ////

=== booleanConverter.ts ===
const nullableValues = ['a', 'b', null];
>nullableValues : Symbol(nullableValues, Decl(booleanConverter.ts, 0, 5))

const values1 = nullableValues.filter(Boolean);
>values1 : Symbol(values1, Decl(booleanConverter.ts, 2, 5))
>nullableValues.filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>nullableValues : Symbol(nullableValues, Decl(booleanConverter.ts, 0, 5))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

// @ts-expect-error
const values2 = nullableValues.filter(new Boolean);
>values2 : Symbol(values2, Decl(booleanConverter.ts, 5, 5))
>nullableValues.filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>nullableValues : Symbol(nullableValues, Decl(booleanConverter.ts, 0, 5))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const arr = [0, 1, "", "foo", null] as const;
>arr : Symbol(arr, Decl(booleanConverter.ts, 7, 5))
>const : Symbol(const)

const arr2 = arr.filter(Boolean);
>arr2 : Symbol(arr2, Decl(booleanConverter.ts, 9, 5))
>arr.filter : Symbol(ReadonlyArray.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>arr : Symbol(arr, Decl(booleanConverter.ts, 7, 5))
>filter : Symbol(ReadonlyArray.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

declare const t:undefined | {};
>t : Symbol(t, Decl(booleanConverter.ts, 11, 13))

const x = Boolean(t) ? true : false;
>x : Symbol(x, Decl(booleanConverter.ts, 13, 5))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>t : Symbol(t, Decl(booleanConverter.ts, 11, 13))

x;
>x : Symbol(x, Decl(booleanConverter.ts, 13, 5))

if (Boolean(t)){
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>t : Symbol(t, Decl(booleanConverter.ts, 11, 13))

    t;
>t : Symbol(t, Decl(booleanConverter.ts, 11, 13))
}

