=== tests/cases/conformance/_caxnc-loop/_caxnc-whileLoop-0012.ts ===
// this loop never terminates because it always continues at `if (b)`
declare function maybe(): boolean;
>maybe : Symbol(maybe, Decl(_caxnc-whileLoop-0012.ts, 0, 0))

function t12(){
>t12 : Symbol(t12, Decl(_caxnc-whileLoop-0012.ts, 1, 34))

    let b = true;
>b : Symbol(b, Decl(_caxnc-whileLoop-0012.ts, 3, 7))

    let c = true;
>c : Symbol(c, Decl(_caxnc-whileLoop-0012.ts, 4, 7))

    let d = true;
>d : Symbol(d, Decl(_caxnc-whileLoop-0012.ts, 5, 7))

    // @ts-dev-expect-string "loopCount:1, invocations:1"
    while (d){
>d : Symbol(d, Decl(_caxnc-whileLoop-0012.ts, 5, 7))

        d = c;
>d : Symbol(d, Decl(_caxnc-whileLoop-0012.ts, 5, 7))
>c : Symbol(c, Decl(_caxnc-whileLoop-0012.ts, 4, 7))

        c = b;
>c : Symbol(c, Decl(_caxnc-whileLoop-0012.ts, 4, 7))
>b : Symbol(b, Decl(_caxnc-whileLoop-0012.ts, 3, 7))

        if (b) {
>b : Symbol(b, Decl(_caxnc-whileLoop-0012.ts, 3, 7))

            continue;
        }
        b = maybe();
>b : Symbol(b, Decl(_caxnc-whileLoop-0012.ts, 3, 7))
>maybe : Symbol(maybe, Decl(_caxnc-whileLoop-0012.ts, 0, 0))
    }
    let e = b;
>e : Symbol(e, Decl(_caxnc-whileLoop-0012.ts, 15, 7))
>b : Symbol(b, Decl(_caxnc-whileLoop-0012.ts, 3, 7))

    [b,c,d,e];
>b : Symbol(b, Decl(_caxnc-whileLoop-0012.ts, 3, 7))
>c : Symbol(c, Decl(_caxnc-whileLoop-0012.ts, 4, 7))
>d : Symbol(d, Decl(_caxnc-whileLoop-0012.ts, 5, 7))
>e : Symbol(e, Decl(_caxnc-whileLoop-0012.ts, 15, 7))
}

