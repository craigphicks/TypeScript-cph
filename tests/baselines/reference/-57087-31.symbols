//// [tests/cases/compiler/-test/-57087-31.ts] ////

=== -57087-31.ts ===
interface Garg31A {
>Garg31A : Symbol(Garg31A, Decl(-57087-31.ts, 0, 0))

    (): "01";
    (x:1, y:1): "211"
>x : Symbol(x, Decl(-57087-31.ts, 2, 5))
>y : Symbol(y, Decl(-57087-31.ts, 2, 9))

};
interface Garg31B {
>Garg31B : Symbol(Garg31B, Decl(-57087-31.ts, 3, 2))

    (): "02";
    (x:2, y:2): "222";
>x : Symbol(x, Decl(-57087-31.ts, 6, 5))
>y : Symbol(y, Decl(-57087-31.ts, 6, 9))

    (x:2, y:1): "221"
>x : Symbol(x, Decl(-57087-31.ts, 7, 5))
>y : Symbol(y, Decl(-57087-31.ts, 7, 9))

};

declare const f31a: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
>f31a : Symbol(f31a, Decl(-57087-31.ts, 10, 13))
>x : Symbol(x, Decl(-57087-31.ts, 10, 33))
>y : Symbol(y, Decl(-57087-31.ts, 10, 38))
>x : Symbol(x, Decl(-57087-31.ts, 10, 54))
>y : Symbol(y, Decl(-57087-31.ts, 10, 59))
>x : Symbol(x, Decl(-57087-31.ts, 10, 75))
>y : Symbol(y, Decl(-57087-31.ts, 10, 80))

f31a satisfies Garg31A & Garg31B; // should satisfy
>f31a : Symbol(f31a, Decl(-57087-31.ts, 10, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-31.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-31.ts, 3, 2))

declare const f31b: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221" /*should fail match*/; (x: 2, y: 1): "221"; }
>f31b : Symbol(f31b, Decl(-57087-31.ts, 13, 13))
>x : Symbol(x, Decl(-57087-31.ts, 13, 33))
>y : Symbol(y, Decl(-57087-31.ts, 13, 38))
>x : Symbol(x, Decl(-57087-31.ts, 13, 54))
>y : Symbol(y, Decl(-57087-31.ts, 13, 59))
>x : Symbol(x, Decl(-57087-31.ts, 13, 97))
>y : Symbol(y, Decl(-57087-31.ts, 13, 102))

f31b satisfies Garg31A & Garg31B; // should not satisfy
>f31b : Symbol(f31b, Decl(-57087-31.ts, 13, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-31.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-31.ts, 3, 2))

declare const f31c: { (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221" /*should fail match*/; }
>f31c : Symbol(f31c, Decl(-57087-31.ts, 16, 13))
>x : Symbol(x, Decl(-57087-31.ts, 16, 33))
>y : Symbol(y, Decl(-57087-31.ts, 16, 38))
>x : Symbol(x, Decl(-57087-31.ts, 16, 54))
>y : Symbol(y, Decl(-57087-31.ts, 16, 59))
>x : Symbol(x, Decl(-57087-31.ts, 16, 75))
>y : Symbol(y, Decl(-57087-31.ts, 16, 80))
>x : Symbol(x, Decl(-57087-31.ts, 16, 96))
>y : Symbol(y, Decl(-57087-31.ts, 16, 101))

f31c satisfies Garg31A & Garg31B; // should not satisfy
>f31c : Symbol(f31c, Decl(-57087-31.ts, 16, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-31.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-31.ts, 3, 2))

declare const f31d: { (): "01"; (x?: 1, y?: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }
>f31d : Symbol(f31d, Decl(-57087-31.ts, 19, 13))
>x : Symbol(x, Decl(-57087-31.ts, 19, 33))
>y : Symbol(y, Decl(-57087-31.ts, 19, 39))
>x : Symbol(x, Decl(-57087-31.ts, 19, 56))
>y : Symbol(y, Decl(-57087-31.ts, 19, 61))
>x : Symbol(x, Decl(-57087-31.ts, 19, 77))
>y : Symbol(y, Decl(-57087-31.ts, 19, 82))

f31d satisfies Garg31A & Garg31B; // should not satisfy
>f31d : Symbol(f31d, Decl(-57087-31.ts, 19, 13))
>Garg31A : Symbol(Garg31A, Decl(-57087-31.ts, 0, 0))
>Garg31B : Symbol(Garg31B, Decl(-57087-31.ts, 3, 2))

