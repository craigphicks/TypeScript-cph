=== tests/cases/conformance/_cax/_cax-ez0004.ts ===
declare type Foo = {
>Foo : Symbol(Foo, Decl(_cax-ez0004.ts, 0, 0))

    foo(x?:number):number[]
>foo : Symbol(foo, Decl(_cax-ez0004.ts, 0, 20), Decl(_cax-ez0004.ts, 1, 27))
>x : Symbol(x, Decl(_cax-ez0004.ts, 1, 8))

    foo(x?:string,y?:string):string[]
>foo : Symbol(foo, Decl(_cax-ez0004.ts, 0, 20), Decl(_cax-ez0004.ts, 1, 27))
>x : Symbol(x, Decl(_cax-ez0004.ts, 2, 8))
>y : Symbol(y, Decl(_cax-ez0004.ts, 2, 18))

};
declare type Boo = {
>Boo : Symbol(Boo, Decl(_cax-ez0004.ts, 3, 2))

    foo(x?:bigint):bigint[]
>foo : Symbol(foo, Decl(_cax-ez0004.ts, 4, 20))
>x : Symbol(x, Decl(_cax-ez0004.ts, 5, 8))

};
declare const obj: Readonly<Foo> | Readonly<Boo> | undefined;
>obj : Symbol(obj, Decl(_cax-ez0004.ts, 7, 13))
>Readonly : Symbol(Readonly, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(_cax-ez0004.ts, 0, 0))
>Readonly : Symbol(Readonly, Decl(lib.es5.d.ts, --, --))
>Boo : Symbol(Boo, Decl(_cax-ez0004.ts, 3, 2))

const isFoo = obj?.foo();
>isFoo : Symbol(isFoo, Decl(_cax-ez0004.ts, 8, 5))
>obj?.foo : Symbol(foo, Decl(_cax-ez0004.ts, 0, 20), Decl(_cax-ez0004.ts, 1, 27), Decl(_cax-ez0004.ts, 4, 20))
>obj : Symbol(obj, Decl(_cax-ez0004.ts, 7, 13))
>foo : Symbol(foo, Decl(_cax-ez0004.ts, 0, 20), Decl(_cax-ez0004.ts, 1, 27), Decl(_cax-ez0004.ts, 4, 20))

if (isFoo) {
>isFoo : Symbol(isFoo, Decl(_cax-ez0004.ts, 8, 5))

    let x = obj;
>x : Symbol(x, Decl(_cax-ez0004.ts, 10, 7))
>obj : Symbol(obj, Decl(_cax-ez0004.ts, 7, 13))
}
else {
    obj;
>obj : Symbol(obj, Decl(_cax-ez0004.ts, 7, 13))
}
