myDebug=true, myDisableInfer=false, myDisable=true, myNoAliasAction=true, myTestFilename=, currentTestFile=_caxnc-whileLoop-0001.ts
  checkSourceElement[in] node: [n32] function t1(){
    let b = true;
    b;
    // @ts-dev-expect-string "loopCount:2, invocations:1"
    while (b){
        let c = !b;
        c;
        let d = b;
        d;
        b = c;
    }
    let e = b;
    e;
    b;
}, [0,264], FunctionDeclaration
    checkSourceElement[in] node: [n34] {
    let b = true;
    b;
    // @ts-dev-expect-string "loopCount:2, invocations:1"
    while (b){
        let c = !b;
        c;
        let d = b;
        d;
        b = c;
    }
    let e = b;
    e;
    b;
}, [52,264], Block
      checkSourceElement[in] node: [n35] let b = true;, [53,71], VariableStatement
        checkSourceElement[in] node: [n16] b = true, [61,70], VariableDeclaration
          checkVariableLikeDeclaration[in]: node: [n16] b = true, [61,70], VariableDeclaration
            checkExpression[in] node: [n36] true, [65,70], TrueKeyword
            checkExpression[out]: [n36] true, [65,70], TrueKeyword -> true
            checkExpression[in] node: [n36] true, [65,70], TrueKeyword
            checkExpression[out]: [n36] true, [65,70], TrueKeyword -> true
          checkVariableLikeDeclaration[out]: node: [n16] b = true, [61,70], VariableDeclaration
        checkSourceElement[out]: nodeid: 16
      checkSourceElement[out]: nodeid: 35
      checkSourceElement[in] node: [n37] b;, [71,78], ExpressionStatement
        checkExpression[in] node: [n15] b, [71,77], Identifier
          getFlowTypeOfReference[in]: reference [n15] b, [71,77], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f9], Assignment|Referenced, [n16] b = true, [61,70], VariableDeclaration[gftor call depth:0
            getTypeByMrNarrow[in] expr: [n15] b, [71,77], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n15] b, [71,77], Identifier, maximalNode: [n15] b, [71,77], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 1, maximalNode: [n15] b, [71,77], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>0] [n16] b = true, [61,70], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[2=>1] [n15] b, [71,77], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n15] b, [71,77], Identifier}
              resolveGroupForFlow[in]: [n16] b = true, [61,70], VariableDeclaration, groupIndex:0, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n16] b = true, [61,70], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n16] b = true, [61,70], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypes[in] expr:[n36] true, [65,70], TrueKeyword, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n36] true, [65,70], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                      mrNarrowTypesInner[out] expr:[n36] true, [65,70], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n36] true, [65,70], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: true
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   type: true
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n36] true, [65,70], TrueKeyword, type: true
                    mrNarrowTypes[out] [n36] true, [65,70], TrueKeyword
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n36] true, [65,70], TrueKeyword, type: true
                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                  mrNarrowTypesInner[out] expr:[n16] b = true, [61,70], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n16] b = true, [61,70], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n36] true, [65,70], TrueKeyword, type: true
                mrNarrowTypes[out] byNode: node: [n16] b = true, [61,70], VariableDeclaration, type: true
                mrNarrowTypes[out] [n16] b = true, [61,70], VariableDeclaration
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n16] b = true, [61,70], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n16] b = true, [61,70], VariableDeclaration, 
              resolveGroupForFlow[in]: [n15] b, [71,77], Identifier, groupIndex:1, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n16] b = true, [61,70], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:0,<undefined>),  size before delete:1
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n15] b, [71,77], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16},  {isAssign:true},type:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n15] b, [71,77], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                  mrNarrowTypesInner[out] expr:[n15] b, [71,77], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n15] b, [71,77], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n15] b, [71,77], Identifier, type: true
                mrNarrowTypes[out] [n15] b, [71,77], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] b, [71,77], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n15] b, [71,77], Identifier, 
            getTypeByMrNarrow[out] expr: [n15] b, [71,77], Identifier -> true
          getFlowTypeOfReference[out]: reference [n15] b, [71,77], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f9], Assignment|Referenced, [n16] b = true, [61,70], VariableDeclaration[gftor call depth:0, return: true
        In getIdentifier(), getFlowTypeOfReference returned true
        checkExpression[out]: [n15] b, [71,77], Identifier -> true
      checkSourceElement[out]: nodeid: 37
      checkSourceElement[in] node: [n38] while (b){
        let c = !b;
        c;
        let d = b;
        d;
        b = c;
    }, [78,233], WhileStatement
        checkExpression[in] node: [n14] b, [148,149], Identifier
          getFlowTypeOfReference[in]: reference [n14] b, [148,149], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f7], LoopLabel|Label|Referenced|Shared, branchKind:preWhileLoop, [gftor call depth:0
            getTypeByMrNarrow[in] expr: [n14] b, [148,149], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n14] b, [148,149], Identifier, maximalNode: [n14] b, [148,149], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 2, maximalNode: [n14] b, [148,149], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>2] [n14] b, [148,149], Identifier
                updateHeapWithGroupForFlow[dbg] heap[2=>3] [n22] c = !b, [163,170], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[3=>4] [n21] c, [171,181], Identifier
                updateHeapWithGroupForFlow[dbg] heap[4=>5] [n20] d = b, [194,200], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[5=>6] [n19] d, [201,211], Identifier
                updateHeapWithGroupForFlow[dbg] heap[6=>7] [n17] b = c, [212,226], BinaryExpression
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n14] b, [148,149], Identifier}
              processLoop[in] loopGroup.groupIdx:2, currentLoopDepth:1
              processLoop[dbg] loopGroup.groupIdx:2, do the condition of the loop, loopCount:0, loopState.invocations:0
              CurrentBranchesMapC[0].delete(groupIdx:1,<undefined>),  size before delete:1
                resolveGroupForFlow[in]: [n14] b, [148,149], Identifier, groupIndex:2, kind:loop, maximalNode.parent.kind:WhileStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n14] b, [148,149], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n14] b, [148,149], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:false | true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                    mrNarrowTypesInner[out] expr:[n14] b, [148,149], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n14] b, [148,149], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: failing:      symbol:{b,16},  {isAssign:false},type:false}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:false | true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n14] b, [148,149], Identifier, type: boolean
                  mrNarrowTypes[out] [n14] b, [148,149], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n14] b, [148,149], Identifier, 
              processLoop[dbg] loopGroup.groupIdx:2, did the condition of the loop, loopCount:0, loopState.invocations:0
              processLoop[dbg] loopGroup.groupIdx:2, do the rest of the loop, loopCount:0, loopState.invocations:0
                resolveGroupForFlow[in]: [n22] c = !b, [163,170], VariableDeclaration, groupIndex:3, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:2,[then,]),  size before delete:1
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n22] c = !b, [163,170], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      symbol:{b,16},  {isAssign:false},type:true}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n22] c = !b, [163,170], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n24] !b, [167,170], PrefixUnaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{b,16},  {isAssign:false},type:true}
                          outer:[
                          outer:  symbol:{b,16},  {isAssign:true},type:true}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n24] !b, [167,170], PrefixUnaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypes[in] expr:[n25] b, [169,170], Identifier, crit:{kind:truthy,negate:true}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            x.loopState.symbolsAssigned:[]
                            x.loopState.symbolsAssignedRange:[]
                              symbol:{b,16},  {isAssign:false},type:true}
                              outer:[
                              outer:  symbol:{b,16},  {isAssign:true},type:true}
                              outer:]
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n25] b, [169,170], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                            mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                            mrNarrowTypesInner[out] expr:[n25] b, [169,170], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n25] b, [169,170], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:true}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: never
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: passing:      outer:[
                            mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypes[dbg]: passing:      outer:]
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled: <undefined>
                            mrNarrowTypes[dbg]: passing:       kind: never,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  {
                            mrNarrowTypes[dbg]: failing:    kind: return,
                            mrNarrowTypes[dbg]: failing:    type: true
                            mrNarrowTypes[dbg]: failing:    symtab: [
                            mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: failing:      symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypes[dbg]: failing:      outer:[
                            mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypes[dbg]: failing:      outer:]
                            mrNarrowTypes[dbg]: failing:    ]
                            mrNarrowTypes[dbg]: failing:    constraintItem: {
                            mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: failing:       kind: always,
                            mrNarrowTypes[dbg]: failing:      },
                            mrNarrowTypes[dbg]: failing:  }
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                            mrNarrowTypes[dbg]: unmerged[0]:   type: true
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n25] b, [169,170], Identifier, type: true
                          mrNarrowTypes[out] [n25] b, [169,170], Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: never
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled: <undefined>
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: never,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] b, [169,170], Identifier, type: true
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n24] !b, [167,170], PrefixUnaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n24] !b, [167,170], PrefixUnaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: false
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: never
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled: <undefined>
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: never,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                        mrNarrowTypes[dbg]: unmerged[1]: {
                        mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[1]:   type: false
                        mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[1]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[1]:   ]
                        mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[1]:     },
                        mrNarrowTypes[dbg]: unmerged[1]: }
                      mrNarrowTypes[out] byNode: node: [n25] b, [169,170], Identifier, type: true
                      mrNarrowTypes[out] byNode: node: [n24] !b, [167,170], PrefixUnaryExpression, type: false
                      mrNarrowTypes[out] [n24] !b, [167,170], PrefixUnaryExpression
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] b, [169,170], Identifier, type: true
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n24] !b, [167,170], PrefixUnaryExpression, type: false
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n22] c = !b, [163,170], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n22] c = !b, [163,170], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n25] b, [169,170], Identifier, type: true
                  mrNarrowTypes[out] byNode: node: [n24] !b, [167,170], PrefixUnaryExpression, type: false
                  mrNarrowTypes[out] byNode: node: [n22] c = !b, [163,170], VariableDeclaration, type: false
                  mrNarrowTypes[out] [n22] c = !b, [163,170], VariableDeclaration
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] c = !b, [163,170], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n22] c = !b, [163,170], VariableDeclaration, 
                resolveGroupForFlow[in]: [n21] c, [171,181], Identifier, groupIndex:4, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n22] c = !b, [163,170], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:3
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:3,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n21] c, [171,181], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n21] c, [171,181], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                    mrNarrowTypesInner[out] expr:[n21] c, [171,181], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n21] c, [171,181], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n21] c, [171,181], Identifier, type: false
                  mrNarrowTypes[out] [n21] c, [171,181], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] c, [171,181], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n21] c, [171,181], Identifier, 
                resolveGroupForFlow[in]: [n20] d = b, [194,200], VariableDeclaration, groupIndex:5, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] c, [171,181], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:4,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n20] d = b, [194,200], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n20] d = b, [194,200], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n27] b, [198,200], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                          symbol:{b,16},  {isAssign:false},type:true}
                          symbol:{c,17},  {isAssign:true},type:false}
                          outer:[
                          outer:  symbol:{b,16},  {isAssign:true},type:true}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n27] b, [198,200], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                        mrNarrowTypesInner[out] expr:[n27] b, [198,200], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n27] b, [198,200], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n27] b, [198,200], Identifier, type: true
                      mrNarrowTypes[out] [n27] b, [198,200], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n27] b, [198,200], Identifier, type: true
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n20] d = b, [194,200], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n20] d = b, [194,200], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n27] b, [198,200], Identifier, type: true
                  mrNarrowTypes[out] byNode: node: [n20] d = b, [194,200], VariableDeclaration, type: true
                  mrNarrowTypes[out] [n20] d = b, [194,200], VariableDeclaration
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n20] d = b, [194,200], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n20] d = b, [194,200], VariableDeclaration, 
                resolveGroupForFlow[in]: [n19] d, [201,211], Identifier, groupIndex:6, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n20] d = b, [194,200], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:5,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n19] d, [201,211], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      symbol:{d,18},  {isAssign:true},type:true}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n19] d, [201,211], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:18, ename: d }, isconst: false
                    mrNarrowTypesInner[out] expr:[n19] d, [201,211], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n19] d, [201,211], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n19] d, [201,211], Identifier, type: true
                  mrNarrowTypes[out] [n19] d, [201,211], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d, [201,211], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n19] d, [201,211], Identifier, 
                resolveGroupForFlow[in]: [n17] b = c, [212,226], BinaryExpression, groupIndex:7, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d, [201,211], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:6,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n17] b = c, [212,226], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      symbol:{d,18},  {isAssign:true},type:true}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n17] b = c, [212,226], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n28] c, [224,226], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                          symbol:{b,16},  {isAssign:false},type:true}
                          symbol:{c,17},  {isAssign:true},type:false}
                          symbol:{d,18},  {isAssign:true},type:true}
                          outer:[
                          outer:  symbol:{b,16},  {isAssign:true},type:true}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n28] c, [224,226], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                        mrNarrowTypesInner[out] expr:[n28] c, [224,226], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n28] c, [224,226], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: false
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n28] c, [224,226], Identifier, type: false
                      mrNarrowTypes[out] [n28] c, [224,226], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },{ id:16, ename: b },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n28] c, [224,226], Identifier, type: false
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n17] b = c, [212,226], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n17] b = c, [212,226], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n28] c, [224,226], Identifier, type: false
                  mrNarrowTypes[out] byNode: node: [n17] b = c, [212,226], BinaryExpression, type: false
                  mrNarrowTypes[out] [n17] b = c, [212,226], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n17] b = c, [212,226], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:17, ename: c },{ id:18, ename: d },{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false{symbol:{ id:17, ename: c }, type:false{symbol:{ id:18, ename: d }, type:true]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n17] b = c, [212,226], BinaryExpression, 
              processLoop[dbg] loopGroup.groupIdx:2, did the rest of the loop, loopCount:0, loopState.invocations:0
              postBlock: descoping symbol { id:17, ename: c }
              postBlock: descoping symbol { id:18, ename: d }
              CurrentBranchesMapC[0].delete(groupIdx:7,<undefined>),  size before delete:2
              processLoop[dbg] loopGroup.groupIdx:2, loop converged, loopCount=0, loopState.invocations:0
              processLoop[dbg out] loopIdx:2, gIdx:2: groupIdx:2, cbe.kind:2, node:[[n14] b, [148,149], Identifier]
              processLoop[dbg out] loopIdx:2, gIdx:2:   true:
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         [
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:[
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         ]
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
              processLoop[dbg out] loopIdx:2, gIdx:2:   false:
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         [
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:[
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         ]
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
              processLoop[dbg out] loopIdx:2, gIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:2, gIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
              processLoop[out] loopGroup.groupIdx:2, currentLoopDepth:1, maxGroupIdxProcessed:7, loopState.invocations:0
              updateHeapWithGroupForFlow[in]: group idxs:[2,7,6,5,4,3]
              updateHeapWithGroupForFlow[in]: heap group idxs:[2,3,4,5,6,7,]
              processLoop[in] loopGroup.groupIdx:2, currentLoopDepth:1
              CurrentBranchesMapC[0].delete(groupIdx:2,<undefined>),  size before delete:1
              processLoop[dbg] loopGroup.groupIdx:2, do the condition of the loop, loopCount:0, loopState.invocations:1
                resolveGroupForFlow[in]: [n14] b, [148,149], Identifier, groupIndex:2, kind:loop, maximalNode.parent.kind:WhileStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n14] b, [148,149], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    x.loopState.symbolsAssignedRange:[]
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n14] b, [148,149], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:false | true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                    mrNarrowTypesInner[out] expr:[n14] b, [148,149], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n14] b, [148,149], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: failing:      symbol:{b,16},  {isAssign:false},type:false}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:false | true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n14] b, [148,149], Identifier, type: boolean
                  mrNarrowTypes[out] [n14] b, [148,149], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n14] b, [148,149], Identifier, 
              processLoop[dbg] loopGroup.groupIdx:2, did the condition of the loop, loopCount:0, loopState.invocations:1
              processLoop[dbg] loopGroup.groupIdx:2, do the rest of the loop, loopCount:0, loopState.invocations:1
                resolveGroupForFlow[in]: [n22] c = !b, [163,170], VariableDeclaration, groupIndex:3, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:2,[then,]),  size before delete:1
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n22] c = !b, [163,170], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                      symbol:{b,16},  {isAssign:false},type:true}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n22] c = !b, [163,170], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n24] !b, [167,170], PrefixUnaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                          symbol:{b,16},  {isAssign:false},type:true}
                          outer:[
                          outer:  symbol:{b,16},  {isAssign:true},type:true}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n24] !b, [167,170], PrefixUnaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypes[in] expr:[n25] b, [169,170], Identifier, crit:{kind:truthy,negate:true}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                            x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                              symbol:{b,16},  {isAssign:false},type:true}
                              outer:[
                              outer:  symbol:{b,16},  {isAssign:true},type:true}
                              outer:]
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n25] b, [169,170], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                            mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                            mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                            mrNarrowTypesInner[out] expr:[n25] b, [169,170], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n25] b, [169,170], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:true}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: never
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: passing:      outer:[
                            mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypes[dbg]: passing:      outer:]
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled: <undefined>
                            mrNarrowTypes[dbg]: passing:       kind: never,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  {
                            mrNarrowTypes[dbg]: failing:    kind: return,
                            mrNarrowTypes[dbg]: failing:    type: true
                            mrNarrowTypes[dbg]: failing:    symtab: [
                            mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                            mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                            mrNarrowTypes[dbg]: failing:      symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypes[dbg]: failing:      outer:[
                            mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypes[dbg]: failing:      outer:]
                            mrNarrowTypes[dbg]: failing:    ]
                            mrNarrowTypes[dbg]: failing:    constraintItem: {
                            mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: failing:       kind: always,
                            mrNarrowTypes[dbg]: failing:      },
                            mrNarrowTypes[dbg]: failing:  }
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                            mrNarrowTypes[dbg]: unmerged[0]:   type: true
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                            mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n25] b, [169,170], Identifier, type: true
                          mrNarrowTypes[out] [n25] b, [169,170], Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: never
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled: <undefined>
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: never,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] b, [169,170], Identifier, type: true
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n24] !b, [167,170], PrefixUnaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n24] !b, [167,170], PrefixUnaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: false
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: never
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled: <undefined>
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: never,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                        mrNarrowTypes[dbg]: unmerged[1]: {
                        mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[1]:   type: false
                        mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypes[dbg]: unmerged[1]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[1]:   ]
                        mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[1]:     },
                        mrNarrowTypes[dbg]: unmerged[1]: }
                      mrNarrowTypes[out] byNode: node: [n25] b, [169,170], Identifier, type: true
                      mrNarrowTypes[out] byNode: node: [n24] !b, [167,170], PrefixUnaryExpression, type: false
                      mrNarrowTypes[out] [n24] !b, [167,170], PrefixUnaryExpression
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] b, [169,170], Identifier, type: true
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n24] !b, [167,170], PrefixUnaryExpression, type: false
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n22] c = !b, [163,170], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n22] c = !b, [163,170], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n25] b, [169,170], Identifier, type: true
                  mrNarrowTypes[out] byNode: node: [n24] !b, [167,170], PrefixUnaryExpression, type: false
                  mrNarrowTypes[out] byNode: node: [n22] c = !b, [163,170], VariableDeclaration, type: false
                  mrNarrowTypes[out] [n22] c = !b, [163,170], VariableDeclaration
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] c = !b, [163,170], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n22] c = !b, [163,170], VariableDeclaration, 
                resolveGroupForFlow[in]: [n21] c, [171,181], Identifier, groupIndex:4, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n22] c = !b, [163,170], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:3
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:3,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n21] c, [171,181], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n21] c, [171,181], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                    mrNarrowTypesInner[out] expr:[n21] c, [171,181], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n21] c, [171,181], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n21] c, [171,181], Identifier, type: false
                  mrNarrowTypes[out] [n21] c, [171,181], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] c, [171,181], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n21] c, [171,181], Identifier, 
                resolveGroupForFlow[in]: [n20] d = b, [194,200], VariableDeclaration, groupIndex:5, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] c, [171,181], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:4,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n20] d = b, [194,200], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n20] d = b, [194,200], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n27] b, [198,200], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                          symbol:{b,16},  {isAssign:false},type:true}
                          symbol:{c,17},  {isAssign:true},type:false}
                          outer:[
                          outer:  symbol:{b,16},  {isAssign:true},type:true}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n27] b, [198,200], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                        mrNarrowTypesInner[out] expr:[n27] b, [198,200], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n27] b, [198,200], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n27] b, [198,200], Identifier, type: true
                      mrNarrowTypes[out] [n27] b, [198,200], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n27] b, [198,200], Identifier, type: true
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n20] d = b, [194,200], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n20] d = b, [194,200], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n27] b, [198,200], Identifier, type: true
                  mrNarrowTypes[out] byNode: node: [n20] d = b, [194,200], VariableDeclaration, type: true
                  mrNarrowTypes[out] [n20] d = b, [194,200], VariableDeclaration
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n20] d = b, [194,200], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n20] d = b, [194,200], VariableDeclaration, 
                resolveGroupForFlow[in]: [n19] d, [201,211], Identifier, groupIndex:6, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n20] d = b, [194,200], VariableDeclaration]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:5,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n19] d, [201,211], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      symbol:{d,18},  {isAssign:true},type:true}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n19] d, [201,211], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:18, ename: d }, isconst: false
                    mrNarrowTypesInner[out] expr:[n19] d, [201,211], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n19] d, [201,211], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n19] d, [201,211], Identifier, type: true
                  mrNarrowTypes[out] [n19] d, [201,211], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d, [201,211], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n19] d, [201,211], Identifier, 
                resolveGroupForFlow[in]: [n17] b = c, [212,226], BinaryExpression, groupIndex:7, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d, [201,211], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:6,<undefined>),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n17] b = c, [212,226], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                      symbol:{b,16},  {isAssign:false},type:true}
                      symbol:{c,17},  {isAssign:true},type:false}
                      symbol:{d,18},  {isAssign:true},type:true}
                      outer:[
                      outer:  symbol:{b,16},  {isAssign:true},type:true}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n17] b = c, [212,226], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n28] c, [224,226], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                          symbol:{b,16},  {isAssign:false},type:true}
                          symbol:{c,17},  {isAssign:true},type:false}
                          symbol:{d,18},  {isAssign:true},type:true}
                          outer:[
                          outer:  symbol:{b,16},  {isAssign:true},type:true}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n28] c, [224,226], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                        mrNarrowTypesInner[out] expr:[n28] c, [224,226], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n28] c, [224,226], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: false
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:false},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n28] c, [224,226], Identifier, type: false
                      mrNarrowTypes[out] [n28] c, [224,226], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n28] c, [224,226], Identifier, type: false
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n17] b = c, [212,226], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n17] b = c, [212,226], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17},  {isAssign:true},type:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16},  {isAssign:true},type:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n28] c, [224,226], Identifier, type: false
                  mrNarrowTypes[out] byNode: node: [n17] b = c, [212,226], BinaryExpression, type: false
                  mrNarrowTypes[out] [n17] b = c, [212,226], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n17] b = c, [212,226], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17},  {isAssign:true},type:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n17] b = c, [212,226], BinaryExpression, 
              processLoop[dbg] loopGroup.groupIdx:2, did the rest of the loop, loopCount:0, loopState.invocations:1
              postBlock: descoping symbol { id:17, ename: c }
              postBlock: descoping symbol { id:18, ename: d }
              CurrentBranchesMapC[0].delete(groupIdx:7,<undefined>),  size before delete:2
              processLoop[dbg] loopGroup.groupIdx:2, loop converged, loopCount=0, loopState.invocations:1
              processLoop[dbg out] loopIdx:2, gIdx:2: groupIdx:2, cbe.kind:2, node:[[n14] b, [148,149], Identifier]
              processLoop[dbg out] loopIdx:2, gIdx:2:   true:
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         [
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:[
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         ]
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
              processLoop[dbg out] loopIdx:2, gIdx:2:   false:
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         [
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:[
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:]
              processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         ]
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
              processLoop[dbg out] loopIdx:2, gIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:2, gIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
              processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
              processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
              processLoop[out] loopGroup.groupIdx:2, currentLoopDepth:1, maxGroupIdxProcessed:7, loopState.invocations:1
            getTypeByMrNarrow[out] expr: [n14] b, [148,149], Identifier -> boolean
          getFlowTypeOfReference[out]: reference [n14] b, [148,149], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f7], LoopLabel|Label|Referenced|Shared, branchKind:preWhileLoop, [gftor call depth:0, return: boolean
        In getIdentifier(), getFlowTypeOfReference returned boolean
        checkExpression[out]: [n14] b, [148,149], Identifier -> boolean
        checkSourceElement[in] node: [n33] {
        let c = !b;
        c;
        let d = b;
        d;
        b = c;
    }, [150,233], Block
          checkSourceElement[in] node: [n39] let c = !b;, [151,171], VariableStatement
            checkSourceElement[in] node: [n22] c = !b, [163,170], VariableDeclaration
              checkVariableLikeDeclaration[in]: node: [n22] c = !b, [163,170], VariableDeclaration
                checkExpression[in] node: [n24] !b, [167,170], PrefixUnaryExpression
                  checkExpression[in] node: [n25] b, [169,170], Identifier
                    getFlowTypeOfReference[in]: reference [n25] b, [169,170], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f20], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0
                      getTypeByMrNarrow[in] expr: [n25] b, [169,170], Identifier
                      getTypeByMrNarrowAux[dbg]: reference: [n25] b, [169,170], Identifier, maximalNode: [n22] c = !b, [163,170], VariableDeclaration
                      getTypeByMrNarrowAux[dbg]: cache hit
                      getTypeByMrNarrow[out] expr: [n25] b, [169,170], Identifier -> true
                    getFlowTypeOfReference[out]: reference [n25] b, [169,170], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f20], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0, return: true
                  In getIdentifier(), getFlowTypeOfReference returned true
                  checkExpression[out]: [n25] b, [169,170], Identifier -> true
                  checkExpression[in] node: [n25] b, [169,170], Identifier
                    getFlowTypeOfReference[in]: reference [n25] b, [169,170], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f20], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0
                      getTypeByMrNarrow[in] expr: [n25] b, [169,170], Identifier
                      getTypeByMrNarrowAux[dbg]: reference: [n25] b, [169,170], Identifier, maximalNode: [n22] c = !b, [163,170], VariableDeclaration
                      getTypeByMrNarrowAux[dbg]: cache hit
                      getTypeByMrNarrow[out] expr: [n25] b, [169,170], Identifier -> true
                    getFlowTypeOfReference[out]: reference [n25] b, [169,170], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f20], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0, return: true
                  In getIdentifier(), getFlowTypeOfReference returned true
                  checkExpression[out]: [n25] b, [169,170], Identifier -> true
                checkExpression[out]: [n24] !b, [167,170], PrefixUnaryExpression -> false
              checkVariableLikeDeclaration[out]: node: [n22] c = !b, [163,170], VariableDeclaration
            checkSourceElement[out]: nodeid: 22
          checkSourceElement[out]: nodeid: 39
          checkSourceElement[in] node: [n40] c;, [171,182], ExpressionStatement
            checkExpression[in] node: [n21] c, [171,181], Identifier
              getFlowTypeOfReference[in]: reference [n21] c, [171,181], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f18], Assignment|Referenced, [n22] c = !b, [163,170], VariableDeclaration[gftor call depth:0
                getTypeByMrNarrow[in] expr: [n21] c, [171,181], Identifier
                getTypeByMrNarrowAux[dbg]: reference: [n21] c, [171,181], Identifier, maximalNode: [n21] c, [171,181], Identifier
                getTypeByMrNarrowAux[dbg]: cache hit
                getTypeByMrNarrow[out] expr: [n21] c, [171,181], Identifier -> false
              getFlowTypeOfReference[out]: reference [n21] c, [171,181], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f18], Assignment|Referenced, [n22] c = !b, [163,170], VariableDeclaration[gftor call depth:0, return: false
            In getIdentifier(), getFlowTypeOfReference returned false
            checkExpression[out]: [n21] c, [171,181], Identifier -> false
          checkSourceElement[out]: nodeid: 40
          checkSourceElement[in] node: [n41] let d = b;, [182,201], VariableStatement
            checkSourceElement[in] node: [n20] d = b, [194,200], VariableDeclaration
              checkVariableLikeDeclaration[in]: node: [n20] d = b, [194,200], VariableDeclaration
                checkExpression[in] node: [n27] b, [198,200], Identifier
                  getFlowTypeOfReference[in]: reference [n27] b, [198,200], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f17], Referenced|ExpressionStatement, [n21] c, [171,181], Identifier[gftor call depth:0
                    getTypeByMrNarrow[in] expr: [n27] b, [198,200], Identifier
                    getTypeByMrNarrowAux[dbg]: reference: [n27] b, [198,200], Identifier, maximalNode: [n20] d = b, [194,200], VariableDeclaration
                    getTypeByMrNarrowAux[dbg]: cache hit
                    getTypeByMrNarrow[out] expr: [n27] b, [198,200], Identifier -> true
                  getFlowTypeOfReference[out]: reference [n27] b, [198,200], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f17], Referenced|ExpressionStatement, [n21] c, [171,181], Identifier[gftor call depth:0, return: true
                In getIdentifier(), getFlowTypeOfReference returned true
                checkExpression[out]: [n27] b, [198,200], Identifier -> true
              checkVariableLikeDeclaration[out]: node: [n20] d = b, [194,200], VariableDeclaration
            checkSourceElement[out]: nodeid: 20
          checkSourceElement[out]: nodeid: 41
          checkSourceElement[in] node: [n42] d;, [201,212], ExpressionStatement
            checkExpression[in] node: [n19] d, [201,211], Identifier
              getFlowTypeOfReference[in]: reference [n19] d, [201,211], Identifier, declaredType: true, initialType: true | undefined, flowContainer: 32, flowNode: [f16], Assignment|Referenced, [n20] d = b, [194,200], VariableDeclaration[gftor call depth:0
                getTypeByMrNarrow[in] expr: [n19] d, [201,211], Identifier
                getTypeByMrNarrowAux[dbg]: reference: [n19] d, [201,211], Identifier, maximalNode: [n19] d, [201,211], Identifier
                getTypeByMrNarrowAux[dbg]: cache hit
                getTypeByMrNarrow[out] expr: [n19] d, [201,211], Identifier -> true
              getFlowTypeOfReference[out]: reference [n19] d, [201,211], Identifier, declaredType: true, initialType: true | undefined, flowContainer: 32, flowNode: [f16], Assignment|Referenced, [n20] d = b, [194,200], VariableDeclaration[gftor call depth:0, return: true
            In getIdentifier(), getFlowTypeOfReference returned true
            checkExpression[out]: [n19] d, [201,211], Identifier -> true
          checkSourceElement[out]: nodeid: 42
          checkSourceElement[in] node: [n43] b = c;, [212,227], ExpressionStatement
            checkExpression[in] node: [n17] b = c, [212,226], BinaryExpression
              checkExpression[in] node: [n18] b, [212,222], Identifier
              checkExpression[out]: [n18] b, [212,222], Identifier -> boolean
              checkExpression[in] node: [n28] c, [224,226], Identifier
                getFlowTypeOfReference[in]: reference [n28] c, [224,226], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f15], Referenced|ExpressionStatement, [n19] d, [201,211], Identifier[gftor call depth:0
                  getTypeByMrNarrow[in] expr: [n28] c, [224,226], Identifier
                  getTypeByMrNarrowAux[dbg]: reference: [n28] c, [224,226], Identifier, maximalNode: [n17] b = c, [212,226], BinaryExpression
                  getTypeByMrNarrowAux[dbg]: cache hit
                  getTypeByMrNarrow[out] expr: [n28] c, [224,226], Identifier -> false
                getFlowTypeOfReference[out]: reference [n28] c, [224,226], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f15], Referenced|ExpressionStatement, [n19] d, [201,211], Identifier[gftor call depth:0, return: false
              In getIdentifier(), getFlowTypeOfReference returned false
              checkExpression[out]: [n28] c, [224,226], Identifier -> false
            checkExpression[out]: [n17] b = c, [212,226], BinaryExpression -> false
          checkSourceElement[out]: nodeid: 43
        checkSourceElement[out]: nodeid: 33
      checkSourceElement[out]: nodeid: 38
      checkSourceElement[in] node: [n44] let e = b;, [233,248], VariableStatement
        checkSourceElement[in] node: [n13] e = b, [241,247], VariableDeclaration
          checkVariableLikeDeclaration[in]: node: [n13] e = b, [241,247], VariableDeclaration
            checkExpression[in] node: [n30] b, [245,247], Identifier
              getFlowTypeOfReference[in]: reference [n30] b, [245,247], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f5], BranchLabel|Label|Referenced, branchKind:postWhileLoop, [gftor call depth:0
                getTypeByMrNarrow[in] expr: [n30] b, [245,247], Identifier
                getTypeByMrNarrowAux[dbg]: reference: [n30] b, [245,247], Identifier, maximalNode: [n13] e = b, [241,247], VariableDeclaration
                  updateHeapWithGroupForFlow[in]: group: {groupIdx: 8, maximalNode: [n13] e = b, [241,247], VariableDeclaration}. minGroupIdxToAdd: undefined
                    updateHeapWithGroupForFlow[dbg] heap[1=>8] [n13] e = b, [241,247], VariableDeclaration
                  updateHeapWithGroupForFlow[out]: group: {maximalNode: [n13] e = b, [241,247], VariableDeclaration}
                  resolveGroupForFlow[in]: [n13] e = b, [241,247], VariableDeclaration, groupIndex:8, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] b, [148,149], Identifier]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17},  {isAssign:true},type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18},  {isAssign:true},type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16},  {isAssign:false},type:false}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16},  {isAssign:true},type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
                  resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    createSuperloopRefTypesSymtab[in]
                    createSuperloopRefTypesSymtab[in] stin: [
                    createSuperloopRefTypesSymtab[in] stin: loopGroup?.groupIdx:2, x.loopState?.invocations:2
                    createSuperloopRefTypesSymtab[in] stin: x.loopState.symbolsAssigned:[{ id:16, ename: b },]
                    createSuperloopRefTypesSymtab[in] stin: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: b }, type:false]
                    createSuperloopRefTypesSymtab[in] stin:   symbol:{b,16},  {isAssign:false},type:false}
                    createSuperloopRefTypesSymtab[in] stin:   outer:[
                    createSuperloopRefTypesSymtab[in] stin:   outer:  symbol:{b,16},  {isAssign:true},type:true}
                    createSuperloopRefTypesSymtab[in] stin:   outer:]
                    createSuperloopRefTypesSymtab[in] stin: ]
                    createSuperloopRefTypesSymtab[out] stout: [
                    createSuperloopRefTypesSymtab[out] stout:   symbol:{b,16},  {isAssign:true},type:true}
                    createSuperloopRefTypesSymtab[out] stout: ]
                    createSuperloopRefTypesSymtab[out]
                  CurrentBranchesMapC[0].delete(groupIdx:2,[else,]),  size before delete:1
                  resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                  resolveGroupForFlow[dbg] symtab: [
                  resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:true},type:true}
                  resolveGroupForFlow[dbg] symtab: ]
                  resolveGroupForFlow[dbg] constraintItem: {
                  resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg] constraintItem:  kind: always,
                  resolveGroupForFlow[dbg] constraintItem: },
                  resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                    mrNarrowTypes[in] expr:[n13] e = b, [241,247], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                        symbol:{b,16},  {isAssign:true},type:true}
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n13] e = b, [241,247], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:true},type:true}
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypes[in] expr:[n30] b, [245,247], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                        mrNarrowTypes[in] refTypesSymtab:
                          [
                            symbol:{b,16},  {isAssign:true},type:true}
                          ]
                        mrNarrowTypes[in] constraintItemIn:
                          {
                           symbolsInvoled:
                           kind: always,
                          },
                          mrNarrowTypesInner[in] expr:[n30] b, [245,247], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                          mrNarrowTypesInner[in] refTypesSymtab:
                          mrNarrowTypesInner[in] refTypesSymtab:  [
                          mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:true},type:true}
                          mrNarrowTypesInner[in] refTypesSymtab:  ]
                          mrNarrowTypesInner[in] constraintItemIn:
                          mrNarrowTypesInner[in] constraintItemIn:  {
                          mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                          mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                          mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                          mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:true}
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                          mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                          mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                          mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                          mrNarrowTypesInner[out] expr:[n30] b, [245,247], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypes[dbg]: qdotfallout.length: 0
                        mrNarrowTypes[dbg]: [n30] b, [245,247], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                        mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                          mrNarrowTypes[dbg]: passing:  {
                          mrNarrowTypes[dbg]: passing:    kind: return,
                          mrNarrowTypes[dbg]: passing:    type: true
                          mrNarrowTypes[dbg]: passing:    symtab: [
                          mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:true}
                          mrNarrowTypes[dbg]: passing:    ]
                          mrNarrowTypes[dbg]: passing:    constraintItem: {
                          mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                          mrNarrowTypes[dbg]: passing:       kind: always,
                          mrNarrowTypes[dbg]: passing:      },
                          mrNarrowTypes[dbg]: passing:  }
                        mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                          mrNarrowTypes[dbg]: failing:  undefined
                          mrNarrowTypes[dbg]: unmerged[0]: {
                          mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                          mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                          mrNarrowTypes[dbg]: unmerged[0]:   type: true
                          mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                          mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:true}
                          mrNarrowTypes[dbg]: unmerged[0]:   ]
                          mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                          mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                          mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                          mrNarrowTypes[dbg]: unmerged[0]:     },
                          mrNarrowTypes[dbg]: unmerged[0]: }
                        mrNarrowTypes[out] byNode: node: [n30] b, [245,247], Identifier, type: true
                        mrNarrowTypes[out] [n30] b, [245,247], Identifier
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: e },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:true}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{e,19},  {isAssign:true},type:true}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]:  innerret.byNode: { node: [n30] b, [245,247], Identifier, type: true
                      mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                      mrNarrowTypesInner[out] expr:[n13] e = b, [241,247], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n13] e = b, [241,247], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: true
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:true}
                      mrNarrowTypes[dbg]: passing:      symbol:{e,19},  {isAssign:true},type:true}
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: e },
                      mrNarrowTypes[dbg]: unmerged[0]:   type: true
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:true}
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{e,19},  {isAssign:true},type:true}
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n30] b, [245,247], Identifier, type: true
                    mrNarrowTypes[out] byNode: node: [n13] e = b, [241,247], VariableDeclaration, type: true
                    mrNarrowTypes[out] [n13] e = b, [241,247], VariableDeclaration
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n13] e = b, [241,247], VariableDeclaration]:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{e,19},  {isAssign:true},type:true}
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n30] b, [245,247], Identifier] -> type:true
                  resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n13] e = b, [241,247], VariableDeclaration] -> type:true
                  resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                  resolveGroupForFlow[out]: [n13] e = b, [241,247], VariableDeclaration, 
                getTypeByMrNarrow[out] expr: [n30] b, [245,247], Identifier -> true
              getFlowTypeOfReference[out]: reference [n30] b, [245,247], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f5], BranchLabel|Label|Referenced, branchKind:postWhileLoop, [gftor call depth:0, return: true
            In getIdentifier(), getFlowTypeOfReference returned true
            checkExpression[out]: [n30] b, [245,247], Identifier -> true
          checkVariableLikeDeclaration[out]: node: [n13] e = b, [241,247], VariableDeclaration
        checkSourceElement[out]: nodeid: 13
      checkSourceElement[out]: nodeid: 44
      checkSourceElement[in] node: [n45] e;, [248,255], ExpressionStatement
        checkExpression[in] node: [n12] e, [248,254], Identifier
          getFlowTypeOfReference[in]: reference [n12] e, [248,254], Identifier, declaredType: true, initialType: true | undefined, flowContainer: 32, flowNode: [f4], Assignment|Referenced, [n13] e = b, [241,247], VariableDeclaration[gftor call depth:0
            getTypeByMrNarrow[in] expr: [n12] e, [248,254], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n12] e, [248,254], Identifier, maximalNode: [n12] e, [248,254], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 9, maximalNode: [n12] e, [248,254], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>9] [n12] e, [248,254], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n12] e, [248,254], Identifier}
              resolveGroupForFlow[in]: [n12] e, [248,254], Identifier, groupIndex:9, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n13] e = b, [241,247], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:8
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{e,19},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n30] b, [245,247], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n13] e = b, [241,247], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:8,<undefined>),  size before delete:1
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg] symtab:   symbol:{e,19},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n12] e, [248,254], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16},  {isAssign:true},type:true}
                    symbol:{e,19},  {isAssign:true},type:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n12] e, [248,254], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: e },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:19, ename: e }, isconst: false
                  mrNarrowTypesInner[out] expr:[n12] e, [248,254], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n12] e, [248,254], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: passing:      symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: e },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n12] e, [248,254], Identifier, type: true
                mrNarrowTypes[out] [n12] e, [248,254], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] e, [248,254], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{e,19},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n30] b, [245,247], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n13] e = b, [241,247], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n12] e, [248,254], Identifier] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n12] e, [248,254], Identifier, 
            getTypeByMrNarrow[out] expr: [n12] e, [248,254], Identifier -> true
          getFlowTypeOfReference[out]: reference [n12] e, [248,254], Identifier, declaredType: true, initialType: true | undefined, flowContainer: 32, flowNode: [f4], Assignment|Referenced, [n13] e = b, [241,247], VariableDeclaration[gftor call depth:0, return: true
        In getIdentifier(), getFlowTypeOfReference returned true
        checkExpression[out]: [n12] e, [248,254], Identifier -> true
      checkSourceElement[out]: nodeid: 45
      checkSourceElement[in] node: [n46] b;, [255,262], ExpressionStatement
        checkExpression[in] node: [n11] b, [255,261], Identifier
          getFlowTypeOfReference[in]: reference [n11] b, [255,261], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f3], Referenced|ExpressionStatement, [n12] e, [248,254], Identifier[gftor call depth:0
            getTypeByMrNarrow[in] expr: [n11] b, [255,261], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n11] b, [255,261], Identifier, maximalNode: [n11] b, [255,261], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 10, maximalNode: [n11] b, [255,261], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>10] [n11] b, [255,261], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n11] b, [255,261], Identifier}
              resolveGroupForFlow[in]: [n11] b, [255,261], Identifier, groupIndex:10, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] e, [248,254], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{e,19},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n30] b, [245,247], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n13] e = b, [241,247], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n12] e, [248,254], Identifier] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:9,<undefined>),  size before delete:1
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg] symtab:   symbol:{e,19},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n11] b, [255,261], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16},  {isAssign:true},type:true}
                    symbol:{e,19},  {isAssign:true},type:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n11] b, [255,261], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                  mrNarrowTypesInner[out] expr:[n11] b, [255,261], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n11] b, [255,261], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: passing:      symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{e,19},  {isAssign:true},type:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n11] b, [255,261], Identifier, type: true
                mrNarrowTypes[out] [n11] b, [255,261], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n11] b, [255,261], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{e,19},  {isAssign:true},type:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n36] true, [65,70], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n16] b = true, [61,70], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n15] b, [71,77], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n14] b, [148,149], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n25] b, [169,170], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n24] !b, [167,170], PrefixUnaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n22] c = !b, [163,170], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n21] c, [171,181], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n27] b, [198,200], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n20] d = b, [194,200], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n19] d, [201,211], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n28] c, [224,226], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n17] b = c, [212,226], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n30] b, [245,247], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n13] e = b, [241,247], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n12] e, [248,254], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n11] b, [255,261], Identifier] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n11] b, [255,261], Identifier, 
            getTypeByMrNarrow[out] expr: [n11] b, [255,261], Identifier -> true
          getFlowTypeOfReference[out]: reference [n11] b, [255,261], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 32, flowNode: [f3], Referenced|ExpressionStatement, [n12] e, [248,254], Identifier[gftor call depth:0, return: true
        In getIdentifier(), getFlowTypeOfReference returned true
        checkExpression[out]: [n11] b, [255,261], Identifier -> true
      checkSourceElement[out]: nodeid: 46
    checkSourceElement[out]: nodeid: 34
  checkSourceElement[out]: nodeid: 32
  checkSourceElement[in] node: [n47] , [264,264], EndOfFileToken
  checkSourceElement[out]: nodeid: 47
_caxnc-whileLoop-0001.ts, time(ms): 330, myMaxDepth: 0
