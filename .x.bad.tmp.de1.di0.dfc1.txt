myDebug=true, myDisableInfer=false, myDisable=true, myNoAliasAction=true, myTestFilename=, currentTestFile=_caxnc-whileLoop-0023.ts
  checkSourceElement[in] node: [n36] declare function maybe(): boolean;, [0,34], FunctionDeclaration
    checkSourceElement[in] node: [n38] boolean, [25,33], BooleanKeyword
    checkSourceElement[out]: nodeid: 38
  checkSourceElement[out]: nodeid: 36
  checkSourceElement[in] node: [n37] function t23(){
    let b = false;
    let c = true;
    let d = true;
    let x = false;

    // @ ts-dev-expect-string "loopCount:1, invocations:1"
    while (d){
        if (c && maybe()){
            x = true; // gets set on iteration #0 only
            break;
        }
        d = c;
        c = b;
    }
    x; // x should be boolean - if (c && maybe()) "then" branches for each iteration need to "union" joined
    b; // b should be false
    c; // c should be boolean - ditto
    d; // d should be boolean - ditto
}, [34,560], FunctionDeclaration
    checkSourceElement[in] node: [n39] {
    let b = false;
    let c = true;
    let d = true;
    let x = false;

    // @ ts-dev-expect-string "loopCount:1, invocations:1"
    while (d){
        if (c && maybe()){
            x = true; // gets set on iteration #0 only
            break;
        }
        d = c;
        c = b;
    }
    x; // x should be boolean - if (c && maybe()) "then" branches for each iteration need to "union" joined
    b; // b should be false
    c; // c should be boolean - ditto
    d; // d should be boolean - ditto
}, [49,560], Block
      checkSourceElement[in] node: [n40] let b = false;, [50,69], VariableStatement
        checkSourceElement[in] node: [n19] b = false, [58,68], VariableDeclaration
          checkVariableLikeDeclaration[in]: node: [n19] b = false, [58,68], VariableDeclaration
            checkExpression[in] node: [n41] false, [62,68], FalseKeyword
            checkExpression[out]: [n41] false, [62,68], FalseKeyword -> false
            checkExpression[in] node: [n41] false, [62,68], FalseKeyword
            checkExpression[out]: [n41] false, [62,68], FalseKeyword -> false
          checkVariableLikeDeclaration[out]: node: [n19] b = false, [58,68], VariableDeclaration
        checkSourceElement[out]: nodeid: 19
      checkSourceElement[out]: nodeid: 40
      checkSourceElement[in] node: [n42] let c = true;, [69,87], VariableStatement
        checkSourceElement[in] node: [n18] c = true, [77,86], VariableDeclaration
          checkVariableLikeDeclaration[in]: node: [n18] c = true, [77,86], VariableDeclaration
            checkExpression[in] node: [n43] true, [81,86], TrueKeyword
            checkExpression[out]: [n43] true, [81,86], TrueKeyword -> true
            checkExpression[in] node: [n43] true, [81,86], TrueKeyword
            checkExpression[out]: [n43] true, [81,86], TrueKeyword -> true
          checkVariableLikeDeclaration[out]: node: [n18] c = true, [77,86], VariableDeclaration
        checkSourceElement[out]: nodeid: 18
      checkSourceElement[out]: nodeid: 42
      checkSourceElement[in] node: [n44] let d = true;, [87,105], VariableStatement
        checkSourceElement[in] node: [n17] d = true, [95,104], VariableDeclaration
          checkVariableLikeDeclaration[in]: node: [n17] d = true, [95,104], VariableDeclaration
            checkExpression[in] node: [n45] true, [99,104], TrueKeyword
            checkExpression[out]: [n45] true, [99,104], TrueKeyword -> true
            checkExpression[in] node: [n45] true, [99,104], TrueKeyword
            checkExpression[out]: [n45] true, [99,104], TrueKeyword -> true
          checkVariableLikeDeclaration[out]: node: [n17] d = true, [95,104], VariableDeclaration
        checkSourceElement[out]: nodeid: 17
      checkSourceElement[out]: nodeid: 44
      checkSourceElement[in] node: [n46] let x = false;, [105,124], VariableStatement
        checkSourceElement[in] node: [n16] x = false, [113,123], VariableDeclaration
          checkVariableLikeDeclaration[in]: node: [n16] x = false, [113,123], VariableDeclaration
            checkExpression[in] node: [n47] false, [117,123], FalseKeyword
            checkExpression[out]: [n47] false, [117,123], FalseKeyword -> false
            checkExpression[in] node: [n47] false, [117,123], FalseKeyword
            checkExpression[out]: [n47] false, [117,123], FalseKeyword -> false
          checkVariableLikeDeclaration[out]: node: [n16] x = false, [113,123], VariableDeclaration
        checkSourceElement[out]: nodeid: 16
      checkSourceElement[out]: nodeid: 46
      checkSourceElement[in] node: [n48] while (d){
        if (c && maybe()){
            x = true; // gets set on iteration #0 only
            break;
        }
        d = c;
        c = b;
    }, [124,346], WhileStatement
        checkExpression[in] node: [n15] d, [196,197], Identifier
          getFlowTypeOfReference[in]: reference [n15] d, [196,197], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f8], LoopLabel|Label|Referenced|Shared, branchKind:preWhileLoop, [gftor call depth:0
            getTypeByMrNarrow[in] expr: [n15] d, [196,197], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n15] d, [196,197], Identifier, maximalNode: [n15] d, [196,197], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 4, maximalNode: [n15] d, [196,197], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>0] [n19] b = false, [58,68], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[2=>1] [n18] c = true, [77,86], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[3=>2] [n17] d = true, [95,104], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[4=>3] [n16] x = false, [113,123], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[5=>4] [n15] d, [196,197], Identifier
                updateHeapWithGroupForFlow[dbg] heap[6=>5] [n31] c && maybe(), [212,224], BinaryExpression
                updateHeapWithGroupForFlow[dbg] heap[7=>6] [n26] x = true, [226,247], BinaryExpression
                updateHeapWithGroupForFlow[dbg] heap[8=>7] [n22] d = c, [310,324], BinaryExpression
                updateHeapWithGroupForFlow[dbg] heap[9=>8] [n20] c = b, [325,339], BinaryExpression
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n15] d, [196,197], Identifier}
              resolveGroupForFlow[in]: [n19] b = false, [58,68], VariableDeclaration, groupIndex:0, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n19] b = false, [58,68], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n19] b = false, [58,68], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypes[in] expr:[n41] false, [62,68], FalseKeyword, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n41] false, [62,68], FalseKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                      mrNarrowTypesInner[out] expr:[n41] false, [62,68], FalseKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n41] false, [62,68], FalseKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: false
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   type: false
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n41] false, [62,68], FalseKeyword, type: false
                    mrNarrowTypes[out] [n41] false, [62,68], FalseKeyword
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n41] false, [62,68], FalseKeyword, type: false
                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                  mrNarrowTypesInner[out] expr:[n19] b = false, [58,68], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n19] b = false, [58,68], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: false
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: false
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n41] false, [62,68], FalseKeyword, type: false
                mrNarrowTypes[out] byNode: node: [n19] b = false, [58,68], VariableDeclaration, type: false
                mrNarrowTypes[out] [n19] b = false, [58,68], VariableDeclaration
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] b = false, [58,68], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n19] b = false, [58,68], VariableDeclaration, 
              resolveGroupForFlow[in]: [n18] c = true, [77,86], VariableDeclaration, groupIndex:1, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] b = false, [58,68], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:0,<undefined>),  size before delete:1
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n18] c = true, [77,86], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16}, { type:false, assignedType:false}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n18] c = true, [77,86], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypes[in] expr:[n43] true, [81,86], TrueKeyword, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                        symbol:{b,16}, { type:false, assignedType:false}
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n43] true, [81,86], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                      mrNarrowTypesInner[out] expr:[n43] true, [81,86], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n43] true, [81,86], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: true
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   type: true
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n43] true, [81,86], TrueKeyword, type: true
                    mrNarrowTypes[out] [n43] true, [81,86], TrueKeyword
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n43] true, [81,86], TrueKeyword, type: true
                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                  mrNarrowTypesInner[out] expr:[n18] c = true, [77,86], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n18] c = true, [77,86], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n43] true, [81,86], TrueKeyword, type: true
                mrNarrowTypes[out] byNode: node: [n18] c = true, [77,86], VariableDeclaration, type: true
                mrNarrowTypes[out] [n18] c = true, [77,86], VariableDeclaration
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n18] c = true, [77,86], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n18] c = true, [77,86], VariableDeclaration, 
              resolveGroupForFlow[in]: [n17] d = true, [95,104], VariableDeclaration, groupIndex:2, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n18] c = true, [77,86], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:1,<undefined>),  size before delete:1
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n17] d = true, [95,104], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16}, { type:false, assignedType:false}
                    symbol:{c,17}, { type:true, assignedType:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n17] d = true, [95,104], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypes[in] expr:[n45] true, [99,104], TrueKeyword, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                        symbol:{b,16}, { type:false, assignedType:false}
                        symbol:{c,17}, { type:true, assignedType:true}
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n45] true, [99,104], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                      mrNarrowTypesInner[out] expr:[n45] true, [99,104], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n45] true, [99,104], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: true
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   type: true
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n45] true, [99,104], TrueKeyword, type: true
                    mrNarrowTypes[out] [n45] true, [99,104], TrueKeyword
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n45] true, [99,104], TrueKeyword, type: true
                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                  mrNarrowTypesInner[out] expr:[n17] d = true, [95,104], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n17] d = true, [95,104], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n45] true, [99,104], TrueKeyword, type: true
                mrNarrowTypes[out] byNode: node: [n17] d = true, [95,104], VariableDeclaration, type: true
                mrNarrowTypes[out] [n17] d = true, [95,104], VariableDeclaration
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n17] d = true, [95,104], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n17] d = true, [95,104], VariableDeclaration, 
              resolveGroupForFlow[in]: [n16] x = false, [113,123], VariableDeclaration, groupIndex:3, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n17] d = true, [95,104], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:2,<undefined>),  size before delete:1
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n16] x = false, [113,123], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16}, { type:false, assignedType:false}
                    symbol:{c,17}, { type:true, assignedType:true}
                    symbol:{d,18}, { type:true, assignedType:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n16] x = false, [113,123], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypes[in] expr:[n47] false, [117,123], FalseKeyword, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                        symbol:{b,16}, { type:false, assignedType:false}
                        symbol:{c,17}, { type:true, assignedType:true}
                        symbol:{d,18}, { type:true, assignedType:true}
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n47] false, [117,123], FalseKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:true}
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:true}
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                      mrNarrowTypesInner[out] expr:[n47] false, [117,123], FalseKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n47] false, [117,123], FalseKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: false
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:true}
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   type: false
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:true}
                      mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:true}
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n47] false, [117,123], FalseKeyword, type: false
                    mrNarrowTypes[out] [n47] false, [117,123], FalseKeyword
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: x },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{x,19}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n47] false, [117,123], FalseKeyword, type: false
                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                  mrNarrowTypesInner[out] expr:[n16] x = false, [113,123], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n16] x = false, [113,123], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: false
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:      symbol:{x,19}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: x },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: false
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{x,19}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n47] false, [117,123], FalseKeyword, type: false
                mrNarrowTypes[out] byNode: node: [n16] x = false, [113,123], VariableDeclaration, type: false
                mrNarrowTypes[out] [n16] x = false, [113,123], VariableDeclaration
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n16] x = false, [113,123], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:3
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n16] x = false, [113,123], VariableDeclaration, 
              processLoop[in] loopGroup.groupIdx:4, currentLoopDepth:1
              processLoop[dbg] loopGroup.groupIdx:4, do the condition of the loop, loopCount:0, loopState.invocations:0
              CurrentBranchesMapC[0].delete(groupIdx:3,<undefined>),  size before delete:1
                resolveGroupForFlow[in]: [n15] d, [196,197], Identifier, groupIndex:4, kind:loop, maximalNode.parent.kind:WhileStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n15] d, [196,197], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:18, ename: d }, isconst: false
                    mrNarrowTypesInner[out] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n15] d, [196,197], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n15] d, [196,197], Identifier, type: boolean
                  mrNarrowTypes[out] [n15] d, [196,197], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n15] d, [196,197], Identifier, 
              processLoop[dbg] loopGroup.groupIdx:4, did the condition of the loop, loopCount:0, loopState.invocations:0
              processLoop[dbg] loopGroup.groupIdx:4, do the rest of the loop, loopCount:0, loopState.invocations:0
                resolveGroupForFlow[in]: [n31] c && maybe(), [212,224], BinaryExpression, groupIndex:5, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:4,[then,]),  size before delete:1
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n31] c && maybe(), [212,224], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      symbol:{d,18}, { type:true, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n31] c && maybe(), [212,224], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    case SyntaxKind.(AmpersandAmpersand|BarBar)Token START
                    case SyntaxKind.(AmpersandAmpersand|BarBar)Token left
                      mrNarrowTypes[in] expr:[n24] c, [212,213], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n24] c, [212,213], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false | true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                        mrNarrowTypesInner[out] expr:[n24] c, [212,213], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n24] c, [212,213], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false | true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n24] c, [212,213], Identifier, type: boolean
                      mrNarrowTypes[out] [n24] c, [212,213], Identifier
                    case SyntaxKind.AmpersandAmpersandToken right (for left passing)
                      mrNarrowTypes[in] expr:[n25] maybe(), [216,224], CallExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:true, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.CallExpression
                          mrNarrowTypesByCallExpression[in]
                            InferRefTypesPreAccess[in] expr: [n25] maybe(), [216,224], CallExpression
                              mrNarrowTypes[in] expr:[n32] maybe, [216,222], Identifier, crit:{kind:notnullundef,negate:false}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: length: 0
                              mrNarrowTypes[in] refTypesSymtab:
                                [
                                loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                x.loopState.symbolsAssigned:[]
                                x.loopState.symbolsAssignedRange:[]
                                  symbol:{d,18}, { type:true, assignedType:<undef>}
                                  symbol:{c,17}, { type:true, assignedType:<undef>}
                                  outer:[
                                  outer:  symbol:{b,16}, { type:false, assignedType:false}
                                  outer:  symbol:{c,17}, { type:true, assignedType:true}
                                  outer:  symbol:{d,18}, { type:true, assignedType:true}
                                  outer:  symbol:{x,19}, { type:false, assignedType:false}
                                  outer:]
                                ]
                              mrNarrowTypes[in] constraintItemIn:
                                {
                                 symbolsInvoled:
                                 kind: always,
                                },
                                mrNarrowTypesInner[in] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypesInner[in] refTypesSymtab:
                                mrNarrowTypesInner[in] refTypesSymtab:  [
                                mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                mrNarrowTypesInner[in] refTypesSymtab:  ]
                                mrNarrowTypesInner[in] constraintItemIn:
                                mrNarrowTypesInner[in] constraintItemIn:  {
                                mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                mrNarrowTypesInner[in] constraintItemIn:  },
                                mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: () => boolean
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                mrNarrowTypesInner[out] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypes[dbg]: qdotfallout.length: 0
                              mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                mrNarrowTypes[dbg]: passing:  {
                                mrNarrowTypes[dbg]: passing:    kind: return,
                                mrNarrowTypes[dbg]: passing:    type: () => boolean
                                mrNarrowTypes[dbg]: passing:    symtab: [
                                mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      outer:[
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:]
                                mrNarrowTypes[dbg]: passing:    ]
                                mrNarrowTypes[dbg]: passing:    constraintItem: {
                                mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                mrNarrowTypes[dbg]: passing:       kind: always,
                                mrNarrowTypes[dbg]: passing:      },
                                mrNarrowTypes[dbg]: passing:  }
                              mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                mrNarrowTypes[dbg]: failing:  {
                                mrNarrowTypes[dbg]: failing:    kind: return,
                                mrNarrowTypes[dbg]: failing:    type: never
                                mrNarrowTypes[dbg]: failing:    symtab: <undef>
                                mrNarrowTypes[dbg]: failing:    constraintItem: {
                                mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                                mrNarrowTypes[dbg]: failing:       kind: never,
                                mrNarrowTypes[dbg]: failing:      },
                                mrNarrowTypes[dbg]: failing:  }
                                mrNarrowTypes[dbg]: unmerged[0]: {
                                mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                mrNarrowTypes[dbg]: unmerged[0]:   type: () => boolean
                                mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                mrNarrowTypes[dbg]: unmerged[0]:   ]
                                mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                mrNarrowTypes[dbg]: unmerged[0]:     },
                                mrNarrowTypes[dbg]: unmerged[0]: }
                              mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                              mrNarrowTypes[out] [n32] maybe, [216,222], Identifier
                            InferRefTypesPreAccess[dbg] passing: {
                            InferRefTypesPreAccess[dbg] passing:   kind: return,
                            InferRefTypesPreAccess[dbg] passing:   type: () => boolean
                            InferRefTypesPreAccess[dbg] passing:   symtab: [
                            InferRefTypesPreAccess[dbg] passing:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssignedRange:[]
                            InferRefTypesPreAccess[dbg] passing:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     symbol:{c,17}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     outer:[
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:]
                            InferRefTypesPreAccess[dbg] passing:   ]
                            InferRefTypesPreAccess[dbg] passing:   constraintItem: {
                            InferRefTypesPreAccess[dbg] passing:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] passing:      kind: always,
                            InferRefTypesPreAccess[dbg] passing:     },
                            InferRefTypesPreAccess[dbg] passing: }
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   kind: return,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   type: () => boolean
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symtab: [
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssignedRange:[]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:[
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   ]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   constraintItem: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      kind: always,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     },
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: }
                            InferRefTypesPreAccess[out]
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: {
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: }
                          mrNarrowTypesByCallExpressionProcessCallArguments resolvedCallArguments.length: 0
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0 (): boolean
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: }
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  symbolsInvoled:
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  kind: always,
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: },
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneLeftoverMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0/1, sigidx:0/1, pass1:true, finshed1:true
                          mrNarrowTypesByCallExpression rttridx:0/1, finished:true
                          mrNarrowTypesByCallExpression sigGroupFailedCount:0/1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n25] maybe(), [216,224], CallExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                      mrNarrowTypes[out] byNode: node: [n25] maybe(), [216,224], CallExpression, type: boolean
                      mrNarrowTypes[out] [n25] maybe(), [216,224], CallExpression
                    case SyntaxKind.AmpersandAmpersandToken right (for left failing)
                      mrNarrowTypes[in] expr:[n25] maybe(), [216,224], CallExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:false, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.CallExpression
                          mrNarrowTypesByCallExpression[in]
                            InferRefTypesPreAccess[in] expr: [n25] maybe(), [216,224], CallExpression
                              mrNarrowTypes[in] expr:[n32] maybe, [216,222], Identifier, crit:{kind:notnullundef,negate:false}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: length: 0
                              mrNarrowTypes[in] refTypesSymtab:
                                [
                                loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                x.loopState.symbolsAssigned:[]
                                x.loopState.symbolsAssignedRange:[]
                                  symbol:{d,18}, { type:true, assignedType:<undef>}
                                  symbol:{c,17}, { type:false, assignedType:<undef>}
                                  outer:[
                                  outer:  symbol:{b,16}, { type:false, assignedType:false}
                                  outer:  symbol:{c,17}, { type:true, assignedType:true}
                                  outer:  symbol:{d,18}, { type:true, assignedType:true}
                                  outer:  symbol:{x,19}, { type:false, assignedType:false}
                                  outer:]
                                ]
                              mrNarrowTypes[in] constraintItemIn:
                                {
                                 symbolsInvoled:
                                 kind: always,
                                },
                                mrNarrowTypesInner[in] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypesInner[in] refTypesSymtab:
                                mrNarrowTypesInner[in] refTypesSymtab:  [
                                mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                mrNarrowTypesInner[in] refTypesSymtab:  ]
                                mrNarrowTypesInner[in] constraintItemIn:
                                mrNarrowTypesInner[in] constraintItemIn:  {
                                mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                mrNarrowTypesInner[in] constraintItemIn:  },
                                mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: () => boolean
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                                mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                mrNarrowTypesInner[out] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypes[dbg]: qdotfallout.length: 0
                              mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                mrNarrowTypes[dbg]: passing:  {
                                mrNarrowTypes[dbg]: passing:    kind: return,
                                mrNarrowTypes[dbg]: passing:    type: () => boolean
                                mrNarrowTypes[dbg]: passing:    symtab: [
                                mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      outer:[
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:]
                                mrNarrowTypes[dbg]: passing:    ]
                                mrNarrowTypes[dbg]: passing:    constraintItem: {
                                mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                mrNarrowTypes[dbg]: passing:       kind: always,
                                mrNarrowTypes[dbg]: passing:      },
                                mrNarrowTypes[dbg]: passing:  }
                              mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                mrNarrowTypes[dbg]: failing:  {
                                mrNarrowTypes[dbg]: failing:    kind: return,
                                mrNarrowTypes[dbg]: failing:    type: never
                                mrNarrowTypes[dbg]: failing:    symtab: <undef>
                                mrNarrowTypes[dbg]: failing:    constraintItem: {
                                mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                                mrNarrowTypes[dbg]: failing:       kind: never,
                                mrNarrowTypes[dbg]: failing:      },
                                mrNarrowTypes[dbg]: failing:  }
                                mrNarrowTypes[dbg]: unmerged[0]: {
                                mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                mrNarrowTypes[dbg]: unmerged[0]:   type: () => boolean
                                mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                mrNarrowTypes[dbg]: unmerged[0]:   ]
                                mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                mrNarrowTypes[dbg]: unmerged[0]:     },
                                mrNarrowTypes[dbg]: unmerged[0]: }
                              mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                              mrNarrowTypes[out] [n32] maybe, [216,222], Identifier
                            InferRefTypesPreAccess[dbg] passing: {
                            InferRefTypesPreAccess[dbg] passing:   kind: return,
                            InferRefTypesPreAccess[dbg] passing:   type: () => boolean
                            InferRefTypesPreAccess[dbg] passing:   symtab: [
                            InferRefTypesPreAccess[dbg] passing:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssignedRange:[]
                            InferRefTypesPreAccess[dbg] passing:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     symbol:{c,17}, { type:false, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     outer:[
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:]
                            InferRefTypesPreAccess[dbg] passing:   ]
                            InferRefTypesPreAccess[dbg] passing:   constraintItem: {
                            InferRefTypesPreAccess[dbg] passing:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] passing:      kind: always,
                            InferRefTypesPreAccess[dbg] passing:     },
                            InferRefTypesPreAccess[dbg] passing: }
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   kind: return,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   type: () => boolean
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symtab: [
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssignedRange:[]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:[
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   ]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   constraintItem: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      kind: always,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     },
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: }
                            InferRefTypesPreAccess[out]
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: {
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: }
                          mrNarrowTypesByCallExpressionProcessCallArguments resolvedCallArguments.length: 0
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0 (): boolean
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: }
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  symbolsInvoled:
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  kind: always,
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: },
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneLeftoverMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0/1, sigidx:0/1, pass1:true, finshed1:true
                          mrNarrowTypesByCallExpression rttridx:0/1, finished:true
                          mrNarrowTypesByCallExpression sigGroupFailedCount:0/1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] maybe(), [216,224], CallExpression, type: boolean
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n25] maybe(), [216,224], CallExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                      mrNarrowTypes[out] byNode: node: [n25] maybe(), [216,224], CallExpression, type: boolean
                      mrNarrowTypes[out] [n25] maybe(), [216,224], CallExpression
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                    mrNarrowTypesInner[out]:  innerret.arttr[2]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[2]: }
                    mrNarrowTypesInner[out]:  innerret.arttr[3]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[3]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n24] c, [212,213], Identifier, type: boolean
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] maybe(), [216,224], CallExpression, type: boolean
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n31] c && maybe(), [212,224], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n31] c && maybe(), [212,224], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[dbg]: unmerged[1]: {
                    mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[1]:   type: false
                    mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[1]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[1]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[1]:   ]
                    mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[1]:     },
                    mrNarrowTypes[dbg]: unmerged[1]: }
                    mrNarrowTypes[dbg]: unmerged[2]: {
                    mrNarrowTypes[dbg]: unmerged[2]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[2]:   type: false
                    mrNarrowTypes[dbg]: unmerged[2]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[2]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[2]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[2]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[2]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[2]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[2]:   ]
                    mrNarrowTypes[dbg]: unmerged[2]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[2]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[2]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[2]:     },
                    mrNarrowTypes[dbg]: unmerged[2]: }
                    mrNarrowTypes[dbg]: unmerged[3]: {
                    mrNarrowTypes[dbg]: unmerged[3]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[3]:   type: false
                    mrNarrowTypes[dbg]: unmerged[3]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[3]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[3]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[3]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[3]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[3]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[3]:   ]
                    mrNarrowTypes[dbg]: unmerged[3]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[3]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[3]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[3]:     },
                    mrNarrowTypes[dbg]: unmerged[3]: }
                  mrNarrowTypes[out] byNode: node: [n24] c, [212,213], Identifier, type: boolean
                  mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                  mrNarrowTypes[out] byNode: node: [n25] maybe(), [216,224], CallExpression, type: boolean
                  mrNarrowTypes[out] byNode: node: [n31] c && maybe(), [212,224], BinaryExpression, type: boolean
                  mrNarrowTypes[out] [n31] c && maybe(), [212,224], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n31] c && maybe(), [212,224], BinaryExpression, 
                resolveGroupForFlow[in]: [n26] x = true, [226,247], BinaryExpression, groupIndex:6, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:5,[then,]),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n26] x = true, [226,247], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      symbol:{d,18}, { type:true, assignedType:<undef>}
                      symbol:{c,17}, { type:true, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n26] x = true, [226,247], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n49] true, [242,247], TrueKeyword, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:true, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n49] true, [242,247], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n49] true, [242,247], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n49] true, [242,247], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n49] true, [242,247], TrueKeyword, type: true
                      mrNarrowTypes[out] [n49] true, [242,247], TrueKeyword
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: x },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{x,19}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n49] true, [242,247], TrueKeyword, type: true
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n26] x = true, [226,247], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n26] x = true, [226,247], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      symbol:{x,19}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: x },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{x,19}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n49] true, [242,247], TrueKeyword, type: true
                  mrNarrowTypes[out] byNode: node: [n26] x = true, [226,247], BinaryExpression, type: true
                  mrNarrowTypes[out] [n26] x = true, [226,247], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n26] x = true, [226,247], BinaryExpression, 
                resolveGroupForFlow[in]: [n22] d = c, [310,324], BinaryExpression, groupIndex:7, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:5,[else,]),  size before delete:3
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n22] d = c, [310,324], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      symbol:{d,18}, { type:true, assignedType:<undef>}
                      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n22] d = c, [310,324], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n33] c, [322,324], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:true | false, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n33] c, [322,324], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                        mrNarrowTypesInner[out] expr:[n33] c, [322,324], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n33] c, [322,324], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true | false
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n33] c, [322,324], Identifier, type: boolean
                      mrNarrowTypes[out] [n33] c, [322,324], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n33] c, [322,324], Identifier, type: boolean
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n22] d = c, [310,324], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n22] d = c, [310,324], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true | false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n33] c, [322,324], Identifier, type: boolean
                  mrNarrowTypes[out] byNode: node: [n22] d = c, [310,324], BinaryExpression, type: boolean
                  mrNarrowTypes[out] [n22] d = c, [310,324], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d = c, [310,324], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n22] d = c, [310,324], BinaryExpression, 
                resolveGroupForFlow[in]: [n20] c = b, [325,339], BinaryExpression, groupIndex:8, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n22] d = c, [310,324], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:7,<undefined>),  size before delete:3
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n20] c = b, [325,339], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      symbol:{d,18}, { type:true | false, assignedType:true | false}
                      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n20] c = b, [325,339], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n34] b, [337,339], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d,18}, { type:true | false, assignedType:true | false}
                          symbol:{c,17}, { type:true | false, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n34] b, [337,339], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false | true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                        mrNarrowTypesInner[out] expr:[n34] b, [337,339], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n34] b, [337,339], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: false | true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false | true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false | true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n34] b, [337,339], Identifier, type: boolean
                      mrNarrowTypes[out] [n34] b, [337,339], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n34] b, [337,339], Identifier, type: boolean
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n20] c = b, [325,339], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n20] c = b, [325,339], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false | true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n34] b, [337,339], Identifier, type: boolean
                  mrNarrowTypes[out] byNode: node: [n20] c = b, [325,339], BinaryExpression, type: boolean
                  mrNarrowTypes[out] [n20] c = b, [325,339], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n20] c = b, [325,339], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:false | true, assignedType:false | true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n20] c = b, [325,339], BinaryExpression, 
              processLoop[dbg] loopGroup.groupIdx:4, did the rest of the loop, loopCount:0, loopState.invocations:0
              CurrentBranchesMapC[0].delete(groupIdx:8,<undefined>),  size before delete:3
                modifiedInnerSymtabUsingOuterForFinalCondition[in]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: [
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: x.loopState.symbolsAssigned:[]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   symbol:{c,17}, { type:false | true, assignedType:false | true}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   symbol:{b,16}, { type:false | true, assignedType:<undef>}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:[
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: ]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: [
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: x.loopState.symbolsAssigned:[]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   symbol:{c,17}, { type:false | true, assignedType:false | true}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   symbol:{b,16}, { type:false | true, assignedType:<undef>}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:[
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: ]
              processLoop[dbg] loopGroup.groupIdx:4, do the final condition of the loop, loopCount:0, loopState.invocations:0
              CurrentBranchesMapC[0].delete(groupIdx:4,<undefined>),  size before delete:2
                resolveGroupForFlow[in]: [n15] d, [196,197], Identifier, groupIndex:4, kind:loop, maximalNode.parent.kind:WhileStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:false | true, assignedType:false | true}
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n15] d, [196,197], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                      symbol:{d,18}, { type:true | false, assignedType:true | false}
                      symbol:{c,17}, { type:false | true, assignedType:false | true}
                      symbol:{b,16}, { type:false | true, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n15] d, [196,197], Identifier, type: boolean
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:18, ename: d }, isconst: false
                    mrNarrowTypesInner[out] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n15] d, [196,197], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypes[dbg]: failing:      symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:0
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false | true, assignedType:false | true}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n15] d, [196,197], Identifier, type: boolean
                  mrNarrowTypes[out] [n15] d, [196,197], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:false | true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:false | true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n15] d, [196,197], Identifier, 
              processLoop[dbg] loopGroup.groupIdx:4, did the final condition of the loop, loopCount:0, loopState.invocations:0
              processLoop[dbg] loopGroup.groupIdx:4, loop converged, loopCount=0, loopState.invocations:0
              processLoop[dbg out] loopIdx:4, gIdx:4: groupIdx:4, cbe.kind:2, node:[[n15] d, [196,197], Identifier]
              processLoop[dbg out] loopIdx:4, gIdx:4:   true:
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         [
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssigned:[]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{c,17}, { type:false | true, assignedType:false | true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{b,16}, { type:false | true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:[
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         ]
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: {
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: },
              processLoop[dbg out] loopIdx:4, gIdx:4:   false:
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         [
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssigned:[]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{c,17}, { type:false | true, assignedType:false | true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{b,16}, { type:false | true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:[
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         ]
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: {
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: },
              processLoop[dbg out] loopIdx:4, gIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:8: [node:[n34] b, [337,339], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:6: groupIdx:6, cbe.kind:1, node:[[n26] x = true, [226,247], BinaryExpression]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         [
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:0
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         x.loopState.symbolsAssigned:[]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           symbol:{x,19}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:[
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         ]
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem: {
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem: },
              processLoop[dbg out] loopIdx:4, gIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              processLoop[dbg out] loopIdx:4, gIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              processLoop[dbg out] loopIdx:4, gIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              processLoop[out] loopGroup.groupIdx:4, currentLoopDepth:1, maxGroupIdxProcessed:8, loopState.invocations:0
              updateHeapWithGroupForFlow[in]: group idxs:[4,8,6,7,5]
              updateHeapWithGroupForFlow[in]: heap group idxs:[4,5,6,7,8,]
              processLoop[in] loopGroup.groupIdx:4, currentLoopDepth:1
              CurrentBranchesMapC[0].delete(groupIdx:4,<undefined>),  size before delete:2
              CurrentBranchesMapC[0].delete(groupIdx:6,<undefined>),  size before delete:1
              processLoop[dbg] loopGroup.groupIdx:4, do the condition of the loop, loopCount:0, loopState.invocations:1
                resolveGroupForFlow[in]: [n15] d, [196,197], Identifier, groupIndex:4, kind:loop, maximalNode.parent.kind:WhileStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n15] d, [196,197], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:18, ename: d }, isconst: false
                    mrNarrowTypesInner[out] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n15] d, [196,197], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n15] d, [196,197], Identifier, type: boolean
                  mrNarrowTypes[out] [n15] d, [196,197], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n15] d, [196,197], Identifier, 
              processLoop[dbg] loopGroup.groupIdx:4, did the condition of the loop, loopCount:0, loopState.invocations:1
              processLoop[dbg] loopGroup.groupIdx:4, do the rest of the loop, loopCount:0, loopState.invocations:1
                resolveGroupForFlow[in]: [n31] c && maybe(), [212,224], BinaryExpression, groupIndex:5, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:4,[then,]),  size before delete:1
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n31] c && maybe(), [212,224], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                      symbol:{d,18}, { type:true, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n31] c && maybe(), [212,224], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    case SyntaxKind.(AmpersandAmpersand|BarBar)Token START
                    case SyntaxKind.(AmpersandAmpersand|BarBar)Token left
                      mrNarrowTypes[in] expr:[n24] c, [212,213], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n24] c, [212,213], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false | true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                        mrNarrowTypesInner[out] expr:[n24] c, [212,213], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n24] c, [212,213], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false | true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n24] c, [212,213], Identifier, type: boolean
                      mrNarrowTypes[out] [n24] c, [212,213], Identifier
                    case SyntaxKind.AmpersandAmpersandToken right (for left passing)
                      mrNarrowTypes[in] expr:[n25] maybe(), [216,224], CallExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:true, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.CallExpression
                          mrNarrowTypesByCallExpression[in]
                            InferRefTypesPreAccess[in] expr: [n25] maybe(), [216,224], CallExpression
                              mrNarrowTypes[in] expr:[n32] maybe, [216,222], Identifier, crit:{kind:notnullundef,negate:false}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: length: 0
                              mrNarrowTypes[in] refTypesSymtab:
                                [
                                loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                x.loopState.symbolsAssigned:[]
                                x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                  symbol:{d,18}, { type:true, assignedType:<undef>}
                                  symbol:{c,17}, { type:true, assignedType:<undef>}
                                  outer:[
                                  outer:  symbol:{b,16}, { type:false, assignedType:false}
                                  outer:  symbol:{c,17}, { type:true, assignedType:true}
                                  outer:  symbol:{d,18}, { type:true, assignedType:true}
                                  outer:  symbol:{x,19}, { type:false, assignedType:false}
                                  outer:]
                                ]
                              mrNarrowTypes[in] constraintItemIn:
                                {
                                 symbolsInvoled:
                                 kind: always,
                                },
                                mrNarrowTypesInner[in] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypesInner[in] refTypesSymtab:
                                mrNarrowTypesInner[in] refTypesSymtab:  [
                                mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                mrNarrowTypesInner[in] refTypesSymtab:  ]
                                mrNarrowTypesInner[in] constraintItemIn:
                                mrNarrowTypesInner[in] constraintItemIn:  {
                                mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                mrNarrowTypesInner[in] constraintItemIn:  },
                                mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: () => boolean
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                mrNarrowTypesInner[out] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypes[dbg]: qdotfallout.length: 0
                              mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                mrNarrowTypes[dbg]: passing:  {
                                mrNarrowTypes[dbg]: passing:    kind: return,
                                mrNarrowTypes[dbg]: passing:    type: () => boolean
                                mrNarrowTypes[dbg]: passing:    symtab: [
                                mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      outer:[
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:]
                                mrNarrowTypes[dbg]: passing:    ]
                                mrNarrowTypes[dbg]: passing:    constraintItem: {
                                mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                mrNarrowTypes[dbg]: passing:       kind: always,
                                mrNarrowTypes[dbg]: passing:      },
                                mrNarrowTypes[dbg]: passing:  }
                              mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                mrNarrowTypes[dbg]: failing:  {
                                mrNarrowTypes[dbg]: failing:    kind: return,
                                mrNarrowTypes[dbg]: failing:    type: never
                                mrNarrowTypes[dbg]: failing:    symtab: <undef>
                                mrNarrowTypes[dbg]: failing:    constraintItem: {
                                mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                                mrNarrowTypes[dbg]: failing:       kind: never,
                                mrNarrowTypes[dbg]: failing:      },
                                mrNarrowTypes[dbg]: failing:  }
                                mrNarrowTypes[dbg]: unmerged[0]: {
                                mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                mrNarrowTypes[dbg]: unmerged[0]:   type: () => boolean
                                mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                mrNarrowTypes[dbg]: unmerged[0]:   ]
                                mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                mrNarrowTypes[dbg]: unmerged[0]:     },
                                mrNarrowTypes[dbg]: unmerged[0]: }
                              mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                              mrNarrowTypes[out] [n32] maybe, [216,222], Identifier
                            InferRefTypesPreAccess[dbg] passing: {
                            InferRefTypesPreAccess[dbg] passing:   kind: return,
                            InferRefTypesPreAccess[dbg] passing:   type: () => boolean
                            InferRefTypesPreAccess[dbg] passing:   symtab: [
                            InferRefTypesPreAccess[dbg] passing:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                            InferRefTypesPreAccess[dbg] passing:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     symbol:{c,17}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     outer:[
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:]
                            InferRefTypesPreAccess[dbg] passing:   ]
                            InferRefTypesPreAccess[dbg] passing:   constraintItem: {
                            InferRefTypesPreAccess[dbg] passing:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] passing:      kind: always,
                            InferRefTypesPreAccess[dbg] passing:     },
                            InferRefTypesPreAccess[dbg] passing: }
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   kind: return,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   type: () => boolean
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symtab: [
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:[
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   ]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   constraintItem: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      kind: always,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     },
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: }
                            InferRefTypesPreAccess[out]
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: {
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: }
                          mrNarrowTypesByCallExpressionProcessCallArguments resolvedCallArguments.length: 0
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0 (): boolean
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: }
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  symbolsInvoled:
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  kind: always,
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: },
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneLeftoverMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0/1, sigidx:0/1, pass1:true, finshed1:true
                          mrNarrowTypesByCallExpression rttridx:0/1, finished:true
                          mrNarrowTypesByCallExpression sigGroupFailedCount:0/1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n25] maybe(), [216,224], CallExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                      mrNarrowTypes[out] byNode: node: [n25] maybe(), [216,224], CallExpression, type: boolean
                      mrNarrowTypes[out] [n25] maybe(), [216,224], CallExpression
                    case SyntaxKind.AmpersandAmpersandToken right (for left failing)
                      mrNarrowTypes[in] expr:[n25] maybe(), [216,224], CallExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:false, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.CallExpression
                          mrNarrowTypesByCallExpression[in]
                            InferRefTypesPreAccess[in] expr: [n25] maybe(), [216,224], CallExpression
                              mrNarrowTypes[in] expr:[n32] maybe, [216,222], Identifier, crit:{kind:notnullundef,negate:false}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: length: 0
                              mrNarrowTypes[in] refTypesSymtab:
                                [
                                loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                x.loopState.symbolsAssigned:[]
                                x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                  symbol:{d,18}, { type:true, assignedType:<undef>}
                                  symbol:{c,17}, { type:false, assignedType:<undef>}
                                  outer:[
                                  outer:  symbol:{b,16}, { type:false, assignedType:false}
                                  outer:  symbol:{c,17}, { type:true, assignedType:true}
                                  outer:  symbol:{d,18}, { type:true, assignedType:true}
                                  outer:  symbol:{x,19}, { type:false, assignedType:false}
                                  outer:]
                                ]
                              mrNarrowTypes[in] constraintItemIn:
                                {
                                 symbolsInvoled:
                                 kind: always,
                                },
                                mrNarrowTypesInner[in] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypesInner[in] refTypesSymtab:
                                mrNarrowTypesInner[in] refTypesSymtab:  [
                                mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                mrNarrowTypesInner[in] refTypesSymtab:  ]
                                mrNarrowTypesInner[in] constraintItemIn:
                                mrNarrowTypesInner[in] constraintItemIn:  {
                                mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                mrNarrowTypesInner[in] constraintItemIn:  },
                                mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: () => boolean
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                                mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                mrNarrowTypesInner[out] expr:[n32] maybe, [216,222], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypes[dbg]: qdotfallout.length: 0
                              mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                mrNarrowTypes[dbg]: passing:  {
                                mrNarrowTypes[dbg]: passing:    kind: return,
                                mrNarrowTypes[dbg]: passing:    type: () => boolean
                                mrNarrowTypes[dbg]: passing:    symtab: [
                                mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypes[dbg]: passing:      outer:[
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: passing:      outer:]
                                mrNarrowTypes[dbg]: passing:    ]
                                mrNarrowTypes[dbg]: passing:    constraintItem: {
                                mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                mrNarrowTypes[dbg]: passing:       kind: always,
                                mrNarrowTypes[dbg]: passing:      },
                                mrNarrowTypes[dbg]: passing:  }
                              mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                mrNarrowTypes[dbg]: failing:  {
                                mrNarrowTypes[dbg]: failing:    kind: return,
                                mrNarrowTypes[dbg]: failing:    type: never
                                mrNarrowTypes[dbg]: failing:    symtab: <undef>
                                mrNarrowTypes[dbg]: failing:    constraintItem: {
                                mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                                mrNarrowTypes[dbg]: failing:       kind: never,
                                mrNarrowTypes[dbg]: failing:      },
                                mrNarrowTypes[dbg]: failing:  }
                                mrNarrowTypes[dbg]: unmerged[0]: {
                                mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                mrNarrowTypes[dbg]: unmerged[0]:   type: () => boolean
                                mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                                mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                mrNarrowTypes[dbg]: unmerged[0]:   ]
                                mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                mrNarrowTypes[dbg]: unmerged[0]:     },
                                mrNarrowTypes[dbg]: unmerged[0]: }
                              mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                              mrNarrowTypes[out] [n32] maybe, [216,222], Identifier
                            InferRefTypesPreAccess[dbg] passing: {
                            InferRefTypesPreAccess[dbg] passing:   kind: return,
                            InferRefTypesPreAccess[dbg] passing:   type: () => boolean
                            InferRefTypesPreAccess[dbg] passing:   symtab: [
                            InferRefTypesPreAccess[dbg] passing:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] passing:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                            InferRefTypesPreAccess[dbg] passing:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     symbol:{c,17}, { type:false, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] passing:     outer:[
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] passing:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] passing:     outer:]
                            InferRefTypesPreAccess[dbg] passing:   ]
                            InferRefTypesPreAccess[dbg] passing:   constraintItem: {
                            InferRefTypesPreAccess[dbg] passing:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] passing:      kind: always,
                            InferRefTypesPreAccess[dbg] passing:     },
                            InferRefTypesPreAccess[dbg] passing: }
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   kind: return,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   type: () => boolean
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   symtab: [
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssigned:[]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:[
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     outer:]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   ]
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:   constraintItem: {
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      symbolsInvoled:
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:      kind: always,
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]:     },
                            InferRefTypesPreAccess[dbg] unmergedPassing[0]: }
                            InferRefTypesPreAccess[out]
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: {
                          mrNarrowTypesByCallExpression rttridx:0, scIsolated: }
                          mrNarrowTypesByCallExpressionProcessCallArguments resolvedCallArguments.length: 0
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0 (): boolean
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,tmpSC: }
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: {
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  symbolsInvoled:
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem:  kind: always,
                          mrNarrowTypesByCallExpression rttridx:0 sigidx:0,cumLeftoverConstraintItem: },
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0, sigidx:0 oneLeftoverMapping:[]
                          mrNarrowTypesByCallExpression rttridx:0/1, sigidx:0/1, pass1:true, finshed1:true
                          mrNarrowTypesByCallExpression rttridx:0/1, finished:true
                          mrNarrowTypesByCallExpression sigGroupFailedCount:0/1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false | true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] maybe(), [216,224], CallExpression, type: boolean
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n25] maybe(), [216,224], CallExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n25] maybe(), [216,224], CallExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false | true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                      mrNarrowTypes[out] byNode: node: [n25] maybe(), [216,224], CallExpression, type: boolean
                      mrNarrowTypes[out] [n25] maybe(), [216,224], CallExpression
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                    mrNarrowTypesInner[out]:  innerret.arttr[2]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[2]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[2]: }
                    mrNarrowTypesInner[out]:  innerret.arttr[3]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[3]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[3]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n24] c, [212,213], Identifier, type: boolean
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] maybe, [216,222], Identifier, type: () => boolean
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] maybe(), [216,224], CallExpression, type: boolean
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n31] c && maybe(), [212,224], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n31] c && maybe(), [212,224], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[dbg]: unmerged[1]: {
                    mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[1]:   type: false
                    mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[1]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[1]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[1]:   ]
                    mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[1]:     },
                    mrNarrowTypes[dbg]: unmerged[1]: }
                    mrNarrowTypes[dbg]: unmerged[2]: {
                    mrNarrowTypes[dbg]: unmerged[2]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[2]:   type: false
                    mrNarrowTypes[dbg]: unmerged[2]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[2]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[2]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[2]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[2]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[2]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[2]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[2]:   ]
                    mrNarrowTypes[dbg]: unmerged[2]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[2]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[2]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[2]:     },
                    mrNarrowTypes[dbg]: unmerged[2]: }
                    mrNarrowTypes[dbg]: unmerged[3]: {
                    mrNarrowTypes[dbg]: unmerged[3]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[3]:   type: false
                    mrNarrowTypes[dbg]: unmerged[3]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[3]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[3]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[3]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[3]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[3]:     symbol:{c,17}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[3]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[3]:   ]
                    mrNarrowTypes[dbg]: unmerged[3]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[3]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[3]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[3]:     },
                    mrNarrowTypes[dbg]: unmerged[3]: }
                  mrNarrowTypes[out] byNode: node: [n24] c, [212,213], Identifier, type: boolean
                  mrNarrowTypes[out] byNode: node: [n32] maybe, [216,222], Identifier, type: () => boolean
                  mrNarrowTypes[out] byNode: node: [n25] maybe(), [216,224], CallExpression, type: boolean
                  mrNarrowTypes[out] byNode: node: [n31] c && maybe(), [212,224], BinaryExpression, type: boolean
                  mrNarrowTypes[out] [n31] c && maybe(), [212,224], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n31] c && maybe(), [212,224], BinaryExpression, 
                resolveGroupForFlow[in]: [n26] x = true, [226,247], BinaryExpression, groupIndex:6, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:5,[then,]),  size before delete:2
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n26] x = true, [226,247], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                      symbol:{d,18}, { type:true, assignedType:<undef>}
                      symbol:{c,17}, { type:true, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n26] x = true, [226,247], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n49] true, [242,247], TrueKeyword, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:true, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n49] true, [242,247], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n49] true, [242,247], TrueKeyword, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n49] true, [242,247], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n49] true, [242,247], TrueKeyword, type: true
                      mrNarrowTypes[out] [n49] true, [242,247], TrueKeyword
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: x },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{x,19}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n49] true, [242,247], TrueKeyword, type: true
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n26] x = true, [226,247], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n26] x = true, [226,247], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      symbol:{x,19}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: x },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{x,19}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n49] true, [242,247], TrueKeyword, type: true
                  mrNarrowTypes[out] byNode: node: [n26] x = true, [226,247], BinaryExpression, type: true
                  mrNarrowTypes[out] [n26] x = true, [226,247], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n26] x = true, [226,247], BinaryExpression, 
                resolveGroupForFlow[in]: [n22] d = c, [310,324], BinaryExpression, groupIndex:7, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n31] c && maybe(), [212,224], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:5,[else,]),  size before delete:3
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n22] d = c, [310,324], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                      symbol:{d,18}, { type:true, assignedType:<undef>}
                      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n22] d = c, [310,324], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n33] c, [322,324], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                          symbol:{d,18}, { type:true, assignedType:<undef>}
                          symbol:{c,17}, { type:true | false, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n33] c, [322,324], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                        mrNarrowTypesInner[out] expr:[n33] c, [322,324], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n33] c, [322,324], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true | false
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n33] c, [322,324], Identifier, type: boolean
                      mrNarrowTypes[out] [n33] c, [322,324], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n33] c, [322,324], Identifier, type: boolean
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n22] d = c, [310,324], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n22] d = c, [310,324], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true | false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n33] c, [322,324], Identifier, type: boolean
                  mrNarrowTypes[out] byNode: node: [n22] d = c, [310,324], BinaryExpression, type: boolean
                  mrNarrowTypes[out] [n22] d = c, [310,324], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d = c, [310,324], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n22] d = c, [310,324], BinaryExpression, 
                resolveGroupForFlow[in]: [n20] c = b, [325,339], BinaryExpression, groupIndex:8, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n22] d = c, [310,324], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                CurrentBranchesMapC[0].delete(groupIdx:7,<undefined>),  size before delete:3
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n20] c = b, [325,339], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                      symbol:{d,18}, { type:true | false, assignedType:true | false}
                      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n20] c = b, [325,339], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypes[in] expr:[n34] b, [337,339], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                          symbol:{d,18}, { type:true | false, assignedType:true | false}
                          symbol:{c,17}, { type:true | false, assignedType:<undef>}
                          outer:[
                          outer:  symbol:{b,16}, { type:false, assignedType:false}
                          outer:  symbol:{c,17}, { type:true, assignedType:true}
                          outer:  symbol:{d,18}, { type:true, assignedType:true}
                          outer:  symbol:{x,19}, { type:false, assignedType:false}
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n34] b, [337,339], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:<undef>}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                        mrNarrowTypesInner[out] expr:[n34] b, [337,339], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n34] b, [337,339], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: false
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: false
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:<undef>}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n34] b, [337,339], Identifier, type: false
                      mrNarrowTypes[out] [n34] b, [337,339], Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n34] b, [337,339], Identifier, type: false
                    mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                    mrNarrowTypesInner[out] expr:[n20] c = b, [325,339], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n20] c = b, [325,339], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: false
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  undefined
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n34] b, [337,339], Identifier, type: false
                  mrNarrowTypes[out] byNode: node: [n20] c = b, [325,339], BinaryExpression, type: false
                  mrNarrowTypes[out] [n20] c = b, [325,339], BinaryExpression
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n20] c = b, [325,339], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n20] c = b, [325,339], BinaryExpression, 
              processLoop[dbg] loopGroup.groupIdx:4, did the rest of the loop, loopCount:0, loopState.invocations:1
              CurrentBranchesMapC[0].delete(groupIdx:8,<undefined>),  size before delete:3
                modifiedInnerSymtabUsingOuterForFinalCondition[in]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: [
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: x.loopState.symbolsAssigned:[]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   symbol:{c,17}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   symbol:{b,16}, { type:false, assignedType:<undef>}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:[
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab:   outer:]
                modifiedInnerSymtabUsingOuterForFinalCondition[in] symtab: ]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: [
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: x.loopState.symbolsAssigned:[]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:17, ename: c },type:false | true}, {symbol:{ id:18, ename: d },type:true | false}, ]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   symbol:{c,17}, { type:false | true, assignedType:<undef>}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   symbol:{b,16}, { type:false, assignedType:<undef>}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:[
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab:   outer:]
                modifiedInnerSymtabUsingOuterForFinalCondition[out] symtab: ]
              processLoop[dbg] loopGroup.groupIdx:4, do the final condition of the loop, loopCount:0, loopState.invocations:1
              CurrentBranchesMapC[0].delete(groupIdx:4,<undefined>),  size before delete:2
                resolveGroupForFlow[in]: [n15] d, [196,197], Identifier, groupIndex:4, kind:loop, maximalNode.parent.kind:WhileStatement, 
                resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                resolveGroupForFlow[dbg] symtab: [
                resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg] symtab:   outer:[
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg] symtab:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg] symtab:   outer:]
                resolveGroupForFlow[dbg] symtab: ]
                resolveGroupForFlow[dbg] constraintItem: {
                resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg] constraintItem:  kind: always,
                resolveGroupForFlow[dbg] constraintItem: },
                resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                  mrNarrowTypes[in] expr:[n15] d, [196,197], Identifier, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                  mrNarrowTypes[in] refTypesSymtab:
                    [
                    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    x.loopState.symbolsAssigned:[]
                    x.loopState.symbolsAssignedRange:[]
                      symbol:{d,18}, { type:true | false, assignedType:true | false}
                      symbol:{c,17}, { type:false | true, assignedType:<undef>}
                      symbol:{b,16}, { type:false, assignedType:<undef>}
                      outer:[
                      outer:  symbol:{b,16}, { type:false, assignedType:false}
                      outer:  symbol:{c,17}, { type:true, assignedType:true}
                      outer:  symbol:{d,18}, { type:true, assignedType:true}
                      outer:  symbol:{x,19}, { type:false, assignedType:false}
                      outer:]
                    ]
                  mrNarrowTypes[in] constraintItemIn:
                    {
                     symbolsInvoled:
                     kind: always,
                    },
                    mrNarrowTypesInner[in] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                    mrNarrowTypesInner[in] refTypesSymtab:
                    mrNarrowTypesInner[in] refTypesSymtab:  [
                    mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                    mrNarrowTypesInner[in] refTypesSymtab:  ]
                    mrNarrowTypesInner[in] constraintItemIn:
                    mrNarrowTypesInner[in] constraintItemIn:  {
                    mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                    mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                    mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                    mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                    mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                    mrNarrowTypesInner[out]:  innerret.byNode: { node: [n15] d, [196,197], Identifier, type: boolean
                    mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:18, ename: d }, isconst: false
                    mrNarrowTypesInner[out] expr:[n15] d, [196,197], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                  mrNarrowTypes[dbg]: qdotfallout.length: 0
                  mrNarrowTypes[dbg]: [n15] d, [196,197], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                  mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                    mrNarrowTypes[dbg]: passing:  {
                    mrNarrowTypes[dbg]: passing:    kind: return,
                    mrNarrowTypes[dbg]: passing:    type: true
                    mrNarrowTypes[dbg]: passing:    symtab: [
                    mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: passing:      outer:[
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: passing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: passing:      outer:]
                    mrNarrowTypes[dbg]: passing:    ]
                    mrNarrowTypes[dbg]: passing:    constraintItem: {
                    mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: passing:       kind: always,
                    mrNarrowTypes[dbg]: passing:      },
                    mrNarrowTypes[dbg]: passing:  }
                  mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                    mrNarrowTypes[dbg]: failing:  {
                    mrNarrowTypes[dbg]: failing:    kind: return,
                    mrNarrowTypes[dbg]: failing:    type: false
                    mrNarrowTypes[dbg]: failing:    symtab: [
                    mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: failing:      symbol:{d,18}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      symbol:{c,17}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: failing:      outer:[
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: failing:      outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: failing:      outer:]
                    mrNarrowTypes[dbg]: failing:    ]
                    mrNarrowTypes[dbg]: failing:    constraintItem: {
                    mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                    mrNarrowTypes[dbg]: failing:       kind: always,
                    mrNarrowTypes[dbg]: failing:      },
                    mrNarrowTypes[dbg]: failing:  }
                    mrNarrowTypes[dbg]: unmerged[0]: {
                    mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                    mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                    mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                    mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                    mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:4, x.loopState?.invocations:1
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                    mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:false | true, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:<undef>}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{b,16}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{c,17}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d,18}, { type:true, assignedType:true}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{x,19}, { type:false, assignedType:false}
                    mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                    mrNarrowTypes[dbg]: unmerged[0]:   ]
                    mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                    mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                    mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                    mrNarrowTypes[dbg]: unmerged[0]:     },
                    mrNarrowTypes[dbg]: unmerged[0]: }
                  mrNarrowTypes[out] byNode: node: [n15] d, [196,197], Identifier, type: boolean
                  mrNarrowTypes[out] [n15] d, [196,197], Identifier
                resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
                resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
                resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                resolveGroupForFlow[out]: [n15] d, [196,197], Identifier, 
              processLoop[dbg] loopGroup.groupIdx:4, did the final condition of the loop, loopCount:0, loopState.invocations:1
              processLoop[dbg] loopGroup.groupIdx:4, loop converged, loopCount=0, loopState.invocations:1
              processLoop[dbg out] loopIdx:4, gIdx:4: groupIdx:4, cbe.kind:2, node:[[n15] d, [196,197], Identifier]
              processLoop[dbg out] loopIdx:4, gIdx:4:   true:
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         [
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssigned:[]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssignedRange:[]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:[
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         ]
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: {
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: },
              processLoop[dbg out] loopIdx:4, gIdx:4:   false:
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         [
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssigned:[]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         x.loopState.symbolsAssignedRange:[]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:[
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:           outer:]
              processLoop[dbg out] loopIdx:4, gIdx:4:       symtab:         ]
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: {
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:4, gIdx:4:       constraintItem: },
              processLoop[dbg out] loopIdx:4, gIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              processLoop[dbg out] loopIdx:4, gIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              processLoop[dbg out] loopIdx:4, gIdx:6: groupIdx:6, cbe.kind:1, node:[[n26] x = true, [226,247], BinaryExpression]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         [
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:1
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         x.loopState.symbolsAssigned:[]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         x.loopState.symbolsAssignedRange:[]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           symbol:{x,19}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:[
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:           outer:]
              processLoop[dbg out] loopIdx:4, gIdx:6:   symtab:         ]
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem: {
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem:  symbolsInvoled:
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem:  kind: always,
              processLoop[dbg out] loopIdx:4, gIdx:6:   constraintItem: },
              processLoop[dbg out] loopIdx:4, gIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              processLoop[dbg out] loopIdx:4, gIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              processLoop[dbg out] loopIdx:4, gIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              processLoop[dbg out] loopIdx:4, gIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              processLoop[out] loopGroup.groupIdx:4, currentLoopDepth:1, maxGroupIdxProcessed:8, loopState.invocations:1
            getTypeByMrNarrow[out] expr: [n15] d, [196,197], Identifier -> boolean
          getFlowTypeOfReference[out]: reference [n15] d, [196,197], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f8], LoopLabel|Label|Referenced|Shared, branchKind:preWhileLoop, [gftor call depth:0, return: boolean
        In getIdentifier(), getFlowTypeOfReference returned boolean
        checkExpression[out]: [n15] d, [196,197], Identifier -> boolean
        checkSourceElement[in] node: [n50] {
        if (c && maybe()){
            x = true; // gets set on iteration #0 only
            break;
        }
        d = c;
        c = b;
    }, [198,346], Block
          checkSourceElement[in] node: [n51] if (c && maybe()){
            x = true; // gets set on iteration #0 only
            break;
        }, [199,310], IfStatement
            checkExpression[in] node: [n31] c && maybe(), [212,224], BinaryExpression
              checkExpression[in] node: [n24] c, [212,213], Identifier
                getFlowTypeOfReference[in]: reference [n24] c, [212,213], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f24], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0
                  getTypeByMrNarrow[in] expr: [n24] c, [212,213], Identifier
                  getTypeByMrNarrowAux[dbg]: reference: [n24] c, [212,213], Identifier, maximalNode: [n31] c && maybe(), [212,224], BinaryExpression
                  getTypeByMrNarrowAux[dbg]: cache hit
                  getTypeByMrNarrow[out] expr: [n24] c, [212,213], Identifier -> boolean
                getFlowTypeOfReference[out]: reference [n24] c, [212,213], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f24], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0, return: boolean
              In getIdentifier(), getFlowTypeOfReference returned boolean
              checkExpression[out]: [n24] c, [212,213], Identifier -> boolean
              checkExpression[in] node: [n24] c, [212,213], Identifier
                getFlowTypeOfReference[in]: reference [n24] c, [212,213], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f24], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0
                  getTypeByMrNarrow[in] expr: [n24] c, [212,213], Identifier
                  getTypeByMrNarrowAux[dbg]: reference: [n24] c, [212,213], Identifier, maximalNode: [n31] c && maybe(), [212,224], BinaryExpression
                  getTypeByMrNarrowAux[dbg]: cache hit
                  getTypeByMrNarrow[out] expr: [n24] c, [212,213], Identifier -> boolean
                getFlowTypeOfReference[out]: reference [n24] c, [212,213], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f24], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0, return: boolean
              In getIdentifier(), getFlowTypeOfReference returned boolean
              checkExpression[out]: [n24] c, [212,213], Identifier -> boolean
              checkExpression[in] node: [n25] maybe(), [216,224], CallExpression
                resolveCallExpression[in]: node: [n25] maybe(), [216,224], CallExpression
                  checkExpression[in] node: [n32] maybe, [216,222], Identifier
                  checkExpression[out]: [n32] maybe, [216,222], Identifier -> () => boolean
                  resolveCall[in]: node: [n25] maybe(), [216,224], CallExpression
                  resolveCall[out]: node: [n25] maybe(), [216,224], CallExpression
                resolveCallExpression[out]: node: [n25] maybe(), [216,224], CallExpression
              checkExpression[out]: [n25] maybe(), [216,224], CallExpression -> boolean
            checkExpression[out]: [n31] c && maybe(), [212,224], BinaryExpression -> boolean
            checkExpression[in] node: [n25] maybe(), [216,224], CallExpression
            checkExpression[out]: [n25] maybe(), [216,224], CallExpression -> boolean
            checkSourceElement[in] node: [n52] {
            x = true; // gets set on iteration #0 only
            break;
        }, [225,310], Block
              checkSourceElement[in] node: [n53] x = true;, [226,248], ExpressionStatement
                checkExpression[in] node: [n32] maybe, [216,222], Identifier
                checkExpression[out]: [n32] maybe, [216,222], Identifier -> () => boolean
                checkExpression[in] node: [n26] x = true, [226,247], BinaryExpression
                  checkExpression[in] node: [n27] x, [226,240], Identifier
                  checkExpression[out]: [n27] x, [226,240], Identifier -> boolean
                  checkExpression[in] node: [n49] true, [242,247], TrueKeyword
                  checkExpression[out]: [n49] true, [242,247], TrueKeyword -> true
                checkExpression[out]: [n26] x = true, [226,247], BinaryExpression -> true
              checkSourceElement[out]: nodeid: 53
              checkSourceElement[in] node: [n54] break;, [248,300], BreakStatement
              checkSourceElement[out]: nodeid: 54
            checkSourceElement[out]: nodeid: 52
          checkSourceElement[out]: nodeid: 51
          checkSourceElement[in] node: [n55] d = c;, [310,325], ExpressionStatement
            checkExpression[in] node: [n22] d = c, [310,324], BinaryExpression
              checkExpression[in] node: [n23] d, [310,320], Identifier
              checkExpression[out]: [n23] d, [310,320], Identifier -> boolean
              checkExpression[in] node: [n33] c, [322,324], Identifier
                getFlowTypeOfReference[in]: reference [n33] c, [322,324], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f20], BranchLabel|Label|Referenced, branchKind:postIf, [gftor call depth:0
                  getTypeByMrNarrow[in] expr: [n33] c, [322,324], Identifier
                  getTypeByMrNarrowAux[dbg]: reference: [n33] c, [322,324], Identifier, maximalNode: [n22] d = c, [310,324], BinaryExpression
                  getTypeByMrNarrowAux[dbg]: cache hit
                  getTypeByMrNarrow[out] expr: [n33] c, [322,324], Identifier -> boolean
                getFlowTypeOfReference[out]: reference [n33] c, [322,324], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f20], BranchLabel|Label|Referenced, branchKind:postIf, [gftor call depth:0, return: boolean
              In getIdentifier(), getFlowTypeOfReference returned boolean
              checkExpression[out]: [n33] c, [322,324], Identifier -> boolean
            checkExpression[out]: [n22] d = c, [310,324], BinaryExpression -> boolean
          checkSourceElement[out]: nodeid: 55
          checkSourceElement[in] node: [n56] c = b;, [325,340], ExpressionStatement
            checkExpression[in] node: [n20] c = b, [325,339], BinaryExpression
              checkExpression[in] node: [n21] c, [325,335], Identifier
              checkExpression[out]: [n21] c, [325,335], Identifier -> boolean
              checkExpression[in] node: [n34] b, [337,339], Identifier
                getFlowTypeOfReference[in]: reference [n34] b, [337,339], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f18], Referenced|ExpressionStatement, [n22] d = c, [310,324], BinaryExpression[gftor call depth:0
                  getTypeByMrNarrow[in] expr: [n34] b, [337,339], Identifier
                  getTypeByMrNarrowAux[dbg]: reference: [n34] b, [337,339], Identifier, maximalNode: [n20] c = b, [325,339], BinaryExpression
                  getTypeByMrNarrowAux[dbg]: cache hit
                  getTypeByMrNarrow[out] expr: [n34] b, [337,339], Identifier -> false
                getFlowTypeOfReference[out]: reference [n34] b, [337,339], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f18], Referenced|ExpressionStatement, [n22] d = c, [310,324], BinaryExpression[gftor call depth:0, return: false
              In getIdentifier(), getFlowTypeOfReference returned false
              checkExpression[out]: [n34] b, [337,339], Identifier -> false
            checkExpression[out]: [n20] c = b, [325,339], BinaryExpression -> false
          checkSourceElement[out]: nodeid: 56
        checkSourceElement[out]: nodeid: 50
      checkSourceElement[out]: nodeid: 48
      checkSourceElement[in] node: [n57] x;, [346,353], ExpressionStatement
        checkExpression[in] node: [n14] x, [346,352], Identifier
          getFlowTypeOfReference[in]: reference [n14] x, [346,352], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f6], BranchLabel|Label|Referenced, branchKind:postWhileLoop, [gftor call depth:0
            getTypeByMrNarrow[in] expr: [n14] x, [346,352], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n14] x, [346,352], Identifier, maximalNode: [n14] x, [346,352], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 9, maximalNode: [n14] x, [346,352], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>9] [n14] x, [346,352], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n14] x, [346,352], Identifier}
              resolveGroupForFlow[in]: [n14] x, [346,352], Identifier, groupIndex:9, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n26] x = true, [226,247], BinaryExpression]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                createSuperloopRefTypesSymtab[in]
                createSuperloopRefTypesSymtab[in] stin: [
                createSuperloopRefTypesSymtab[in] stin: loopGroup?.groupIdx:4, x.loopState?.invocations:2
                createSuperloopRefTypesSymtab[in] stin: x.loopState.symbolsAssigned:[]
                createSuperloopRefTypesSymtab[in] stin: x.loopState.symbolsAssignedRange:[]
                createSuperloopRefTypesSymtab[in] stin:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                createSuperloopRefTypesSymtab[in] stin:   symbol:{c,17}, { type:true | false, assignedType:<undef>}
                createSuperloopRefTypesSymtab[in] stin:   symbol:{x,19}, { type:true, assignedType:true}
                createSuperloopRefTypesSymtab[in] stin:   symbol:{b,16}, { type:false, assignedType:<undef>}
                createSuperloopRefTypesSymtab[in] stin:   outer:[
                createSuperloopRefTypesSymtab[in] stin:   outer:  symbol:{b,16}, { type:false, assignedType:false}
                createSuperloopRefTypesSymtab[in] stin:   outer:  symbol:{c,17}, { type:true, assignedType:true}
                createSuperloopRefTypesSymtab[in] stin:   outer:  symbol:{d,18}, { type:true, assignedType:true}
                createSuperloopRefTypesSymtab[in] stin:   outer:  symbol:{x,19}, { type:false, assignedType:false}
                createSuperloopRefTypesSymtab[in] stin:   outer:]
                createSuperloopRefTypesSymtab[in] stin: ]
                createSuperloopRefTypesSymtab[out] stout: [
                createSuperloopRefTypesSymtab[out] stout:   symbol:{b,16}, { type:false, assignedType:false}
                createSuperloopRefTypesSymtab[out] stout:   symbol:{c,17}, { type:true | false, assignedType:true | false}
                createSuperloopRefTypesSymtab[out] stout:   symbol:{d,18}, { type:true | false, assignedType:true | false}
                createSuperloopRefTypesSymtab[out] stout:   symbol:{x,19}, { type:true, assignedType:true}
                createSuperloopRefTypesSymtab[out] stout: ]
                createSuperloopRefTypesSymtab[out]
              CurrentBranchesMapC[0].delete(groupIdx:4,[else,]),  size before delete:2
              CurrentBranchesMapC[0].delete(groupIdx:6,<undefined>),  size before delete:2
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n14] x, [346,352], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16}, { type:false, assignedType:false}
                    symbol:{c,17}, { type:true | false, assignedType:true | false}
                    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    symbol:{x,19}, { type:true, assignedType:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n14] x, [346,352], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:19, ename: x },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:19, ename: x }, isconst: false
                  mrNarrowTypesInner[out] expr:[n14] x, [346,352], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n14] x, [346,352], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:19, ename: x },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n14] x, [346,352], Identifier, type: true
                mrNarrowTypes[out] [n14] x, [346,352], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] x, [346,352], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n14] x, [346,352], Identifier] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n14] x, [346,352], Identifier, 
            getTypeByMrNarrow[out] expr: [n14] x, [346,352], Identifier -> true
          getFlowTypeOfReference[out]: reference [n14] x, [346,352], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f6], BranchLabel|Label|Referenced, branchKind:postWhileLoop, [gftor call depth:0, return: true
        In getIdentifier(), getFlowTypeOfReference returned true
        checkExpression[out]: [n14] x, [346,352], Identifier -> true
      checkSourceElement[out]: nodeid: 57
      checkSourceElement[in] node: [n58] b;, [353,461], ExpressionStatement
        checkExpression[in] node: [n13] b, [353,460], Identifier
          getFlowTypeOfReference[in]: reference [n13] b, [353,460], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f5], Referenced|ExpressionStatement, [n14] x, [346,352], Identifier[gftor call depth:0
            getTypeByMrNarrow[in] expr: [n13] b, [353,460], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n13] b, [353,460], Identifier, maximalNode: [n13] b, [353,460], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 10, maximalNode: [n13] b, [353,460], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>10] [n13] b, [353,460], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n13] b, [353,460], Identifier}
              resolveGroupForFlow[in]: [n13] b, [353,460], Identifier, groupIndex:10, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] x, [346,352], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n14] x, [346,352], Identifier] -> type:true
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:9,<undefined>),  size before delete:2
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n13] b, [353,460], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16}, { type:false, assignedType:false}
                    symbol:{c,17}, { type:true | false, assignedType:true | false}
                    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    symbol:{x,19}, { type:true, assignedType:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n13] b, [353,460], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: false
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: b }, isconst: false
                  mrNarrowTypesInner[out] expr:[n13] b, [353,460], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n13] b, [353,460], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: false
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: b },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: false
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n13] b, [353,460], Identifier, type: false
                mrNarrowTypes[out] [n13] b, [353,460], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n13] b, [353,460], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n14] x, [346,352], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n13] b, [353,460], Identifier] -> type:false
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n13] b, [353,460], Identifier, 
            getTypeByMrNarrow[out] expr: [n13] b, [353,460], Identifier -> false
          getFlowTypeOfReference[out]: reference [n13] b, [353,460], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f5], Referenced|ExpressionStatement, [n14] x, [346,352], Identifier[gftor call depth:0, return: false
        In getIdentifier(), getFlowTypeOfReference returned false
        checkExpression[out]: [n13] b, [353,460], Identifier -> false
      checkSourceElement[out]: nodeid: 58
      checkSourceElement[in] node: [n59] c;, [461,489], ExpressionStatement
        checkExpression[in] node: [n12] c, [461,488], Identifier
          getFlowTypeOfReference[in]: reference [n12] c, [461,488], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f4], Referenced|ExpressionStatement, [n13] b, [353,460], Identifier[gftor call depth:0
            getTypeByMrNarrow[in] expr: [n12] c, [461,488], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n12] c, [461,488], Identifier, maximalNode: [n12] c, [461,488], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 11, maximalNode: [n12] c, [461,488], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>11] [n12] c, [461,488], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n12] c, [461,488], Identifier}
              resolveGroupForFlow[in]: [n12] c, [461,488], Identifier, groupIndex:11, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n13] b, [353,460], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:10
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n14] x, [346,352], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n13] b, [353,460], Identifier] -> type:false
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:10,<undefined>),  size before delete:2
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n12] c, [461,488], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16}, { type:false, assignedType:false}
                    symbol:{c,17}, { type:true | false, assignedType:true | false}
                    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    symbol:{x,19}, { type:true, assignedType:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n12] c, [461,488], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:17, ename: c },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:17, ename: c }, isconst: false
                  mrNarrowTypesInner[out] expr:[n12] c, [461,488], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n12] c, [461,488], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true | false
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:17, ename: c },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n12] c, [461,488], Identifier, type: boolean
                mrNarrowTypes[out] [n12] c, [461,488], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] c, [461,488], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n14] x, [346,352], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n13] b, [353,460], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:11: [node:[n12] c, [461,488], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n12] c, [461,488], Identifier, 
            getTypeByMrNarrow[out] expr: [n12] c, [461,488], Identifier -> boolean
          getFlowTypeOfReference[out]: reference [n12] c, [461,488], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f4], Referenced|ExpressionStatement, [n13] b, [353,460], Identifier[gftor call depth:0, return: boolean
        In getIdentifier(), getFlowTypeOfReference returned boolean
        checkExpression[out]: [n12] c, [461,488], Identifier -> boolean
      checkSourceElement[out]: nodeid: 59
      checkSourceElement[in] node: [n60] d;, [489,527], ExpressionStatement
        checkExpression[in] node: [n11] d, [489,526], Identifier
          getFlowTypeOfReference[in]: reference [n11] d, [489,526], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f3], Referenced|ExpressionStatement, [n12] c, [461,488], Identifier[gftor call depth:0
            getTypeByMrNarrow[in] expr: [n11] d, [489,526], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n11] d, [489,526], Identifier, maximalNode: [n11] d, [489,526], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 12, maximalNode: [n11] d, [489,526], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>12] [n11] d, [489,526], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n11] d, [489,526], Identifier}
              resolveGroupForFlow[in]: [n11] d, [489,526], Identifier, groupIndex:12, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] c, [461,488], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:11
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n14] x, [346,352], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n13] b, [353,460], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:11: [node:[n12] c, [461,488], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:11,<undefined>),  size before delete:2
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg] symtab:   symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg] symtab:   symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n11] d, [489,526], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{b,16}, { type:false, assignedType:false}
                    symbol:{c,17}, { type:true | false, assignedType:true | false}
                    symbol:{d,18}, { type:true | false, assignedType:true | false}
                    symbol:{x,19}, { type:true, assignedType:true}
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n11] d, [489,526], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:18, ename: d },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true | false
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:18, ename: d }, isconst: false
                  mrNarrowTypesInner[out] expr:[n11] d, [489,526], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n11] d, [489,526], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: true | false
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: passing:      symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: passing:      symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:18, ename: d },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: true | false
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{b,16}, { type:false, assignedType:false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{c,17}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d,18}, { type:true | false, assignedType:true | false}
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{x,19}, { type:true, assignedType:true}
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n11] d, [489,526], Identifier, type: boolean
                mrNarrowTypes[out] [n11] d, [489,526], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d, [196,197], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:4, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d,18}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{c,17}, { type:false | true, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{b,16}, { type:false, assignedType:<undef>}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{c,17}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d,18}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{x,19}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n11] d, [489,526], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:12
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{b,16}, { type:false, assignedType:false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{c,17}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d,18}, { type:true | false, assignedType:true | false}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{x,19}, { type:true, assignedType:true}
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n41] false, [62,68], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n19] b = false, [58,68], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n43] true, [81,86], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n18] c = true, [77,86], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n45] true, [99,104], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n17] d = true, [95,104], VariableDeclaration] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n47] false, [117,123], FalseKeyword] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n16] x = false, [113,123], VariableDeclaration] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n15] d, [196,197], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n24] c, [212,213], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n32] maybe, [216,222], Identifier] -> type:() => boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n25] maybe(), [216,224], CallExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n31] c && maybe(), [212,224], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n49] true, [242,247], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n26] x = true, [226,247], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n33] c, [322,324], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n22] d = c, [310,324], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n34] b, [337,339], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n20] c = b, [325,339], BinaryExpression] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n14] x, [346,352], Identifier] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n13] b, [353,460], Identifier] -> type:false
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:11: [node:[n12] c, [461,488], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:12: [node:[n11] d, [489,526], Identifier] -> type:boolean
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n11] d, [489,526], Identifier, 
            getTypeByMrNarrow[out] expr: [n11] d, [489,526], Identifier -> boolean
          getFlowTypeOfReference[out]: reference [n11] d, [489,526], Identifier, declaredType: boolean, initialType: boolean | undefined, flowContainer: 37, flowNode: [f3], Referenced|ExpressionStatement, [n12] c, [461,488], Identifier[gftor call depth:0, return: boolean
        In getIdentifier(), getFlowTypeOfReference returned boolean
        checkExpression[out]: [n11] d, [489,526], Identifier -> boolean
      checkSourceElement[out]: nodeid: 60
    checkSourceElement[out]: nodeid: 39
  checkSourceElement[out]: nodeid: 37
  checkSourceElement[in] node: [n61] , [560,561], EndOfFileToken
  checkSourceElement[out]: nodeid: 61
_caxnc-whileLoop-0023.ts, time(ms): 496, myMaxDepth: 0
