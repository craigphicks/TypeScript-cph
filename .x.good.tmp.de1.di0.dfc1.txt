myDebug=true, myDisableInfer=false, myDisable=true, myNoAliasAction=true, myTestFilename=, currentTestFile=_caxnc-whileLoop-0056.ts
  checkSourceElement[in] node: [n29] function t56(){
    // @ts-dev-expect-string "count: 0, effectiveDeclaredTsType: number"
    let d1 = 0;
    d1;
    // @ts-dev-expect-string "loopCount:2, invocations:1"
    while (true){
        d1;
        if (d1===0){
            d1 ;
            d1=1;
            d1  ;
        }
        else if (d1===1) {
            d1   ;
            break;
        }
        else if (d1===999){
            d1    ;
        }
    }
    d1;
}, [0,433], FunctionDeclaration
    checkSourceElement[in] node: [n30] {
    // @ts-dev-expect-string "count: 0, effectiveDeclaredTsType: number"
    let d1 = 0;
    d1;
    // @ts-dev-expect-string "loopCount:2, invocations:1"
    while (true){
        d1;
        if (d1===0){
            d1 ;
            d1=1;
            d1  ;
        }
        else if (d1===1) {
            d1   ;
            break;
        }
        else if (d1===999){
            d1    ;
        }
    }
    d1;
}, [14,433], Block
      checkSourceElement[in] node: [n31] let d1 = 0;, [15,104], VariableStatement
        checkSourceElement[in] node: [n14] d1 = 0, [96,103], VariableDeclaration
          checkVariableLikeDeclaration[in]: node: [n14] d1 = 0, [96,103], VariableDeclaration
            checkExpression[in] node: [n32] 0, [101,103], NumericLiteral
            checkExpression[out]: [n32] 0, [101,103], NumericLiteral -> 0
            checkExpression[in] node: [n32] 0, [101,103], NumericLiteral
            checkExpression[out]: [n32] 0, [101,103], NumericLiteral -> 0
          checkVariableLikeDeclaration[out]: node: [n14] d1 = 0, [96,103], VariableDeclaration
        checkSourceElement[out]: nodeid: 14
      checkSourceElement[out]: nodeid: 31
      checkSourceElement[in] node: [n33] d1;, [104,112], ExpressionStatement
        checkExpression[in] node: [n13] d1, [104,111], Identifier
          getFlowTypeOfReference[in]: reference [n13] d1, [104,111], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f7], Assignment|Referenced, [n14] d1 = 0, [96,103], VariableDeclaration[gftor call depth:0
            getTypeByMrNarrow[in] expr: [n13] d1, [104,111], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n13] d1, [104,111], Identifier, maximalNode: [n13] d1, [104,111], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 1, maximalNode: [n13] d1, [104,111], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>0] [n14] d1 = 0, [96,103], VariableDeclaration
                updateHeapWithGroupForFlow[dbg] heap[2=>1] [n13] d1, [104,111], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n13] d1, [104,111], Identifier}
              resolveGroupForFlow[in]: [n14] d1 = 0, [96,103], VariableDeclaration, groupIndex:0, kind:plain, maximalNode.parent.kind:VariableDeclarationList, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n14] d1 = 0, [96,103], VariableDeclaration, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n14] d1 = 0, [96,103], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                    mrNarrowTypes[in] expr:[n32] 0, [101,103], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                    mrNarrowTypes[in] refTypesSymtab:
                      [
                      ]
                    mrNarrowTypes[in] constraintItemIn:
                      {
                       symbolsInvoled:
                       kind: always,
                      },
                      mrNarrowTypesInner[in] expr:[n32] 0, [101,103], NumericLiteral, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypesInner[in] refTypesSymtab:
                      mrNarrowTypesInner[in] refTypesSymtab:  [
                      mrNarrowTypesInner[in] refTypesSymtab:  ]
                      mrNarrowTypesInner[in] constraintItemIn:
                      mrNarrowTypesInner[in] constraintItemIn:  {
                      mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                      mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                      mrNarrowTypesInner[in] constraintItemIn:  },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                      mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                      mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                      mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                      mrNarrowTypesInner[out] expr:[n32] 0, [101,103], NumericLiteral, inferStatus:{inCondition:false, currentReplayableItem:undefined
                    mrNarrowTypes[dbg]: qdotfallout.length: 0
                    mrNarrowTypes[dbg]: [n32] 0, [101,103], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                    mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                      mrNarrowTypes[dbg]: passing:  {
                      mrNarrowTypes[dbg]: passing:    kind: return,
                      mrNarrowTypes[dbg]: passing:    type: 0
                      mrNarrowTypes[dbg]: passing:    symtab: [
                      mrNarrowTypes[dbg]: passing:    ]
                      mrNarrowTypes[dbg]: passing:    constraintItem: {
                      mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                      mrNarrowTypes[dbg]: passing:       kind: always,
                      mrNarrowTypes[dbg]: passing:      },
                      mrNarrowTypes[dbg]: passing:  }
                    mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                      mrNarrowTypes[dbg]: failing:  undefined
                      mrNarrowTypes[dbg]: unmerged[0]: {
                      mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                      mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                      mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                      mrNarrowTypes[dbg]: unmerged[0]:   ]
                      mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                      mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                      mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                      mrNarrowTypes[dbg]: unmerged[0]:     },
                      mrNarrowTypes[dbg]: unmerged[0]: }
                    mrNarrowTypes[out] byNode: node: [n32] 0, [101,103], NumericLiteral, type: 0
                    mrNarrowTypes[out] [n32] 0, [101,103], NumericLiteral
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n32] 0, [101,103], NumericLiteral, type: 0
                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                  mrNarrowTypesInner[out] expr:[n14] d1 = 0, [96,103], VariableDeclaration, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n14] d1 = 0, [96,103], VariableDeclaration: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: 0
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n32] 0, [101,103], NumericLiteral, type: 0
                mrNarrowTypes[out] byNode: node: [n14] d1 = 0, [96,103], VariableDeclaration, type: 0
                mrNarrowTypes[out] [n14] d1 = 0, [96,103], VariableDeclaration
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n14] d1 = 0, [96,103], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n14] d1 = 0, [96,103], VariableDeclaration, 
              resolveGroupForFlow[in]: [n13] d1, [104,111], Identifier, groupIndex:1, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n14] d1 = 0, [96,103], VariableDeclaration]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
              CurrentBranchesMapC[0].delete(groupIdx:0,<undefined>),  size before delete:1
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n13] d1, [104,111], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n13] d1, [104,111], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                  mrNarrowTypesInner[out] expr:[n13] d1, [104,111], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n13] d1, [104,111], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: 0
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n13] d1, [104,111], Identifier, type: 0
                mrNarrowTypes[out] [n13] d1, [104,111], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n13] d1, [104,111], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n13] d1, [104,111], Identifier, 
            getTypeByMrNarrow[out] expr: [n13] d1, [104,111], Identifier -> 0
          getFlowTypeOfReference[out]: reference [n13] d1, [104,111], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f7], Assignment|Referenced, [n14] d1 = 0, [96,103], VariableDeclaration[gftor call depth:0, return: 0
        In getIdentifier(), getFlowTypeOfReference returned 0
        checkExpression[out]: [n13] d1, [104,111], Identifier -> 0
      checkSourceElement[out]: nodeid: 33
      checkSourceElement[in] node: [n34] while (true){
        d1;
        if (d1===0){
            d1 ;
            d1=1;
            d1  ;
        }
        else if (d1===1) {
            d1   ;
            break;
        }
        else if (d1===999){
            d1    ;
        }
    }, [112,423], WhileStatement
        checkExpression[in] node: [n12] true, [182,186], TrueKeyword
        checkExpression[out]: [n12] true, [182,186], TrueKeyword -> true
        checkSourceElement[in] node: [n35] {
        d1;
        if (d1===0){
            d1 ;
            d1=1;
            d1  ;
        }
        else if (d1===1) {
            d1   ;
            break;
        }
        else if (d1===999){
            d1    ;
        }
    }, [187,423], Block
          checkSourceElement[in] node: [n36] d1;, [188,200], ExpressionStatement
            checkExpression[in] node: [n20] d1, [188,199], Identifier
              getFlowTypeOfReference[in]: reference [n20] d1, [188,199], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f22], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0
                getTypeByMrNarrow[in] expr: [n20] d1, [188,199], Identifier
                getTypeByMrNarrowAux[dbg]: reference: [n20] d1, [188,199], Identifier, maximalNode: [n20] d1, [188,199], Identifier
                  updateHeapWithGroupForFlow[in]: group: {groupIdx: 3, maximalNode: [n20] d1, [188,199], Identifier}. minGroupIdxToAdd: undefined
                    updateHeapWithGroupForFlow[dbg] heap[1=>2] [n12] true, [182,186], TrueKeyword
                    updateHeapWithGroupForFlow[dbg] heap[2=>3] [n20] d1, [188,199], Identifier
                    updateHeapWithGroupForFlow[dbg] heap[3=>4] [n19] d1===0, [213,219], BinaryExpression
                    updateHeapWithGroupForFlow[dbg] heap[4=>5] [n18] d1, [221,236], Identifier
                    updateHeapWithGroupForFlow[dbg] heap[5=>6] [n16] d1=1, [238,255], BinaryExpression
                    updateHeapWithGroupForFlow[dbg] heap[6=>7] [n15] d1, [256,271], Identifier
                    updateHeapWithGroupForFlow[dbg] heap[7=>8] [n23] d1===1, [302,308], BinaryExpression
                    updateHeapWithGroupForFlow[dbg] heap[8=>9] [n24] d1, [311,326], Identifier
                    updateHeapWithGroupForFlow[dbg] heap[9=>10] [n22] d1===999, [377,385], BinaryExpression
                    updateHeapWithGroupForFlow[dbg] heap[10=>11] [n21] d1, [387,402], Identifier
                  updateHeapWithGroupForFlow[out]: group: {maximalNode: [n20] d1, [188,199], Identifier}
                  processLoop[in] loopGroup.groupIdx:2, currentLoopDepth:1
                  processLoop[dbg] loopGroup.groupIdx:2, do the condition of the loop, loopCount:0, loopState.invocations:0
                  CurrentBranchesMapC[0].delete(groupIdx:1,<undefined>),  size before delete:1
                    resolveGroupForFlow[in]: [n12] true, [182,186], TrueKeyword, groupIndex:2, kind:loop, maximalNode.parent.kind:WhileStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n12] true, [182,186], TrueKeyword, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n12] true, [182,186], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: never
                        mrNarrowTypes[dbg]: failing:    symtab: <undef>
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                        mrNarrowTypes[dbg]: failing:       kind: never,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n12] true, [182,186], TrueKeyword, type: true
                      mrNarrowTypes[out] [n12] true, [182,186], TrueKeyword
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n12] true, [182,186], TrueKeyword, 
                  processLoop[dbg] loopGroup.groupIdx:2, did the condition of the loop, loopCount:0, loopState.invocations:0
                  processLoop[dbg] loopGroup.groupIdx:2, do the rest of the loop, loopCount:0, loopState.invocations:0
                    resolveGroupForFlow[in]: [n20] d1, [188,199], Identifier, groupIndex:3, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:2,[then,]),  size before delete:1
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n20] d1, [188,199], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n20] d1, [188,199], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: number
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n20] d1, [188,199], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n20] d1, [188,199], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: number
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: number
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n20] d1, [188,199], Identifier, type: number
                      mrNarrowTypes[out] [n20] d1, [188,199], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n20] d1, [188,199], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n20] d1, [188,199], Identifier, 
                    resolveGroupForFlow[in]: [n19] d1===0, [213,219], BinaryExpression, groupIndex:4, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n20] d1, [188,199], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:3,<undefined>),  size before delete:2
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n19] d1===0, [213,219], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n19] d1===0, [213,219], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypesByBinaryExpressionEqualsEquals[in] [n19] d1===0, [213,219], BinaryExpression
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start left mrNarrowTypes
                            mrNarrowTypes[in] expr:[n25] d1, [213,215], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[]
                                symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n25] d1, [213,215], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: number
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                              mrNarrowTypesInner[out] expr:[n25] d1, [213,215], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n25] d1, [213,215], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: number
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypes[dbg]: unmerged[0]:   type: number
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n25] d1, [213,215], Identifier, type: number
                            mrNarrowTypes[out] [n25] d1, [213,215], Identifier
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end left mrNarrowTypes
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start right mrNarrowTypes for left#0 
                            mrNarrowTypes[in] expr:[n37] 0, [218,219], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[]
                                symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n37] 0, [218,219], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                              mrNarrowTypesInner[out] expr:[n37] 0, [218,219], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n37] 0, [218,219], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: 0
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n37] 0, [218,219], NumericLiteral, type: 0
                            mrNarrowTypes[out] [n37] 0, [218,219], NumericLiteral
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end right mrNarrowTypes for left#0 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, rttrLeft.type:number, rttrRight.type:0, 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, isect:0 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, singular:0, singularCount:1
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, nonSingular:never, nonSingularCount:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] {symbol:{ id:16, ename: d1 }, 
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] declared: {symbol:{ id:16, ename: d1 },type:0}
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] partitionedType: 0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] passType: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   type: 0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   type: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: }
                          mrNarrowTypesByBinaryExpressionEqualsEquals[out] [n19] d1===0, [213,219], BinaryExpression
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] d1, [213,215], Identifier, type: number
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n37] 0, [218,219], NumericLiteral, type: 0
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n19] d1===0, [213,219], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n19] d1===0, [213,219], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: failing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                        mrNarrowTypes[dbg]: unmerged[1]: {
                        mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[1]:   type: false
                        mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[1]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[1]:   ]
                        mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[1]:     },
                        mrNarrowTypes[dbg]: unmerged[1]: }
                      mrNarrowTypes[out] byNode: node: [n25] d1, [213,215], Identifier, type: number
                      mrNarrowTypes[out] byNode: node: [n37] 0, [218,219], NumericLiteral, type: 0
                      mrNarrowTypes[out] byNode: node: [n19] d1===0, [213,219], BinaryExpression, type: boolean
                      mrNarrowTypes[out] [n19] d1===0, [213,219], BinaryExpression
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n19] d1===0, [213,219], BinaryExpression, 
                    resolveGroupForFlow[in]: [n18] d1, [221,236], Identifier, groupIndex:5, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:4,[then,]),  size before delete:2
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n18] d1, [221,236], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n18] d1, [221,236], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n18] d1, [221,236], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n18] d1, [221,236], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 0
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n18] d1, [221,236], Identifier, type: 0
                      mrNarrowTypes[out] [n18] d1, [221,236], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n18] d1, [221,236], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n18] d1, [221,236], Identifier, 
                    resolveGroupForFlow[in]: [n16] d1=1, [238,255], BinaryExpression, groupIndex:6, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n18] d1, [221,236], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:5,<undefined>),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n16] d1=1, [238,255], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n16] d1=1, [238,255], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypes[in] expr:[n38] 1, [254,255], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            x.loopState.symbolsAssigned:[]
                            x.loopState.symbolsAssignedRange:[]
                              symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                              outer:[
                              outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              outer:]
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n38] 1, [254,255], NumericLiteral, inferStatus:{inCondition:false, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                            mrNarrowTypesInner[out] expr:[n38] 1, [254,255], NumericLiteral, inferStatus:{inCondition:false, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n38] 1, [254,255], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: 1
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                            mrNarrowTypes[dbg]: passing:      outer:[
                            mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:]
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  undefined
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n38] 1, [254,255], NumericLiteral, type: 1
                          mrNarrowTypes[out] [n38] 1, [254,255], NumericLiteral
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n38] 1, [254,255], NumericLiteral, type: 1
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n16] d1=1, [238,255], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n16] d1=1, [238,255], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 1
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n38] 1, [254,255], NumericLiteral, type: 1
                      mrNarrowTypes[out] byNode: node: [n16] d1=1, [238,255], BinaryExpression, type: 1
                      mrNarrowTypes[out] [n16] d1=1, [238,255], BinaryExpression
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n16] d1=1, [238,255], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n16] d1=1, [238,255], BinaryExpression, 
                    resolveGroupForFlow[in]: [n15] d1, [256,271], Identifier, groupIndex:7, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n16] d1=1, [238,255], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:6,<undefined>),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n15] d1, [256,271], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n15] d1, [256,271], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n15] d1, [256,271], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n15] d1, [256,271], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 1
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n15] d1, [256,271], Identifier, type: 1
                      mrNarrowTypes[out] [n15] d1, [256,271], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n15] d1, [256,271], Identifier, 
                    resolveGroupForFlow[in]: [n23] d1===1, [302,308], BinaryExpression, groupIndex:8, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:4,[else,]),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n23] d1===1, [302,308], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n23] d1===1, [302,308], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypesByBinaryExpressionEqualsEquals[in] [n23] d1===1, [302,308], BinaryExpression
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start left mrNarrowTypes
                            mrNarrowTypes[in] expr:[n26] d1, [302,304], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[]
                                symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n26] d1, [302,304], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: number
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                              mrNarrowTypesInner[out] expr:[n26] d1, [302,304], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n26] d1, [302,304], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: number
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypes[dbg]: unmerged[0]:   type: number
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n26] d1, [302,304], Identifier, type: number
                            mrNarrowTypes[out] [n26] d1, [302,304], Identifier
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end left mrNarrowTypes
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start right mrNarrowTypes for left#0 
                            mrNarrowTypes[in] expr:[n39] 1, [307,308], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[]
                                symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n39] 1, [307,308], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                              mrNarrowTypesInner[out] expr:[n39] 1, [307,308], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n39] 1, [307,308], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: 1
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n39] 1, [307,308], NumericLiteral, type: 1
                            mrNarrowTypes[out] [n39] 1, [307,308], NumericLiteral
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end right mrNarrowTypes for left#0 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, rttrLeft.type:number, rttrRight.type:1, 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, isect:1 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, singular:1, singularCount:1
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, nonSingular:never, nonSingularCount:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] {symbol:{ id:16, ename: d1 }, 
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] declared: {symbol:{ id:16, ename: d1 },type:0}
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] partitionedType: 1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] passType: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   type: 1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   type: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: }
                          mrNarrowTypesByBinaryExpressionEqualsEquals[out] [n23] d1===1, [302,308], BinaryExpression
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n26] d1, [302,304], Identifier, type: number
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n39] 1, [307,308], NumericLiteral, type: 1
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n23] d1===1, [302,308], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n23] d1===1, [302,308], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: failing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                        mrNarrowTypes[dbg]: unmerged[1]: {
                        mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[1]:   type: false
                        mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[1]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[1]:   ]
                        mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[1]:     },
                        mrNarrowTypes[dbg]: unmerged[1]: }
                      mrNarrowTypes[out] byNode: node: [n26] d1, [302,304], Identifier, type: number
                      mrNarrowTypes[out] byNode: node: [n39] 1, [307,308], NumericLiteral, type: 1
                      mrNarrowTypes[out] byNode: node: [n23] d1===1, [302,308], BinaryExpression, type: boolean
                      mrNarrowTypes[out] [n23] d1===1, [302,308], BinaryExpression
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n23] d1===1, [302,308], BinaryExpression, 
                    resolveGroupForFlow[in]: [n24] d1, [311,326], Identifier, groupIndex:9, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:8,[then,]),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n24] d1, [311,326], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n24] d1, [311,326], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n24] d1, [311,326], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n24] d1, [311,326], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 1
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n24] d1, [311,326], Identifier, type: 1
                      mrNarrowTypes[out] [n24] d1, [311,326], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n24] d1, [311,326], Identifier, 
                    resolveGroupForFlow[in]: [n22] d1===999, [377,385], BinaryExpression, groupIndex:10, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:8,[else,]),  size before delete:4
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n22] d1===999, [377,385], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n22] d1===999, [377,385], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypesByBinaryExpressionEqualsEquals[in] [n22] d1===999, [377,385], BinaryExpression
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start left mrNarrowTypes
                            mrNarrowTypes[in] expr:[n27] d1, [377,379], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[]
                                symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n27] d1, [377,379], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: number
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                              mrNarrowTypesInner[out] expr:[n27] d1, [377,379], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n27] d1, [377,379], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: number
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypes[dbg]: unmerged[0]:   type: number
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n27] d1, [377,379], Identifier, type: number
                            mrNarrowTypes[out] [n27] d1, [377,379], Identifier
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end left mrNarrowTypes
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start right mrNarrowTypes for left#0 
                            mrNarrowTypes[in] expr:[n40] 999, [382,385], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[]
                                symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n40] 999, [382,385], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 999
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                              mrNarrowTypesInner[out] expr:[n40] 999, [382,385], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n40] 999, [382,385], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: 999
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   type: 999
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n40] 999, [382,385], NumericLiteral, type: 999
                            mrNarrowTypes[out] [n40] 999, [382,385], NumericLiteral
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end right mrNarrowTypes for left#0 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, rttrLeft.type:number, rttrRight.type:999, 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, isect:999 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, singular:999, singularCount:1
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, nonSingular:never, nonSingularCount:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] {symbol:{ id:16, ename: d1 }, 
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] declared: {symbol:{ id:16, ename: d1 },type:0}
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] partitionedType: 999
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] passType: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   type: 999
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   type: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: }
                          mrNarrowTypesByBinaryExpressionEqualsEquals[out] [n22] d1===999, [377,385], BinaryExpression
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n27] d1, [377,379], Identifier, type: number
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n40] 999, [382,385], NumericLiteral, type: 999
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n22] d1===999, [377,385], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n22] d1===999, [377,385], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: failing:      symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                        mrNarrowTypes[dbg]: unmerged[1]: {
                        mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[1]:   type: false
                        mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[1]:     symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[1]:   ]
                        mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[1]:     },
                        mrNarrowTypes[dbg]: unmerged[1]: }
                      mrNarrowTypes[out] byNode: node: [n27] d1, [377,379], Identifier, type: number
                      mrNarrowTypes[out] byNode: node: [n40] 999, [382,385], NumericLiteral, type: 999
                      mrNarrowTypes[out] byNode: node: [n22] d1===999, [377,385], BinaryExpression, type: boolean
                      mrNarrowTypes[out] [n22] d1===999, [377,385], BinaryExpression
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n27] d1, [377,379], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n40] 999, [382,385], NumericLiteral] -> type:999
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n22] d1===999, [377,385], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n22] d1===999, [377,385], BinaryExpression, 
                    resolveGroupForFlow[in]: [n21] d1, [387,402], Identifier, groupIndex:11, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:10
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n27] d1, [377,379], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n40] 999, [382,385], NumericLiteral] -> type:999
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n22] d1===999, [377,385], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:10,[then,]),  size before delete:4
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n21] d1, [387,402], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n21] d1, [387,402], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 999
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n21] d1, [387,402], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n21] d1, [387,402], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 999
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 999
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n21] d1, [387,402], Identifier, type: 999
                      mrNarrowTypes[out] [n21] d1, [387,402], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:5
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n27] d1, [377,379], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n40] 999, [382,385], NumericLiteral] -> type:999
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n22] d1===999, [377,385], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:11: [node:[n21] d1, [387,402], Identifier] -> type:999
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n21] d1, [387,402], Identifier, 
                  processLoop[dbg] loopGroup.groupIdx:2, did the rest of the loop, loopCount:0, loopState.invocations:0
                    unionArrRefTypesSymtab[in]
                    unionArrRefTypesSymtab[in] symtab[0] [
                    unionArrRefTypesSymtab[in] symtab[0] loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[in] symtab[0]   symbol:{d1,16}, { type:999, assignedType:<undef>, isAssign:false }
                    unionArrRefTypesSymtab[in] symtab[0]   outer:[
                    unionArrRefTypesSymtab[in] symtab[0]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[0]   outer:]
                    unionArrRefTypesSymtab[in] symtab[0] ]
                    unionArrRefTypesSymtab[in] symtab[1] [
                    unionArrRefTypesSymtab[in] symtab[1] loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[in] symtab[1]   symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:[
                    unionArrRefTypesSymtab[in] symtab[1]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:]
                    unionArrRefTypesSymtab[in] symtab[1] ]
                    unionArrRefTypesSymtab[out] return: [
                    unionArrRefTypesSymtab[out] return: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[out] return:   symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    unionArrRefTypesSymtab[out] return:   outer:[
                    unionArrRefTypesSymtab[out] return:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[out] return:   outer:]
                    unionArrRefTypesSymtab[out] return: ]
                    unionArrRefTypesSymtab[in]
                    unionArrRefTypesSymtab[in] symtab[0] [
                    unionArrRefTypesSymtab[in] symtab[0] loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[in] symtab[0]   symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[0]   outer:[
                    unionArrRefTypesSymtab[in] symtab[0]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[0]   outer:]
                    unionArrRefTypesSymtab[in] symtab[0] ]
                    unionArrRefTypesSymtab[in] symtab[1] [
                    unionArrRefTypesSymtab[in] symtab[1] loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[in] symtab[1]   symbol:{d1,16}, { type:number, assignedType:<undef>, isAssign:false }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:[
                    unionArrRefTypesSymtab[in] symtab[1]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:]
                    unionArrRefTypesSymtab[in] symtab[1] ]
                    unionArrRefTypesSymtab[out] return: [
                    unionArrRefTypesSymtab[out] return: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[out] return:   symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                    unionArrRefTypesSymtab[out] return:   outer:[
                    unionArrRefTypesSymtab[out] return:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[out] return:   outer:]
                    unionArrRefTypesSymtab[out] return: ]
                  CurrentBranchesMapC[0].delete(groupIdx:7,<undefined>),  size before delete:5
                  CurrentBranchesMapC[0].delete(groupIdx:11,<undefined>),  size before delete:4
                  CurrentBranchesMapC[0].delete(groupIdx:10,[else,]),  size before delete:3
                    unionArrRefTypesSymtab[in]
                    unionArrRefTypesSymtab[in] symtab[0] [
                    unionArrRefTypesSymtab[in] symtab[0] loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[in] symtab[0]   outer:[
                    unionArrRefTypesSymtab[in] symtab[0]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[0]   outer:]
                    unionArrRefTypesSymtab[in] symtab[0] ]
                    unionArrRefTypesSymtab[in] symtab[1] [
                    unionArrRefTypesSymtab[in] symtab[1] loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[in] symtab[1]   symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:[
                    unionArrRefTypesSymtab[in] symtab[1]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:]
                    unionArrRefTypesSymtab[in] symtab[1] ]
                    unionArrRefTypesSymtab[out] return: [
                    unionArrRefTypesSymtab[out] return: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssignedRange:[]
                    unionArrRefTypesSymtab[out] return:   symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                    unionArrRefTypesSymtab[out] return:   outer:[
                    unionArrRefTypesSymtab[out] return:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[out] return:   outer:]
                    unionArrRefTypesSymtab[out] return: ]
                  processLoop[dbg] loopGroup.groupIdx:2, do the final condition of the loop, loopCount:0, loopState.invocations:0
                  CurrentBranchesMapC[0].delete(groupIdx:2,<undefined>),  size before delete:2
                    resolveGroupForFlow[in]: [n12] true, [182,186], TrueKeyword, groupIndex:2, kind:loop, maximalNode.parent.kind:WhileStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n27] d1, [377,379], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n40] 999, [382,385], NumericLiteral] -> type:999
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:10: [node:[n22] d1===999, [377,385], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:11: [node:[n21] d1, [387,402], Identifier] -> type:999
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n12] true, [182,186], TrueKeyword, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n12] true, [182,186], TrueKeyword, type: true
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n12] true, [182,186], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: never
                        mrNarrowTypes[dbg]: failing:    symtab: <undef>
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                        mrNarrowTypes[dbg]: failing:       kind: never,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:0
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n12] true, [182,186], TrueKeyword, type: true
                      mrNarrowTypes[out] [n12] true, [182,186], TrueKeyword
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n27] d1, [377,379], Identifier] -> type:number
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n40] 999, [382,385], NumericLiteral] -> type:999
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:10: [node:[n22] d1===999, [377,385], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:11: [node:[n21] d1, [387,402], Identifier] -> type:999
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n12] true, [182,186], TrueKeyword, 
                  processLoop[dbg] loopGroup.groupIdx:2, did the final condition of the loop, loopCount:0, loopState.invocations:0
                  processLoop[dbg] loopGroup.groupIdx:2, loop converged, loopCount=0, loopState.invocations:0
                  processLoop[dbg out] loopIdx:2, gIdx:2: groupIdx:2, cbe.kind:2, node:[[n12] true, [182,186], TrueKeyword]
                  processLoop[dbg out] loopIdx:2, gIdx:2:   true:
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         [
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssigned:[]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{d1,16}, { type:number, assignedType:number, isAssign:true }
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:[
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         ]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled:
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: always,
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
                  processLoop[dbg out] loopIdx:2, gIdx:2:   false:
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab: <undef>
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled: <undefined>
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: never,
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
                  processLoop[dbg out] loopIdx:2, gIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                  processLoop[dbg out] loopIdx:2, gIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:11: [node:[n21] d1, [387,402], Identifier] -> type:999
                  processLoop[dbg out] loopIdx:2, gIdx:10: [node:[n27] d1, [377,379], Identifier] -> type:number
                  processLoop[dbg out] loopIdx:2, gIdx:10: [node:[n40] 999, [382,385], NumericLiteral] -> type:999
                  processLoop[dbg out] loopIdx:2, gIdx:10: [node:[n22] d1===999, [377,385], BinaryExpression] -> type:boolean
                  processLoop[dbg out] loopIdx:2, gIdx:9: groupIdx:9, cbe.kind:1, node:[[n24] d1, [311,326], Identifier]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         [
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:0
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         x.loopState.symbolsAssigned:[]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:false }
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           outer:[
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           outer:]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         ]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem: {
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem:  symbolsInvoled:
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem:  kind: always,
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem: },
                  processLoop[dbg out] loopIdx:2, gIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:number
                  processLoop[dbg out] loopIdx:2, gIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:boolean
                  processLoop[dbg out] loopIdx:2, gIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                  processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:number
                  processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                  processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                  processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:number
                  processLoop[out] loopGroup.groupIdx:2, currentLoopDepth:1, maxGroupIdxProcessed:11, loopState.invocations:0
                  updateHeapWithGroupForFlow[in]: group idxs:[2,7,11,10,9,6,8,5,4,3]
                  updateHeapWithGroupForFlow[in]: heap group idxs:[2,3,4,5,6,7,8,9,10,11,]
                  processLoop[in] loopGroup.groupIdx:2, currentLoopDepth:1
                  CurrentBranchesMapC[0].delete(groupIdx:2,<undefined>),  size before delete:2
                  CurrentBranchesMapC[0].delete(groupIdx:9,<undefined>),  size before delete:1
                  processLoop[dbg] loopGroup.groupIdx:2, do the condition of the loop, loopCount:0, loopState.invocations:1
                    resolveGroupForFlow[in]: [n12] true, [182,186], TrueKeyword, groupIndex:2, kind:loop, maximalNode.parent.kind:WhileStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n12] true, [182,186], TrueKeyword, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n12] true, [182,186], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: never
                        mrNarrowTypes[dbg]: failing:    symtab: <undef>
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                        mrNarrowTypes[dbg]: failing:       kind: never,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n12] true, [182,186], TrueKeyword, type: true
                      mrNarrowTypes[out] [n12] true, [182,186], TrueKeyword
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n12] true, [182,186], TrueKeyword, 
                  processLoop[dbg] loopGroup.groupIdx:2, did the condition of the loop, loopCount:0, loopState.invocations:1
                  processLoop[dbg] loopGroup.groupIdx:2, do the rest of the loop, loopCount:0, loopState.invocations:1
                    resolveGroupForFlow[in]: [n20] d1, [188,199], Identifier, groupIndex:3, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:2,[then,]),  size before delete:1
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n20] d1, [188,199], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n20] d1, [188,199], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1 | 0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n20] d1, [188,199], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n20] d1, [188,199], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 1 | 0
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 1 | 0
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n20] d1, [188,199], Identifier, type: 0 | 1
                      mrNarrowTypes[out] [n20] d1, [188,199], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n20] d1, [188,199], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n20] d1, [188,199], Identifier, 
                    resolveGroupForFlow[in]: [n19] d1===0, [213,219], BinaryExpression, groupIndex:4, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n20] d1, [188,199], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:3,<undefined>),  size before delete:2
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n19] d1===0, [213,219], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n19] d1===0, [213,219], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypesByBinaryExpressionEqualsEquals[in] [n19] d1===0, [213,219], BinaryExpression
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start left mrNarrowTypes
                            mrNarrowTypes[in] expr:[n25] d1, [213,215], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                                symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n25] d1, [213,215], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1 | 0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                              mrNarrowTypesInner[out] expr:[n25] d1, [213,215], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n25] d1, [213,215], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: 1 | 0
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypes[dbg]: unmerged[0]:   type: 1 | 0
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n25] d1, [213,215], Identifier, type: 0 | 1
                            mrNarrowTypes[out] [n25] d1, [213,215], Identifier
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end left mrNarrowTypes
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start right mrNarrowTypes for left#0 
                            mrNarrowTypes[in] expr:[n37] 0, [218,219], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                                symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n37] 0, [218,219], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                              mrNarrowTypesInner[out] expr:[n37] 0, [218,219], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n37] 0, [218,219], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: 0
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n37] 0, [218,219], NumericLiteral, type: 0
                            mrNarrowTypes[out] [n37] 0, [218,219], NumericLiteral
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end right mrNarrowTypes for left#0 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, rttrLeft.type:1 | 0, rttrRight.type:0, 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, isect:0 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, singular:0, singularCount:1
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, nonSingular:never, nonSingularCount:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] {symbol:{ id:16, ename: d1 }, 
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] declared: {symbol:{ id:16, ename: d1 },type:0}
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] partitionedType: 0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] passType: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   type: 0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   type: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: }
                          mrNarrowTypesByBinaryExpressionEqualsEquals[out] [n19] d1===0, [213,219], BinaryExpression
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] d1, [213,215], Identifier, type: 0 | 1
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n37] 0, [218,219], NumericLiteral, type: 0
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n19] d1===0, [213,219], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n19] d1===0, [213,219], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: false
                        mrNarrowTypes[dbg]: failing:    symtab: [
                        mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: failing:      symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: failing:      outer:[
                        mrNarrowTypes[dbg]: failing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: failing:      outer:]
                        mrNarrowTypes[dbg]: failing:    ]
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: failing:       kind: always,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                        mrNarrowTypes[dbg]: unmerged[1]: {
                        mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[1]:   type: false
                        mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[1]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[1]:   ]
                        mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[1]:     },
                        mrNarrowTypes[dbg]: unmerged[1]: }
                      mrNarrowTypes[out] byNode: node: [n25] d1, [213,215], Identifier, type: 0 | 1
                      mrNarrowTypes[out] byNode: node: [n37] 0, [218,219], NumericLiteral, type: 0
                      mrNarrowTypes[out] byNode: node: [n19] d1===0, [213,219], BinaryExpression, type: boolean
                      mrNarrowTypes[out] [n19] d1===0, [213,219], BinaryExpression
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n19] d1===0, [213,219], BinaryExpression, 
                    resolveGroupForFlow[in]: [n18] d1, [221,236], Identifier, groupIndex:5, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:4,[then,]),  size before delete:2
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n18] d1, [221,236], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n18] d1, [221,236], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n18] d1, [221,236], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n18] d1, [221,236], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 0
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n18] d1, [221,236], Identifier, type: 0
                      mrNarrowTypes[out] [n18] d1, [221,236], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n18] d1, [221,236], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:5
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n18] d1, [221,236], Identifier, 
                    resolveGroupForFlow[in]: [n16] d1=1, [238,255], BinaryExpression, groupIndex:6, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n18] d1, [221,236], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:5
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:5,<undefined>),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n16] d1=1, [238,255], BinaryExpression, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n16] d1=1, [238,255], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypes[in] expr:[n38] 1, [254,255], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            x.loopState.symbolsAssigned:[]
                            x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                              outer:[
                              outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              outer:]
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n38] 1, [254,255], NumericLiteral, inferStatus:{inCondition:false, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                            mrNarrowTypesInner[out] expr:[n38] 1, [254,255], NumericLiteral, inferStatus:{inCondition:false, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n38] 1, [254,255], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: 1
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:[
                            mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:]
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  undefined
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n38] 1, [254,255], NumericLiteral, type: 1
                          mrNarrowTypes[out] [n38] 1, [254,255], NumericLiteral
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n38] 1, [254,255], NumericLiteral, type: 1
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n16] d1=1, [238,255], BinaryExpression, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n16] d1=1, [238,255], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 1
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n38] 1, [254,255], NumericLiteral, type: 1
                      mrNarrowTypes[out] byNode: node: [n16] d1=1, [238,255], BinaryExpression, type: 1
                      mrNarrowTypes[out] [n16] d1=1, [238,255], BinaryExpression
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n16] d1=1, [238,255], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:6
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n16] d1=1, [238,255], BinaryExpression, 
                    resolveGroupForFlow[in]: [n15] d1, [256,271], Identifier, groupIndex:7, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n16] d1=1, [238,255], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:6
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:6,<undefined>),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n15] d1, [256,271], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n15] d1, [256,271], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n15] d1, [256,271], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n15] d1, [256,271], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 1
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n15] d1, [256,271], Identifier, type: 1
                      mrNarrowTypes[out] [n15] d1, [256,271], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n15] d1, [256,271], Identifier, 
                    resolveGroupForFlow[in]: [n23] d1===1, [302,308], BinaryExpression, groupIndex:8, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:4,[else,]),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n23] d1===1, [302,308], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n23] d1===1, [302,308], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                          mrNarrowTypesByBinaryExpressionEqualsEquals[in] [n23] d1===1, [302,308], BinaryExpression
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start left mrNarrowTypes
                            mrNarrowTypes[in] expr:[n26] d1, [302,304], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                                symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n26] d1, [302,304], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                              mrNarrowTypesInner[out] expr:[n26] d1, [302,304], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n26] d1, [302,304], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: 1
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                              mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n26] d1, [302,304], Identifier, type: 1
                            mrNarrowTypes[out] [n26] d1, [302,304], Identifier
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end left mrNarrowTypes
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start right mrNarrowTypes for left#0 
                            mrNarrowTypes[in] expr:[n39] 1, [307,308], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                            mrNarrowTypes[in] refTypesSymtab:
                              [
                              loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              x.loopState.symbolsAssigned:[]
                              x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                                symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                                outer:[
                                outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                outer:]
                              ]
                            mrNarrowTypes[in] constraintItemIn:
                              {
                               symbolsInvoled:
                               kind: always,
                              },
                              mrNarrowTypesInner[in] expr:[n39] 1, [307,308], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                              mrNarrowTypesInner[in] refTypesSymtab:
                              mrNarrowTypesInner[in] refTypesSymtab:  [
                              mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                              mrNarrowTypesInner[in] refTypesSymtab:  ]
                              mrNarrowTypesInner[in] constraintItemIn:
                              mrNarrowTypesInner[in] constraintItemIn:  {
                              mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                              mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                              mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                              mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                              mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                              mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                              mrNarrowTypesInner[out] expr:[n39] 1, [307,308], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypes[dbg]: qdotfallout.length: 0
                            mrNarrowTypes[dbg]: [n39] 1, [307,308], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                            mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                              mrNarrowTypes[dbg]: passing:  {
                              mrNarrowTypes[dbg]: passing:    kind: return,
                              mrNarrowTypes[dbg]: passing:    type: 1
                              mrNarrowTypes[dbg]: passing:    symtab: [
                              mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:[
                              mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: passing:      outer:]
                              mrNarrowTypes[dbg]: passing:    ]
                              mrNarrowTypes[dbg]: passing:    constraintItem: {
                              mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                              mrNarrowTypes[dbg]: passing:       kind: always,
                              mrNarrowTypes[dbg]: passing:      },
                              mrNarrowTypes[dbg]: passing:  }
                            mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                              mrNarrowTypes[dbg]: failing:  undefined
                              mrNarrowTypes[dbg]: unmerged[0]: {
                              mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                              mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                              mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                              mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                              mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                              mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                              mrNarrowTypes[dbg]: unmerged[0]:   ]
                              mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                              mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                              mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                              mrNarrowTypes[dbg]: unmerged[0]:     },
                              mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[out] byNode: node: [n39] 1, [307,308], NumericLiteral, type: 1
                            mrNarrowTypes[out] [n39] 1, [307,308], NumericLiteral
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end right mrNarrowTypes for left#0 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, rttrLeft.type:1, rttrRight.type:1, 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, isect:1 
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, singular:1, singularCount:1
                          mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, nonSingular:never, nonSingularCount:0
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] {symbol:{ id:16, ename: d1 }, 
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] declared: {symbol:{ id:16, ename: d1 },type:0}
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] partitionedType: 1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] passType: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   type: 1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   kind: return,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   type: true
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   symtab: [
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:[
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   ]
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   constraintItem: {
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      symbolsInvoled:
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      kind: always,
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     },
                            mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: }
                          mrNarrowTypesByBinaryExpressionEqualsEquals[out] [n23] d1===1, [302,308], BinaryExpression
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n26] d1, [302,304], Identifier, type: 1
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n39] 1, [307,308], NumericLiteral, type: 1
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n23] d1===1, [302,308], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n23] d1===1, [302,308], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: never
                        mrNarrowTypes[dbg]: failing:    symtab: <undef>
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                        mrNarrowTypes[dbg]: failing:       kind: never,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n26] d1, [302,304], Identifier, type: 1
                      mrNarrowTypes[out] byNode: node: [n39] 1, [307,308], NumericLiteral, type: 1
                      mrNarrowTypes[out] byNode: node: [n23] d1===1, [302,308], BinaryExpression, type: true
                      mrNarrowTypes[out] [n23] d1===1, [302,308], BinaryExpression
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n23] d1===1, [302,308], BinaryExpression, 
                    resolveGroupForFlow[in]: [n24] d1, [311,326], Identifier, groupIndex:9, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:8,[then,]),  size before delete:3
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n24] d1, [311,326], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                          symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n24] d1, [311,326], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                        mrNarrowTypesInner[out] expr:[n24] d1, [311,326], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n24] d1, [311,326], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: 1
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  undefined
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                        mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n24] d1, [311,326], Identifier, type: 1
                      mrNarrowTypes[out] [n24] d1, [311,326], Identifier
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n24] d1, [311,326], Identifier, 
                    resolveGroupForFlow[in]: [n22] d1===999, [377,385], BinaryExpression, groupIndex:10, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:8
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:8,[else,]),  size before delete:4
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg] constraintItem:  kind: never,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n22] d1===999, [377,385], BinaryExpression, 
                    resolveGroupForFlow[in]: [n21] d1, [387,402], Identifier, groupIndex:11, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:4
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:10
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    CurrentBranchesMapC[0].delete(groupIdx:10,[then,]),  size before delete:4
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg] constraintItem:  kind: never,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:5
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n15] d1, [256,271], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:7
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n21] d1, [387,402], Identifier, 
                  processLoop[dbg] loopGroup.groupIdx:2, did the rest of the loop, loopCount:0, loopState.invocations:1
                  CurrentBranchesMapC[0].delete(groupIdx:7,<undefined>),  size before delete:5
                  CurrentBranchesMapC[0].delete(groupIdx:10,[else,]),  size before delete:4
                    unionArrRefTypesSymtab[in]
                    unionArrRefTypesSymtab[in] symtab[0] [
                    unionArrRefTypesSymtab[in] symtab[0] loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[0] x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    unionArrRefTypesSymtab[in] symtab[0]   outer:[
                    unionArrRefTypesSymtab[in] symtab[0]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[0]   outer:]
                    unionArrRefTypesSymtab[in] symtab[0] ]
                    unionArrRefTypesSymtab[in] symtab[1] [
                    unionArrRefTypesSymtab[in] symtab[1] loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[in] symtab[1] x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    unionArrRefTypesSymtab[in] symtab[1]   symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:[
                    unionArrRefTypesSymtab[in] symtab[1]   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[in] symtab[1]   outer:]
                    unionArrRefTypesSymtab[in] symtab[1] ]
                    unionArrRefTypesSymtab[out] return: [
                    unionArrRefTypesSymtab[out] return: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssigned:[]
                    unionArrRefTypesSymtab[out] return: x.loopState.symbolsAssignedRange:[{symbol:{ id:16, ename: d1 },type:1}, ]
                    unionArrRefTypesSymtab[out] return:   symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                    unionArrRefTypesSymtab[out] return:   outer:[
                    unionArrRefTypesSymtab[out] return:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    unionArrRefTypesSymtab[out] return:   outer:]
                    unionArrRefTypesSymtab[out] return: ]
                  processLoop[dbg] loopGroup.groupIdx:2, do the final condition of the loop, loopCount:0, loopState.invocations:1
                  CurrentBranchesMapC[0].delete(groupIdx:2,<undefined>),  size before delete:3
                    resolveGroupForFlow[in]: [n12] true, [182,186], TrueKeyword, groupIndex:2, kind:loop, maximalNode.parent.kind:WhileStatement, 
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:11
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                    resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                    resolveGroupForFlow[dbg] symtab: [
                    resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:[
                    resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg] symtab:   outer:]
                    resolveGroupForFlow[dbg] symtab: ]
                    resolveGroupForFlow[dbg] constraintItem: {
                    resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg] constraintItem:  kind: always,
                    resolveGroupForFlow[dbg] constraintItem: },
                    resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                      mrNarrowTypes[in] expr:[n12] true, [182,186], TrueKeyword, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                      mrNarrowTypes[in] refTypesSymtab:
                        [
                        loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        x.loopState.symbolsAssigned:[]
                        x.loopState.symbolsAssignedRange:[]
                          symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                          outer:[
                          outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                          outer:]
                        ]
                      mrNarrowTypes[in] constraintItemIn:
                        {
                         symbolsInvoled:
                         kind: always,
                        },
                        mrNarrowTypesInner[in] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                        mrNarrowTypesInner[in] refTypesSymtab:
                        mrNarrowTypesInner[in] refTypesSymtab:  [
                        mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                        mrNarrowTypesInner[in] refTypesSymtab:  ]
                        mrNarrowTypesInner[in] constraintItemIn:
                        mrNarrowTypesInner[in] constraintItemIn:  {
                        mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                        mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                        mrNarrowTypesInner[in] constraintItemIn:  },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                        mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                        mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                        mrNarrowTypesInner[out]:  innerret.byNode: { node: [n12] true, [182,186], TrueKeyword, type: true
                        mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                        mrNarrowTypesInner[out] expr:[n12] true, [182,186], TrueKeyword, inferStatus:{inCondition:true, currentReplayableItem:undefined
                      mrNarrowTypes[dbg]: qdotfallout.length: 0
                      mrNarrowTypes[dbg]: [n12] true, [182,186], TrueKeyword: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                      mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                        mrNarrowTypes[dbg]: passing:  {
                        mrNarrowTypes[dbg]: passing:    kind: return,
                        mrNarrowTypes[dbg]: passing:    type: true
                        mrNarrowTypes[dbg]: passing:    symtab: [
                        mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:[
                        mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: passing:      outer:]
                        mrNarrowTypes[dbg]: passing:    ]
                        mrNarrowTypes[dbg]: passing:    constraintItem: {
                        mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                        mrNarrowTypes[dbg]: passing:       kind: always,
                        mrNarrowTypes[dbg]: passing:      },
                        mrNarrowTypes[dbg]: passing:  }
                      mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                        mrNarrowTypes[dbg]: failing:  {
                        mrNarrowTypes[dbg]: failing:    kind: return,
                        mrNarrowTypes[dbg]: failing:    type: never
                        mrNarrowTypes[dbg]: failing:    symtab: <undef>
                        mrNarrowTypes[dbg]: failing:    constraintItem: {
                        mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                        mrNarrowTypes[dbg]: failing:       kind: never,
                        mrNarrowTypes[dbg]: failing:      },
                        mrNarrowTypes[dbg]: failing:  }
                        mrNarrowTypes[dbg]: unmerged[0]: {
                        mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                        mrNarrowTypes[dbg]: unmerged[0]:   type: true
                        mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                        mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:1
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                        mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                        mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                        mrNarrowTypes[dbg]: unmerged[0]:   ]
                        mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                        mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                        mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                        mrNarrowTypes[dbg]: unmerged[0]:     },
                        mrNarrowTypes[dbg]: unmerged[0]: }
                      mrNarrowTypes[out] byNode: node: [n12] true, [182,186], TrueKeyword, type: true
                      mrNarrowTypes[out] [n12] true, [182,186], TrueKeyword
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:3
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                    resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                    resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                    resolveGroupForFlow[out]: [n12] true, [182,186], TrueKeyword, 
                  processLoop[dbg] loopGroup.groupIdx:2, did the final condition of the loop, loopCount:0, loopState.invocations:1
                  processLoop[dbg] loopGroup.groupIdx:2, loop converged, loopCount=0, loopState.invocations:1
                  processLoop[dbg out] loopIdx:2, gIdx:2: groupIdx:2, cbe.kind:2, node:[[n12] true, [182,186], TrueKeyword]
                  processLoop[dbg out] loopIdx:2, gIdx:2:   true:
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         [
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssigned:[]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         x.loopState.symbolsAssignedRange:[]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:[
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:           outer:]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab:         ]
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled:
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: always,
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
                  processLoop[dbg out] loopIdx:2, gIdx:2:   false:
                  processLoop[dbg out] loopIdx:2, gIdx:2:       symtab: <undef>
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: {
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  symbolsInvoled: <undefined>
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem:  kind: never,
                  processLoop[dbg out] loopIdx:2, gIdx:2:       constraintItem: },
                  processLoop[dbg out] loopIdx:2, gIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                  processLoop[dbg out] loopIdx:2, gIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:11: groupIdx:11, cbe.kind:1, node:[[n21] d1, [387,402], Identifier]
                  processLoop[dbg out] loopIdx:2, gIdx:11:   symtab: <undef>
                  processLoop[dbg out] loopIdx:2, gIdx:11:   constraintItem: {
                  processLoop[dbg out] loopIdx:2, gIdx:11:   constraintItem:  symbolsInvoled: <undefined>
                  processLoop[dbg out] loopIdx:2, gIdx:11:   constraintItem:  kind: never,
                  processLoop[dbg out] loopIdx:2, gIdx:11:   constraintItem: },
                  processLoop[dbg out] loopIdx:2, gIdx:9: groupIdx:9, cbe.kind:1, node:[[n24] d1, [311,326], Identifier]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         [
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:1
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         x.loopState.symbolsAssigned:[]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         x.loopState.symbolsAssignedRange:[]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           outer:[
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:           outer:]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   symtab:         ]
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem: {
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem:  symbolsInvoled:
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem:  kind: always,
                  processLoop[dbg out] loopIdx:2, gIdx:9:   constraintItem: },
                  processLoop[dbg out] loopIdx:2, gIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                  processLoop[dbg out] loopIdx:2, gIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                  processLoop[dbg out] loopIdx:2, gIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                  processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                  processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                  processLoop[dbg out] loopIdx:2, gIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                  processLoop[dbg out] loopIdx:2, gIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                  processLoop[out] loopGroup.groupIdx:2, currentLoopDepth:1, maxGroupIdxProcessed:11, loopState.invocations:1
                getTypeByMrNarrow[out] expr: [n20] d1, [188,199], Identifier -> 0 | 1
              getFlowTypeOfReference[out]: reference [n20] d1, [188,199], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f22], BranchLabel|Label|Referenced, branchKind:preWhileBody, [gftor call depth:0, return: 0 | 1
            In getIdentifier(), getFlowTypeOfReference returned 0 | 1
            checkExpression[out]: [n20] d1, [188,199], Identifier -> 0 | 1
          checkSourceElement[out]: nodeid: 36
          checkSourceElement[in] node: [n41] if (d1===0){
            d1 ;
            d1=1;
            d1  ;
        }
        else if (d1===1) {
            d1   ;
            break;
        }
        else if (d1===999){
            d1    ;
        }, [200,417], IfStatement
            checkExpression[in] node: [n19] d1===0, [213,219], BinaryExpression
              checkExpression[in] node: [n25] d1, [213,215], Identifier
                getFlowTypeOfReference[in]: reference [n25] d1, [213,215], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f20], Referenced|Shared|ExpressionStatement, [n20] d1, [188,199], Identifier[gftor call depth:0
                  getTypeByMrNarrow[in] expr: [n25] d1, [213,215], Identifier
                  getTypeByMrNarrowAux[dbg]: reference: [n25] d1, [213,215], Identifier, maximalNode: [n19] d1===0, [213,219], BinaryExpression
                  getTypeByMrNarrowAux[dbg]: cache hit
                  getTypeByMrNarrow[out] expr: [n25] d1, [213,215], Identifier -> 0 | 1
                getFlowTypeOfReference[out]: reference [n25] d1, [213,215], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f20], Referenced|Shared|ExpressionStatement, [n20] d1, [188,199], Identifier[gftor call depth:0, return: 0 | 1
              In getIdentifier(), getFlowTypeOfReference returned 0 | 1
              checkExpression[out]: [n25] d1, [213,215], Identifier -> 0 | 1
              checkExpression[in] node: [n37] 0, [218,219], NumericLiteral
              checkExpression[out]: [n37] 0, [218,219], NumericLiteral -> 0
            checkExpression[out]: [n19] d1===0, [213,219], BinaryExpression -> boolean
            checkExpression[in] node: [n19] d1===0, [213,219], BinaryExpression
              checkExpression[in] node: [n25] d1, [213,215], Identifier
                getFlowTypeOfReference[in]: reference [n25] d1, [213,215], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f20], Referenced|Shared|ExpressionStatement, [n20] d1, [188,199], Identifier[gftor call depth:0
                  getTypeByMrNarrow[in] expr: [n25] d1, [213,215], Identifier
                  getTypeByMrNarrowAux[dbg]: reference: [n25] d1, [213,215], Identifier, maximalNode: [n19] d1===0, [213,219], BinaryExpression
                  getTypeByMrNarrowAux[dbg]: cache hit
                  getTypeByMrNarrow[out] expr: [n25] d1, [213,215], Identifier -> 0 | 1
                getFlowTypeOfReference[out]: reference [n25] d1, [213,215], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f20], Referenced|Shared|ExpressionStatement, [n20] d1, [188,199], Identifier[gftor call depth:0, return: 0 | 1
              In getIdentifier(), getFlowTypeOfReference returned 0 | 1
              checkExpression[out]: [n25] d1, [213,215], Identifier -> 0 | 1
              checkExpression[in] node: [n37] 0, [218,219], NumericLiteral
              checkExpression[out]: [n37] 0, [218,219], NumericLiteral -> 0
            checkExpression[out]: [n19] d1===0, [213,219], BinaryExpression -> boolean
            checkSourceElement[in] node: [n42] {
            d1 ;
            d1=1;
            d1  ;
        }, [220,284], Block
              checkSourceElement[in] node: [n43] d1 ;, [221,238], ExpressionStatement
                checkExpression[in] node: [n18] d1, [221,236], Identifier
                  getFlowTypeOfReference[in]: reference [n18] d1, [221,236], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f18], BranchLabel|Label|Referenced, branchKind:then, [gftor call depth:0
                    getTypeByMrNarrow[in] expr: [n18] d1, [221,236], Identifier
                    getTypeByMrNarrowAux[dbg]: reference: [n18] d1, [221,236], Identifier, maximalNode: [n18] d1, [221,236], Identifier
                    getTypeByMrNarrowAux[dbg]: cache hit
                    getTypeByMrNarrow[out] expr: [n18] d1, [221,236], Identifier -> 0
                  getFlowTypeOfReference[out]: reference [n18] d1, [221,236], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f18], BranchLabel|Label|Referenced, branchKind:then, [gftor call depth:0, return: 0
                In getIdentifier(), getFlowTypeOfReference returned 0
                checkExpression[out]: [n18] d1, [221,236], Identifier -> 0
              checkSourceElement[out]: nodeid: 43
              checkSourceElement[in] node: [n44] d1=1;, [238,256], ExpressionStatement
                checkExpression[in] node: [n16] d1=1, [238,255], BinaryExpression
                  checkExpression[in] node: [n17] d1, [238,253], Identifier
                  checkExpression[out]: [n17] d1, [238,253], Identifier -> number
                  checkExpression[in] node: [n38] 1, [254,255], NumericLiteral
                  checkExpression[out]: [n38] 1, [254,255], NumericLiteral -> 1
                checkExpression[out]: [n16] d1=1, [238,255], BinaryExpression -> 1
              checkSourceElement[out]: nodeid: 44
              checkSourceElement[in] node: [n45] d1  ;, [256,274], ExpressionStatement
                checkExpression[in] node: [n15] d1, [256,271], Identifier
                  getFlowTypeOfReference[in]: reference [n15] d1, [256,271], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f14], Referenced|ExpressionStatement, [n16] d1=1, [238,255], BinaryExpression[gftor call depth:0
                    getTypeByMrNarrow[in] expr: [n15] d1, [256,271], Identifier
                    getTypeByMrNarrowAux[dbg]: reference: [n15] d1, [256,271], Identifier, maximalNode: [n15] d1, [256,271], Identifier
                    getTypeByMrNarrowAux[dbg]: cache hit
                    getTypeByMrNarrow[out] expr: [n15] d1, [256,271], Identifier -> 1
                  getFlowTypeOfReference[out]: reference [n15] d1, [256,271], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f14], Referenced|ExpressionStatement, [n16] d1=1, [238,255], BinaryExpression[gftor call depth:0, return: 1
                In getIdentifier(), getFlowTypeOfReference returned 1
                checkExpression[out]: [n15] d1, [256,271], Identifier -> 1
              checkSourceElement[out]: nodeid: 45
            checkSourceElement[out]: nodeid: 42
            checkSourceElement[in] node: [n46] if (d1===1) {
            d1   ;
            break;
        }
        else if (d1===999){
            d1    ;
        }, [297,417], IfStatement
              checkExpression[in] node: [n23] d1===1, [302,308], BinaryExpression
                checkExpression[in] node: [n26] d1, [302,304], Identifier
                  getFlowTypeOfReference[in]: reference [n26] d1, [302,304], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f33], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0
                    getTypeByMrNarrow[in] expr: [n26] d1, [302,304], Identifier
                    getTypeByMrNarrowAux[dbg]: reference: [n26] d1, [302,304], Identifier, maximalNode: [n23] d1===1, [302,308], BinaryExpression
                    getTypeByMrNarrowAux[dbg]: cache hit
                    getTypeByMrNarrow[out] expr: [n26] d1, [302,304], Identifier -> 1
                  getFlowTypeOfReference[out]: reference [n26] d1, [302,304], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f33], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0, return: 1
                In getIdentifier(), getFlowTypeOfReference returned 1
                checkExpression[out]: [n26] d1, [302,304], Identifier -> 1
                checkExpression[in] node: [n39] 1, [307,308], NumericLiteral
                checkExpression[out]: [n39] 1, [307,308], NumericLiteral -> 1
              checkExpression[out]: [n23] d1===1, [302,308], BinaryExpression -> boolean
              checkExpression[in] node: [n23] d1===1, [302,308], BinaryExpression
                checkExpression[in] node: [n26] d1, [302,304], Identifier
                  getFlowTypeOfReference[in]: reference [n26] d1, [302,304], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f33], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0
                    getTypeByMrNarrow[in] expr: [n26] d1, [302,304], Identifier
                    getTypeByMrNarrowAux[dbg]: reference: [n26] d1, [302,304], Identifier, maximalNode: [n23] d1===1, [302,308], BinaryExpression
                    getTypeByMrNarrowAux[dbg]: cache hit
                    getTypeByMrNarrow[out] expr: [n26] d1, [302,304], Identifier -> 1
                  getFlowTypeOfReference[out]: reference [n26] d1, [302,304], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f33], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0, return: 1
                In getIdentifier(), getFlowTypeOfReference returned 1
                checkExpression[out]: [n26] d1, [302,304], Identifier -> 1
                checkExpression[in] node: [n39] 1, [307,308], NumericLiteral
                checkExpression[out]: [n39] 1, [307,308], NumericLiteral -> 1
              checkExpression[out]: [n23] d1===1, [302,308], BinaryExpression -> boolean
              checkSourceElement[in] node: [n47] {
            d1   ;
            break;
        }, [309,359], Block
                checkSourceElement[in] node: [n48] d1   ;, [311,330], ExpressionStatement
                  checkExpression[in] node: [n24] d1, [311,326], Identifier
                    getFlowTypeOfReference[in]: reference [n24] d1, [311,326], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f39], BranchLabel|Label|Referenced, branchKind:then, [gftor call depth:0
                      getTypeByMrNarrow[in] expr: [n24] d1, [311,326], Identifier
                      getTypeByMrNarrowAux[dbg]: reference: [n24] d1, [311,326], Identifier, maximalNode: [n24] d1, [311,326], Identifier
                      getTypeByMrNarrowAux[dbg]: cache hit
                      getTypeByMrNarrow[out] expr: [n24] d1, [311,326], Identifier -> 1
                    getFlowTypeOfReference[out]: reference [n24] d1, [311,326], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f39], BranchLabel|Label|Referenced, branchKind:then, [gftor call depth:0, return: 1
                  In getIdentifier(), getFlowTypeOfReference returned 1
                  checkExpression[out]: [n24] d1, [311,326], Identifier -> 1
                checkSourceElement[out]: nodeid: 48
                checkSourceElement[in] node: [n49] break;, [330,349], BreakStatement
                checkSourceElement[out]: nodeid: 49
              checkSourceElement[out]: nodeid: 47
              checkSourceElement[in] node: [n50] if (d1===999){
            d1    ;
        }, [372,417], IfStatement
                checkExpression[in] node: [n22] d1===999, [377,385], BinaryExpression
                  checkExpression[in] node: [n27] d1, [377,379], Identifier
                    getFlowTypeOfReference[in]: reference [n27] d1, [377,379], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f31], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0
                      getTypeByMrNarrow[in] expr: [n27] d1, [377,379], Identifier
                      getTypeByMrNarrowAux[dbg]: reference: [n27] d1, [377,379], Identifier, maximalNode: [n22] d1===999, [377,385], BinaryExpression
                        updateHeapWithGroupForFlow[in]: group: {groupIdx: 10, maximalNode: [n22] d1===999, [377,385], BinaryExpression}. minGroupIdxToAdd: undefined
                          updateHeapWithGroupForFlow[dbg] heap[1=>3] [n20] d1, [188,199], Identifier
                          updateHeapWithGroupForFlow[dbg] heap[2=>4] [n19] d1===0, [213,219], BinaryExpression
                          updateHeapWithGroupForFlow[dbg] heap[3=>8] [n23] d1===1, [302,308], BinaryExpression
                          updateHeapWithGroupForFlow[dbg] heap[4=>10] [n22] d1===999, [377,385], BinaryExpression
                        updateHeapWithGroupForFlow[out]: group: {maximalNode: [n22] d1===999, [377,385], BinaryExpression}
                        resolveGroupForFlow[in]: [n20] d1, [188,199], Identifier, groupIndex:3, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:3
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                        CurrentBranchesMapC[0].delete(groupIdx:2,[then,]),  size before delete:3
                        resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                        resolveGroupForFlow[dbg] symtab: [
                        resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg] symtab:   outer:[
                        resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg] symtab:   outer:]
                        resolveGroupForFlow[dbg] symtab: ]
                        resolveGroupForFlow[dbg] constraintItem: {
                        resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg] constraintItem:  kind: always,
                        resolveGroupForFlow[dbg] constraintItem: },
                        resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                          mrNarrowTypes[in] expr:[n20] d1, [188,199], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            x.loopState.symbolsAssigned:[]
                            x.loopState.symbolsAssignedRange:[]
                              symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                              outer:[
                              outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              outer:]
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n20] d1, [188,199], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                            mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1 | 0
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n20] d1, [188,199], Identifier, type: 0 | 1
                            mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                            mrNarrowTypesInner[out] expr:[n20] d1, [188,199], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n20] d1, [188,199], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: 1 | 0
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:[
                            mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:]
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  undefined
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                            mrNarrowTypes[dbg]: unmerged[0]:   type: 1 | 0
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n20] d1, [188,199], Identifier, type: 0 | 1
                          mrNarrowTypes[out] [n20] d1, [188,199], Identifier
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n20] d1, [188,199], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:3
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                        resolveGroupForFlow[out]: [n20] d1, [188,199], Identifier, 
                        resolveGroupForFlow[in]: [n19] d1===0, [213,219], BinaryExpression, groupIndex:4, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n20] d1, [188,199], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:3
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                        CurrentBranchesMapC[0].delete(groupIdx:3,<undefined>),  size before delete:4
                        resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                        resolveGroupForFlow[dbg] symtab: [
                        resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg] symtab:   outer:[
                        resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg] symtab:   outer:]
                        resolveGroupForFlow[dbg] symtab: ]
                        resolveGroupForFlow[dbg] constraintItem: {
                        resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg] constraintItem:  kind: always,
                        resolveGroupForFlow[dbg] constraintItem: },
                        resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                          mrNarrowTypes[in] expr:[n19] d1===0, [213,219], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            x.loopState.symbolsAssigned:[]
                            x.loopState.symbolsAssignedRange:[]
                              symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                              outer:[
                              outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              outer:]
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n19] d1===0, [213,219], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesByBinaryExpressionEqualsEquals[in] [n19] d1===0, [213,219], BinaryExpression
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start left mrNarrowTypes
                                mrNarrowTypes[in] expr:[n25] d1, [213,215], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                                mrNarrowTypes[in] refTypesSymtab:
                                  [
                                  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  x.loopState.symbolsAssigned:[]
                                  x.loopState.symbolsAssignedRange:[]
                                    symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                    outer:[
                                    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                    outer:]
                                  ]
                                mrNarrowTypes[in] constraintItemIn:
                                  {
                                   symbolsInvoled:
                                   kind: always,
                                  },
                                  mrNarrowTypesInner[in] expr:[n25] d1, [213,215], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                  mrNarrowTypesInner[in] refTypesSymtab:
                                  mrNarrowTypesInner[in] refTypesSymtab:  [
                                  mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                                  mrNarrowTypesInner[in] constraintItemIn:
                                  mrNarrowTypesInner[in] constraintItemIn:  {
                                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                  mrNarrowTypesInner[in] constraintItemIn:  },
                                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1 | 0
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] d1, [213,215], Identifier, type: 0 | 1
                                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                                  mrNarrowTypesInner[out] expr:[n25] d1, [213,215], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypes[dbg]: qdotfallout.length: 0
                                mrNarrowTypes[dbg]: [n25] d1, [213,215], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                  mrNarrowTypes[dbg]: passing:  {
                                  mrNarrowTypes[dbg]: passing:    kind: return,
                                  mrNarrowTypes[dbg]: passing:    type: 1 | 0
                                  mrNarrowTypes[dbg]: passing:    symtab: [
                                  mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:[
                                  mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:]
                                  mrNarrowTypes[dbg]: passing:    ]
                                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                  mrNarrowTypes[dbg]: passing:       kind: always,
                                  mrNarrowTypes[dbg]: passing:      },
                                  mrNarrowTypes[dbg]: passing:  }
                                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                  mrNarrowTypes[dbg]: failing:  undefined
                                  mrNarrowTypes[dbg]: unmerged[0]: {
                                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                                  mrNarrowTypes[dbg]: unmerged[0]:   type: 1 | 0
                                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                  mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                  mrNarrowTypes[dbg]: unmerged[0]:     },
                                  mrNarrowTypes[dbg]: unmerged[0]: }
                                mrNarrowTypes[out] byNode: node: [n25] d1, [213,215], Identifier, type: 0 | 1
                                mrNarrowTypes[out] [n25] d1, [213,215], Identifier
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end left mrNarrowTypes
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start right mrNarrowTypes for left#0 
                                mrNarrowTypes[in] expr:[n37] 0, [218,219], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                                mrNarrowTypes[in] refTypesSymtab:
                                  [
                                  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  x.loopState.symbolsAssigned:[]
                                  x.loopState.symbolsAssignedRange:[]
                                    symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                    outer:[
                                    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                    outer:]
                                  ]
                                mrNarrowTypes[in] constraintItemIn:
                                  {
                                   symbolsInvoled:
                                   kind: always,
                                  },
                                  mrNarrowTypesInner[in] expr:[n37] 0, [218,219], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                  mrNarrowTypesInner[in] refTypesSymtab:
                                  mrNarrowTypesInner[in] refTypesSymtab:  [
                                  mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                                  mrNarrowTypesInner[in] constraintItemIn:
                                  mrNarrowTypesInner[in] constraintItemIn:  {
                                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                  mrNarrowTypesInner[in] constraintItemIn:  },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 0
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n37] 0, [218,219], NumericLiteral, type: 0
                                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                  mrNarrowTypesInner[out] expr:[n37] 0, [218,219], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypes[dbg]: qdotfallout.length: 0
                                mrNarrowTypes[dbg]: [n37] 0, [218,219], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                  mrNarrowTypes[dbg]: passing:  {
                                  mrNarrowTypes[dbg]: passing:    kind: return,
                                  mrNarrowTypes[dbg]: passing:    type: 0
                                  mrNarrowTypes[dbg]: passing:    symtab: [
                                  mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:[
                                  mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:]
                                  mrNarrowTypes[dbg]: passing:    ]
                                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                  mrNarrowTypes[dbg]: passing:       kind: always,
                                  mrNarrowTypes[dbg]: passing:      },
                                  mrNarrowTypes[dbg]: passing:  }
                                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                  mrNarrowTypes[dbg]: failing:  undefined
                                  mrNarrowTypes[dbg]: unmerged[0]: {
                                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                  mrNarrowTypes[dbg]: unmerged[0]:   type: 0
                                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                  mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                  mrNarrowTypes[dbg]: unmerged[0]:     },
                                  mrNarrowTypes[dbg]: unmerged[0]: }
                                mrNarrowTypes[out] byNode: node: [n37] 0, [218,219], NumericLiteral, type: 0
                                mrNarrowTypes[out] [n37] 0, [218,219], NumericLiteral
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end right mrNarrowTypes for left#0 
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, rttrLeft.type:1 | 0, rttrRight.type:0, 
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, isect:0 
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, singular:0, singularCount:1
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, nonSingular:never, nonSingularCount:0
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] {symbol:{ id:16, ename: d1 }, 
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] declared: {symbol:{ id:16, ename: d1 },type:0}
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] partitionedType: 0
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] passType: true
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   kind: return,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   type: 0
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   symtab: [
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:[
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   ]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   constraintItem: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      symbolsInvoled:
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      kind: always,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     },
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   kind: return,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   type: true
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   symtab: [
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:[
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   ]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   constraintItem: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      symbolsInvoled:
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      kind: always,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     },
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: }
                              mrNarrowTypesByBinaryExpressionEqualsEquals[out] [n19] d1===0, [213,219], BinaryExpression
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]:  innerret.arttr[1]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   type: false
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[1]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[1]: }
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n25] d1, [213,215], Identifier, type: 0 | 1
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n37] 0, [218,219], NumericLiteral, type: 0
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n19] d1===0, [213,219], BinaryExpression, type: boolean
                            mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                            mrNarrowTypesInner[out] expr:[n19] d1===0, [213,219], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n19] d1===0, [213,219], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: true
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:[
                            mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:]
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  {
                            mrNarrowTypes[dbg]: failing:    kind: return,
                            mrNarrowTypes[dbg]: failing:    type: false
                            mrNarrowTypes[dbg]: failing:    symtab: [
                            mrNarrowTypes[dbg]: failing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: failing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: failing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                            mrNarrowTypes[dbg]: failing:      outer:[
                            mrNarrowTypes[dbg]: failing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: failing:      outer:]
                            mrNarrowTypes[dbg]: failing:    ]
                            mrNarrowTypes[dbg]: failing:    constraintItem: {
                            mrNarrowTypes[dbg]: failing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: failing:       kind: always,
                            mrNarrowTypes[dbg]: failing:      },
                            mrNarrowTypes[dbg]: failing:  }
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   type: true
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                            mrNarrowTypes[dbg]: unmerged[1]: {
                            mrNarrowTypes[dbg]: unmerged[1]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[1]:   type: false
                            mrNarrowTypes[dbg]: unmerged[1]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[1]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: unmerged[1]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: unmerged[1]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[1]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[1]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[1]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[1]:   ]
                            mrNarrowTypes[dbg]: unmerged[1]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[1]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[1]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[1]:     },
                            mrNarrowTypes[dbg]: unmerged[1]: }
                          mrNarrowTypes[out] byNode: node: [n25] d1, [213,215], Identifier, type: 0 | 1
                          mrNarrowTypes[out] byNode: node: [n37] 0, [218,219], NumericLiteral, type: 0
                          mrNarrowTypes[out] byNode: node: [n19] d1===0, [213,219], BinaryExpression, type: boolean
                          mrNarrowTypes[out] [n19] d1===0, [213,219], BinaryExpression
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                        resolveGroupForFlow[out]: [n19] d1===0, [213,219], BinaryExpression, 
                        resolveGroupForFlow[in]: [n23] d1===1, [302,308], BinaryExpression, groupIndex:8, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                        CurrentBranchesMapC[0].delete(groupIdx:4,[else,]),  size before delete:4
                        resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                        resolveGroupForFlow[dbg] symtab: [
                        resolveGroupForFlow[dbg] symtab: loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg] symtab: x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg] symtab:   outer:[
                        resolveGroupForFlow[dbg] symtab:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg] symtab:   outer:]
                        resolveGroupForFlow[dbg] symtab: ]
                        resolveGroupForFlow[dbg] constraintItem: {
                        resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg] constraintItem:  kind: always,
                        resolveGroupForFlow[dbg] constraintItem: },
                        resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                          mrNarrowTypes[in] expr:[n23] d1===1, [302,308], BinaryExpression, crit:{kind:truthy,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                          mrNarrowTypes[in] refTypesSymtab:
                            [
                            loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            x.loopState.symbolsAssigned:[]
                            x.loopState.symbolsAssignedRange:[]
                              symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                              outer:[
                              outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                              outer:]
                            ]
                          mrNarrowTypes[in] constraintItemIn:
                            {
                             symbolsInvoled:
                             kind: always,
                            },
                            mrNarrowTypesInner[in] expr:[n23] d1===1, [302,308], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                            mrNarrowTypesInner[in] refTypesSymtab:
                            mrNarrowTypesInner[in] refTypesSymtab:  [
                            mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                            mrNarrowTypesInner[in] refTypesSymtab:  ]
                            mrNarrowTypesInner[in] constraintItemIn:
                            mrNarrowTypesInner[in] constraintItemIn:  {
                            mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                            mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                            mrNarrowTypesInner[in] constraintItemIn:  },
                              mrNarrowTypesByBinaryExpressionEqualsEquals[in] [n23] d1===1, [302,308], BinaryExpression
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start left mrNarrowTypes
                                mrNarrowTypes[in] expr:[n26] d1, [302,304], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                                mrNarrowTypes[in] refTypesSymtab:
                                  [
                                  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  x.loopState.symbolsAssigned:[]
                                  x.loopState.symbolsAssignedRange:[]
                                    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                    outer:[
                                    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                    outer:]
                                  ]
                                mrNarrowTypes[in] constraintItemIn:
                                  {
                                   symbolsInvoled:
                                   kind: always,
                                  },
                                  mrNarrowTypesInner[in] expr:[n26] d1, [302,304], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                  mrNarrowTypesInner[in] refTypesSymtab:
                                  mrNarrowTypesInner[in] refTypesSymtab:  [
                                  mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                                  mrNarrowTypesInner[in] constraintItemIn:
                                  mrNarrowTypesInner[in] constraintItemIn:  {
                                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                  mrNarrowTypesInner[in] constraintItemIn:  },
                                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n26] d1, [302,304], Identifier, type: 1
                                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                                  mrNarrowTypesInner[out] expr:[n26] d1, [302,304], Identifier, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypes[dbg]: qdotfallout.length: 0
                                mrNarrowTypes[dbg]: [n26] d1, [302,304], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                  mrNarrowTypes[dbg]: passing:  {
                                  mrNarrowTypes[dbg]: passing:    kind: return,
                                  mrNarrowTypes[dbg]: passing:    type: 1
                                  mrNarrowTypes[dbg]: passing:    symtab: [
                                  mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:[
                                  mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:]
                                  mrNarrowTypes[dbg]: passing:    ]
                                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                  mrNarrowTypes[dbg]: passing:       kind: always,
                                  mrNarrowTypes[dbg]: passing:      },
                                  mrNarrowTypes[dbg]: passing:  }
                                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                  mrNarrowTypes[dbg]: failing:  undefined
                                  mrNarrowTypes[dbg]: unmerged[0]: {
                                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                                  mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                  mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                  mrNarrowTypes[dbg]: unmerged[0]:     },
                                  mrNarrowTypes[dbg]: unmerged[0]: }
                                mrNarrowTypes[out] byNode: node: [n26] d1, [302,304], Identifier, type: 1
                                mrNarrowTypes[out] [n26] d1, [302,304], Identifier
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end left mrNarrowTypes
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] start right mrNarrowTypes for left#0 
                                mrNarrowTypes[in] expr:[n39] 1, [307,308], NumericLiteral, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:true, currentReplayable:undefined}, qdotfalloutIn: <undef>
                                mrNarrowTypes[in] refTypesSymtab:
                                  [
                                  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  x.loopState.symbolsAssigned:[]
                                  x.loopState.symbolsAssignedRange:[]
                                    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                    outer:[
                                    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                    outer:]
                                  ]
                                mrNarrowTypes[in] constraintItemIn:
                                  {
                                   symbolsInvoled:
                                   kind: always,
                                  },
                                  mrNarrowTypesInner[in] expr:[n39] 1, [307,308], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                  mrNarrowTypesInner[in] refTypesSymtab:
                                  mrNarrowTypesInner[in] refTypesSymtab:  [
                                  mrNarrowTypesInner[in] refTypesSymtab:  loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:  x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:[
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[in] refTypesSymtab:    outer:]
                                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                                  mrNarrowTypesInner[in] constraintItemIn:
                                  mrNarrowTypesInner[in] constraintItemIn:  {
                                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                                  mrNarrowTypesInner[in] constraintItemIn:  },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                                  mrNarrowTypesInner[out]:  innerret.byNode: { node: [n39] 1, [307,308], NumericLiteral, type: 1
                                  mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                                  mrNarrowTypesInner[out] expr:[n39] 1, [307,308], NumericLiteral, inferStatus:{inCondition:true, currentReplayableItem:undefined
                                mrNarrowTypes[dbg]: qdotfallout.length: 0
                                mrNarrowTypes[dbg]: [n39] 1, [307,308], NumericLiteral: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                                  mrNarrowTypes[dbg]: passing:  {
                                  mrNarrowTypes[dbg]: passing:    kind: return,
                                  mrNarrowTypes[dbg]: passing:    type: 1
                                  mrNarrowTypes[dbg]: passing:    symtab: [
                                  mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:[
                                  mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: passing:      outer:]
                                  mrNarrowTypes[dbg]: passing:    ]
                                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                                  mrNarrowTypes[dbg]: passing:       kind: always,
                                  mrNarrowTypes[dbg]: passing:      },
                                  mrNarrowTypes[dbg]: passing:  }
                                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                                  mrNarrowTypes[dbg]: failing:  undefined
                                  mrNarrowTypes[dbg]: unmerged[0]: {
                                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                                  mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                                  mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                  mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                                  mrNarrowTypes[dbg]: unmerged[0]:     },
                                  mrNarrowTypes[dbg]: unmerged[0]: }
                                mrNarrowTypes[out] byNode: node: [n39] 1, [307,308], NumericLiteral, type: 1
                                mrNarrowTypes[out] [n39] 1, [307,308], NumericLiteral
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] end right mrNarrowTypes for left#0 
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, rttrLeft.type:1, rttrRight.type:1, 
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, isect:1 
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, singular:1, singularCount:1
                              mrNarrowTypesByBinaryExpressionEqualsEquals[dbg] left#0, right#0, nonSingular:never, nonSingularCount:0
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] {symbol:{ id:16, ename: d1 }, 
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] asym[0] declared: {symbol:{ id:16, ename: d1 },type:0}
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] partitionedType: 1
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] passType: true
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   kind: return,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   type: 1
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   symtab: [
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:[
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     outer:]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   ]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:   constraintItem: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      symbolsInvoled:
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:      kind: always,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight:     },
                                mrNarrowTypesByBinaryExpressionEqualsHelper [in] rttrRight: }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   kind: return,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   type: true
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   symtab: [
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssigned:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   x.loopState.symbolsAssignedRange:[]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:[
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     outer:]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   ]
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:   constraintItem: {
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      symbolsInvoled:
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:      kind: always,
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr:     },
                                mrNarrowTypesByBinaryExpressionEqualsHelper [out] rttr: }
                              mrNarrowTypesByBinaryExpressionEqualsEquals[out] [n23] d1===1, [302,308], BinaryExpression
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: true
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:[
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     outer:]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                            mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                            mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n26] d1, [302,304], Identifier, type: 1
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n39] 1, [307,308], NumericLiteral, type: 1
                            mrNarrowTypesInner[out]:  innerret.byNode: { node: [n23] d1===1, [302,308], BinaryExpression, type: true
                            mrNarrowTypesInner[out]: innerret.assignmentData: <undef>
                            mrNarrowTypesInner[out] expr:[n23] d1===1, [302,308], BinaryExpression, inferStatus:{inCondition:true, currentReplayableItem:undefined
                          mrNarrowTypes[dbg]: qdotfallout.length: 0
                          mrNarrowTypes[dbg]: [n23] d1===1, [302,308], BinaryExpression: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:truthy,negate:undefined}
                          mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                            mrNarrowTypes[dbg]: passing:  {
                            mrNarrowTypes[dbg]: passing:    kind: return,
                            mrNarrowTypes[dbg]: passing:    type: true
                            mrNarrowTypes[dbg]: passing:    symtab: [
                            mrNarrowTypes[dbg]: passing:    loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: passing:    x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:[
                            mrNarrowTypes[dbg]: passing:      outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: passing:      outer:]
                            mrNarrowTypes[dbg]: passing:    ]
                            mrNarrowTypes[dbg]: passing:    constraintItem: {
                            mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                            mrNarrowTypes[dbg]: passing:       kind: always,
                            mrNarrowTypes[dbg]: passing:      },
                            mrNarrowTypes[dbg]: passing:  }
                          mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                            mrNarrowTypes[dbg]: failing:  {
                            mrNarrowTypes[dbg]: failing:    kind: return,
                            mrNarrowTypes[dbg]: failing:    type: never
                            mrNarrowTypes[dbg]: failing:    symtab: <undef>
                            mrNarrowTypes[dbg]: failing:    constraintItem: {
                            mrNarrowTypes[dbg]: failing:       symbolsInvoled: <undefined>
                            mrNarrowTypes[dbg]: failing:       kind: never,
                            mrNarrowTypes[dbg]: failing:      },
                            mrNarrowTypes[dbg]: failing:  }
                            mrNarrowTypes[dbg]: unmerged[0]: {
                            mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                            mrNarrowTypes[dbg]: unmerged[0]:   type: true
                            mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                            mrNarrowTypes[dbg]: unmerged[0]:   loopGroup?.groupIdx:2, x.loopState?.invocations:2
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssigned:[]
                            mrNarrowTypes[dbg]: unmerged[0]:   x.loopState.symbolsAssignedRange:[]
                            mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:[
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                            mrNarrowTypes[dbg]: unmerged[0]:     outer:]
                            mrNarrowTypes[dbg]: unmerged[0]:   ]
                            mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                            mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                            mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                            mrNarrowTypes[dbg]: unmerged[0]:     },
                            mrNarrowTypes[dbg]: unmerged[0]: }
                          mrNarrowTypes[out] byNode: node: [n26] d1, [302,304], Identifier, type: 1
                          mrNarrowTypes[out] byNode: node: [n39] 1, [307,308], NumericLiteral, type: 1
                          mrNarrowTypes[out] byNode: node: [n23] d1===1, [302,308], BinaryExpression, type: true
                          mrNarrowTypes[out] [n23] d1===1, [302,308], BinaryExpression
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:5
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                        resolveGroupForFlow[out]: [n23] d1===1, [302,308], BinaryExpression, 
                        resolveGroupForFlow[in]: [n22] d1===999, [377,385], BinaryExpression, groupIndex:10, kind:ifexpr, maximalNode.parent.kind:IfStatement, 
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:5
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:8
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                        CurrentBranchesMapC[0].delete(groupIdx:8,[else,]),  size before delete:5
                        resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
                        resolveGroupForFlow[dbg] constraintItem: {
                        resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg] constraintItem:  kind: never,
                        resolveGroupForFlow[dbg] constraintItem: },
                        resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:6
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:9
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
                        resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
                        resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
                        resolveGroupForFlow[out]: [n22] d1===999, [377,385], BinaryExpression, 
                      getTypeByMrNarrow[out] expr: [n27] d1, [377,379], Identifier -> never
                    getFlowTypeOfReference[out]: reference [n27] d1, [377,379], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f31], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0, return: never
                  In getIdentifier(), getFlowTypeOfReference returned never
                  checkExpression[out]: [n27] d1, [377,379], Identifier -> never
                  checkExpression[in] node: [n40] 999, [382,385], NumericLiteral
                  checkExpression[out]: [n40] 999, [382,385], NumericLiteral -> 999
                checkExpression[out]: [n22] d1===999, [377,385], BinaryExpression -> boolean
                checkExpression[in] node: [n22] d1===999, [377,385], BinaryExpression
                  checkExpression[in] node: [n27] d1, [377,379], Identifier
                    getFlowTypeOfReference[in]: reference [n27] d1, [377,379], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f31], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0
                      getTypeByMrNarrow[in] expr: [n27] d1, [377,379], Identifier
                      getTypeByMrNarrowAux[dbg]: reference: [n27] d1, [377,379], Identifier, maximalNode: [n22] d1===999, [377,385], BinaryExpression
                        updateHeapWithGroupForFlow[in]: group: {groupIdx: 10, maximalNode: [n22] d1===999, [377,385], BinaryExpression}. minGroupIdxToAdd: undefined
                        updateHeapWithGroupForFlow[out]: group: {maximalNode: [n22] d1===999, [377,385], BinaryExpression}
                      getTypeByMrNarrow[out] expr: [n27] d1, [377,379], Identifier -> never
                    getFlowTypeOfReference[out]: reference [n27] d1, [377,379], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f31], BranchLabel|Label|Referenced|Shared, branchKind:else, [gftor call depth:0, return: never
                  In getIdentifier(), getFlowTypeOfReference returned never
                  checkExpression[out]: [n27] d1, [377,379], Identifier -> never
                  checkExpression[in] node: [n40] 999, [382,385], NumericLiteral
                  checkExpression[out]: [n40] 999, [382,385], NumericLiteral -> 999
                checkExpression[out]: [n22] d1===999, [377,385], BinaryExpression -> boolean
                checkSourceElement[in] node: [n51] {
            d1    ;
        }, [386,417], Block
                  checkSourceElement[in] node: [n52] d1    ;, [387,407], ExpressionStatement
                    checkExpression[in] node: [n21] d1, [387,402], Identifier
                      getFlowTypeOfReference[in]: reference [n21] d1, [387,402], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f29], BranchLabel|Label|Referenced, branchKind:then, [gftor call depth:0
                        getTypeByMrNarrow[in] expr: [n21] d1, [387,402], Identifier
                        getTypeByMrNarrowAux[dbg]: reference: [n21] d1, [387,402], Identifier, maximalNode: [n21] d1, [387,402], Identifier
                          updateHeapWithGroupForFlow[in]: group: {groupIdx: 11, maximalNode: [n21] d1, [387,402], Identifier}. minGroupIdxToAdd: undefined
                          updateHeapWithGroupForFlow[out]: group: {maximalNode: [n21] d1, [387,402], Identifier}
                        getTypeByMrNarrow[out] expr: [n21] d1, [387,402], Identifier -> never
                      getFlowTypeOfReference[out]: reference [n21] d1, [387,402], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f29], BranchLabel|Label|Referenced, branchKind:then, [gftor call depth:0, return: never
                    In getIdentifier(), getFlowTypeOfReference returned never
                    checkExpression[out]: [n21] d1, [387,402], Identifier -> never
                  checkSourceElement[out]: nodeid: 52
                checkSourceElement[out]: nodeid: 51
              checkSourceElement[out]: nodeid: 50
            checkSourceElement[out]: nodeid: 46
          checkSourceElement[out]: nodeid: 41
        checkSourceElement[out]: nodeid: 35
      checkSourceElement[out]: nodeid: 34
      checkSourceElement[in] node: [n53] d1;, [423,431], ExpressionStatement
        checkExpression[in] node: [n11] d1, [423,430], Identifier
          getFlowTypeOfReference[in]: reference [n11] d1, [423,430], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f3], BranchLabel|Label|Referenced, branchKind:postWhileLoop, [gftor call depth:0
            getTypeByMrNarrow[in] expr: [n11] d1, [423,430], Identifier
            getTypeByMrNarrowAux[dbg]: reference: [n11] d1, [423,430], Identifier, maximalNode: [n11] d1, [423,430], Identifier
              updateHeapWithGroupForFlow[in]: group: {groupIdx: 12, maximalNode: [n11] d1, [423,430], Identifier}. minGroupIdxToAdd: undefined
                updateHeapWithGroupForFlow[dbg] heap[1=>12] [n11] d1, [423,430], Identifier
              updateHeapWithGroupForFlow[out]: group: {maximalNode: [n11] d1, [423,430], Identifier}
              resolveGroupForFlow[in]: [n11] d1, [423,430], Identifier, groupIndex:12, kind:plain, maximalNode.parent.kind:ExpressionStatement, 
              resolveGroupForFlow[dbg:] currentBranchesMap[before]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap.size:6
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n24] d1, [311,326], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:9
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:11
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n12] true, [182,186], TrueKeyword]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1 | 0, assignedType:1 | 0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:8
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   groupIdx:10
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:     false:
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[before]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
              resolveGroupForFlow[dbg:] endof currentBranchesMap[before]:
                createSuperloopRefTypesSymtab[in]
                createSuperloopRefTypesSymtab[in] stin: [
                createSuperloopRefTypesSymtab[in] stin: loopGroup?.groupIdx:2, x.loopState?.invocations:2
                createSuperloopRefTypesSymtab[in] stin: x.loopState.symbolsAssigned:[]
                createSuperloopRefTypesSymtab[in] stin: x.loopState.symbolsAssignedRange:[]
                createSuperloopRefTypesSymtab[in] stin:   symbol:{d1,16}, { type:1, assignedType:<undef>, isAssign:true }
                createSuperloopRefTypesSymtab[in] stin:   outer:[
                createSuperloopRefTypesSymtab[in] stin:   outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
                createSuperloopRefTypesSymtab[in] stin:   outer:]
                createSuperloopRefTypesSymtab[in] stin: ]
                createSuperloopRefTypesSymtab[out] stout: [
                createSuperloopRefTypesSymtab[out] stout:   symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                createSuperloopRefTypesSymtab[out] stout: ]
                createSuperloopRefTypesSymtab[out]
              CurrentBranchesMapC[0].delete(groupIdx:2,[else,]),  size before delete:6
              CurrentBranchesMapC[0].delete(groupIdx:9,<undefined>),  size before delete:5
              resolveGroupForFlow[dbg] result of getAnteConstraintItemAndSymtab():
              resolveGroupForFlow[dbg] symtab: [
              resolveGroupForFlow[dbg] symtab:   symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
              resolveGroupForFlow[dbg] symtab: ]
              resolveGroupForFlow[dbg] constraintItem: {
              resolveGroupForFlow[dbg] constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg] constraintItem:  kind: always,
              resolveGroupForFlow[dbg] constraintItem: },
              resolveGroupForFlow[dbg] end of result of getAnteConstraintItemAndSymtab():
                mrNarrowTypes[in] expr:[n11] d1, [423,430], Identifier, crit:{kind:none,negate:undefined}, inferStatus:{inCondition:false, currentReplayable:undefined}, qdotfalloutIn: <undef>
                mrNarrowTypes[in] refTypesSymtab:
                  [
                    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                  ]
                mrNarrowTypes[in] constraintItemIn:
                  {
                   symbolsInvoled:
                   kind: always,
                  },
                  mrNarrowTypesInner[in] expr:[n11] d1, [423,430], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                  mrNarrowTypesInner[in] refTypesSymtab:
                  mrNarrowTypesInner[in] refTypesSymtab:  [
                  mrNarrowTypesInner[in] refTypesSymtab:    symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                  mrNarrowTypesInner[in] refTypesSymtab:  ]
                  mrNarrowTypesInner[in] constraintItemIn:
                  mrNarrowTypesInner[in] constraintItemIn:  {
                  mrNarrowTypesInner[in] constraintItemIn:   symbolsInvoled:
                  mrNarrowTypesInner[in] constraintItemIn:   kind: always,
                  mrNarrowTypesInner[in] constraintItemIn:  },
                  mrNarrowTypesInner[dbg] case SyntaxKind.Identifier
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   kind: return,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symbol: { id:16, ename: d1 },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   type: 1
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   symtab: [
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   ]
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:   constraintItem: {
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      symbolsInvoled:
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:      kind: always,
                  mrNarrowTypesInner[out]:  innerret.arttr[0]:     },
                  mrNarrowTypesInner[out]:  innerret.arttr[0]: }
                  mrNarrowTypesInner[out]: innerret.assignmentData: { symbol: { id:16, ename: d1 }, isconst: false
                  mrNarrowTypesInner[out] expr:[n11] d1, [423,430], Identifier, inferStatus:{inCondition:false, currentReplayableItem:undefined
                mrNarrowTypes[dbg]: qdotfallout.length: 0
                mrNarrowTypes[dbg]: [n11] d1, [423,430], Identifier: Merge the temporary qdotfallout into the array for RefTypesTableReturn before applying crit:{kind:none,negate:undefined}
                mrNarrowTypes[out]: mrNarrowTypesReturn.inferRefRtnType.passing:
                  mrNarrowTypes[dbg]: passing:  {
                  mrNarrowTypes[dbg]: passing:    kind: return,
                  mrNarrowTypes[dbg]: passing:    type: 1
                  mrNarrowTypes[dbg]: passing:    symtab: [
                  mrNarrowTypes[dbg]: passing:      symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                  mrNarrowTypes[dbg]: passing:    ]
                  mrNarrowTypes[dbg]: passing:    constraintItem: {
                  mrNarrowTypes[dbg]: passing:       symbolsInvoled:
                  mrNarrowTypes[dbg]: passing:       kind: always,
                  mrNarrowTypes[dbg]: passing:      },
                  mrNarrowTypes[dbg]: passing:  }
                mrNarrowTypes[out]:mrNarrowTypesReturn.inferRefRtnType.failing:
                  mrNarrowTypes[dbg]: failing:  undefined
                  mrNarrowTypes[dbg]: unmerged[0]: {
                  mrNarrowTypes[dbg]: unmerged[0]:   kind: return,
                  mrNarrowTypes[dbg]: unmerged[0]:   symbol: { id:16, ename: d1 },
                  mrNarrowTypes[dbg]: unmerged[0]:   type: 1
                  mrNarrowTypes[dbg]: unmerged[0]:   symtab: [
                  mrNarrowTypes[dbg]: unmerged[0]:     symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
                  mrNarrowTypes[dbg]: unmerged[0]:   ]
                  mrNarrowTypes[dbg]: unmerged[0]:   constraintItem: {
                  mrNarrowTypes[dbg]: unmerged[0]:      symbolsInvoled:
                  mrNarrowTypes[dbg]: unmerged[0]:      kind: always,
                  mrNarrowTypes[dbg]: unmerged[0]:     },
                  mrNarrowTypes[dbg]: unmerged[0]: }
                mrNarrowTypes[out] byNode: node: [n11] d1, [423,430], Identifier, type: 1
                mrNarrowTypes[out] [n11] d1, [423,430], Identifier
              resolveGroupForFlow[dbg:] currentBranchesMap[after]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap.size:5
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n21] d1, [387,402], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:11
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n19] d1===0, [213,219], BinaryExpression]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:4
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n23] d1===1, [302,308], BinaryExpression]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:8
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         loopGroup?.groupIdx:2, x.loopState?.invocations:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssigned:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         x.loopState.symbolsAssignedRange:[]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:[
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:  symbol:{d1,16}, { type:0, assignedType:0, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:           outer:]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:[deleted]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n22] d1===999, [377,385], BinaryExpression]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:10
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:2
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     true:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     false:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       symtab: <undef>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  symbolsInvoled: <undefined>
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem:  kind: never,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:       constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap: [[n11] d1, [423,430], Identifier]:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   groupIdx:12
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:   cbe.kind:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         [
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:           symbol:{d1,16}, { type:1, assignedType:1, isAssign:true }
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     symtab:         ]
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: {
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  symbolsInvoled:
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem:  kind: always,
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: forFlow.currentBranchesMap:     constraintItem: },
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n32] 0, [101,103], NumericLiteral] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:0: [node:[n14] d1 = 0, [96,103], VariableDeclaration] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:1: [node:[n13] d1, [104,111], Identifier] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:2: [node:[n12] true, [182,186], TrueKeyword] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:3: [node:[n20] d1, [188,199], Identifier] -> type:0 | 1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n25] d1, [213,215], Identifier] -> type:0 | 1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n37] 0, [218,219], NumericLiteral] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:4: [node:[n19] d1===0, [213,219], BinaryExpression] -> type:boolean
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:5: [node:[n18] d1, [221,236], Identifier] -> type:0
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n38] 1, [254,255], NumericLiteral] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:6: [node:[n16] d1=1, [238,255], BinaryExpression] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:7: [node:[n15] d1, [256,271], Identifier] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n26] d1, [302,304], Identifier] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n39] 1, [307,308], NumericLiteral] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:8: [node:[n23] d1===1, [302,308], BinaryExpression] -> type:true
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:9: [node:[n24] d1, [311,326], Identifier] -> type:1
              resolveGroupForFlow[dbg:] currentBranchesMap[after]: groupIdx:12: [node:[n11] d1, [423,430], Identifier] -> type:1
              resolveGroupForFlow[dbg:] endof currentBranchesMap[after]:
              resolveGroupForFlow[out]: [n11] d1, [423,430], Identifier, 
            getTypeByMrNarrow[out] expr: [n11] d1, [423,430], Identifier -> 1
          getFlowTypeOfReference[out]: reference [n11] d1, [423,430], Identifier, declaredType: number, initialType: number | undefined, flowContainer: 29, flowNode: [f3], BranchLabel|Label|Referenced, branchKind:postWhileLoop, [gftor call depth:0, return: 1
        In getIdentifier(), getFlowTypeOfReference returned 1
        checkExpression[out]: [n11] d1, [423,430], Identifier -> 1
      checkSourceElement[out]: nodeid: 53
    checkSourceElement[out]: nodeid: 30
  checkSourceElement[out]: nodeid: 29
  checkSourceElement[in] node: [n54] , [433,434], EndOfFileToken
  checkSourceElement[out]: nodeid: 54
_caxnc-whileLoop-0056.ts, time(ms): 477, myMaxDepth: 0
